
S2_Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e24  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007004  08007004  00008004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007124  08007124  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007124  08007124  00008124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800712c  0800712c  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800712c  0800712c  0000812c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007130  08007130  00008130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007134  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000070  080071a4  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  080071a4  00009514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132bc  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027bf  00000000  00000000  0001c35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001eb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c70  00000000  00000000  0001fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002686b  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014415  00000000  00000000  00046ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f06ba  00000000  00000000  0005b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014baca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc0  00000000  00000000  0014bb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001506d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006fec 	.word	0x08006fec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006fec 	.word	0x08006fec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 ff80 	bl	80014ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f923 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 fabb 	bl	8000b38 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c2:	f000 fa7f 	bl	8000ac4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005c6:	f000 f9a9 	bl	800091c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005ca:	f000 f9f1 	bl	80009b0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80005ce:	f000 f965 	bl	800089c <MX_I2C1_Init>
  MX_SPI3_Init();
 80005d2:	f000 fa39 	bl	8000a48 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 80005d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005da:	f000 ffdf 	bl	800159c <HAL_Delay>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rx_UART();
 80005de:	f000 fb9f 	bl	8000d20 <rx_UART>
	  start_gen();
 80005e2:	f000 fbd7 	bl	8000d94 <start_gen>
	  random_number(size);
 80005e6:	4b7a      	ldr	r3, [pc, #488]	@ (80007d0 <main+0x220>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fbdc 	bl	8000da8 <random_number>
	  if(Delay != 0)
 80005f0:	4b78      	ldr	r3, [pc, #480]	@ (80007d4 <main+0x224>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	f000 80e8 	beq.w	80007ca <main+0x21a>
	  {
		  if(breaker==0)
 80005fa:	4b77      	ldr	r3, [pc, #476]	@ (80007d8 <main+0x228>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d10b      	bne.n	800061a <main+0x6a>
		  {
			  Target=random_number(size);
 8000602:	4b73      	ldr	r3, [pc, #460]	@ (80007d0 <main+0x220>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fbce 	bl	8000da8 <random_number>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b72      	ldr	r3, [pc, #456]	@ (80007dc <main+0x22c>)
 8000612:	601a      	str	r2, [r3, #0]
			  breaker=1;
 8000614:	4b70      	ldr	r3, [pc, #448]	@ (80007d8 <main+0x228>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
		  }
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET && state==0)
 800061a:	2101      	movs	r1, #1
 800061c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000620:	f001 fc9e 	bl	8001f60 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d106      	bne.n	8000638 <main+0x88>
 800062a:	4b6d      	ldr	r3, [pc, #436]	@ (80007e0 <main+0x230>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d102      	bne.n	8000638 <main+0x88>
		  {
			  state=1;
 8000632:	4b6b      	ldr	r3, [pc, #428]	@ (80007e0 <main+0x230>)
 8000634:	2201      	movs	r2, #1
 8000636:	801a      	strh	r2, [r3, #0]

		  }

		  if(state==1)
 8000638:	4b69      	ldr	r3, [pc, #420]	@ (80007e0 <main+0x230>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d11e      	bne.n	800067e <main+0xce>
		  {
			  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET )
 8000640:	2101      	movs	r1, #1
 8000642:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000646:	f001 fc8b 	bl	8001f60 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b01      	cmp	r3, #1
 800064e:	d103      	bne.n	8000658 <main+0xa8>
			  {
				  stop = 1;
 8000650:	4b64      	ldr	r3, [pc, #400]	@ (80007e4 <main+0x234>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e012      	b.n	800067e <main+0xce>
			  }
			  else
			  {
				  if(Counter>255)
 8000658:	4b63      	ldr	r3, [pc, #396]	@ (80007e8 <main+0x238>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	2bff      	cmp	r3, #255	@ 0xff
 800065e:	d903      	bls.n	8000668 <main+0xb8>
				  {
					  Counter=0;
 8000660:	4b61      	ldr	r3, [pc, #388]	@ (80007e8 <main+0x238>)
 8000662:	2200      	movs	r2, #0
 8000664:	801a      	strh	r2, [r3, #0]
 8000666:	e005      	b.n	8000674 <main+0xc4>
				  }
				  else
				  {
				  Counter+=1;
 8000668:	4b5f      	ldr	r3, [pc, #380]	@ (80007e8 <main+0x238>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b5d      	ldr	r3, [pc, #372]	@ (80007e8 <main+0x238>)
 8000672:	801a      	strh	r2, [r3, #0]
				  }
				  HAL_Delay(Delay);
 8000674:	4b57      	ldr	r3, [pc, #348]	@ (80007d4 <main+0x224>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 ff8f 	bl	800159c <HAL_Delay>
			  }
		  }

		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET && stop == 1)
 800067e:	2102      	movs	r1, #2
 8000680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000684:	f001 fc6c 	bl	8001f60 <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d13f      	bne.n	800070e <main+0x15e>
 800068e:	4b55      	ldr	r3, [pc, #340]	@ (80007e4 <main+0x234>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d13b      	bne.n	800070e <main+0x15e>
		  {
			  answer[mem] = (uint16_t)(Counter & 0xFF);
 8000696:	4b54      	ldr	r3, [pc, #336]	@ (80007e8 <main+0x238>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	4b53      	ldr	r3, [pc, #332]	@ (80007ec <main+0x23c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	b2d3      	uxtb	r3, r2
 80006a4:	4a52      	ldr	r2, [pc, #328]	@ (80007f0 <main+0x240>)
 80006a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

			  if (hi2c1.State == HAL_I2C_STATE_READY)
 80006aa:	4b52      	ldr	r3, [pc, #328]	@ (80007f4 <main+0x244>)
 80006ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b20      	cmp	r3, #32
 80006b4:	d109      	bne.n	80006ca <main+0x11a>
			  {
				HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT, answer, 4);
 80006b6:	2304      	movs	r3, #4
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	4b4d      	ldr	r3, [pc, #308]	@ (80007f0 <main+0x240>)
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2302      	movs	r3, #2
 80006c0:	222c      	movs	r2, #44	@ 0x2c
 80006c2:	21a0      	movs	r1, #160	@ 0xa0
 80006c4:	484b      	ldr	r0, [pc, #300]	@ (80007f4 <main+0x244>)
 80006c6:	f001 fd39 	bl	800213c <HAL_I2C_Mem_Write_IT>
			  }

			  HAL_Delay(50);
 80006ca:	2032      	movs	r0, #50	@ 0x32
 80006cc:	f000 ff66 	bl	800159c <HAL_Delay>

			  if (hi2c1.State == HAL_I2C_STATE_READY)
 80006d0:	4b48      	ldr	r3, [pc, #288]	@ (80007f4 <main+0x244>)
 80006d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b20      	cmp	r3, #32
 80006da:	d109      	bne.n	80006f0 <main+0x140>
			  {
					HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,read, 4);
 80006dc:	2304      	movs	r3, #4
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	4b45      	ldr	r3, [pc, #276]	@ (80007f8 <main+0x248>)
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2302      	movs	r3, #2
 80006e6:	222c      	movs	r2, #44	@ 0x2c
 80006e8:	21a0      	movs	r1, #160	@ 0xa0
 80006ea:	4842      	ldr	r0, [pc, #264]	@ (80007f4 <main+0x244>)
 80006ec:	f001 fdb0 	bl	8002250 <HAL_I2C_Mem_Read_IT>
			  }

			  mem++;
 80006f0:	4b3e      	ldr	r3, [pc, #248]	@ (80007ec <main+0x23c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b3c      	ldr	r3, [pc, #240]	@ (80007ec <main+0x23c>)
 80006fa:	701a      	strb	r2, [r3, #0]
			  stop = 0;
 80006fc:	4b39      	ldr	r3, [pc, #228]	@ (80007e4 <main+0x234>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
			  Counter=0;
 8000702:	4b39      	ldr	r3, [pc, #228]	@ (80007e8 <main+0x238>)
 8000704:	2200      	movs	r2, #0
 8000706:	801a      	strh	r2, [r3, #0]
			  state=0;
 8000708:	4b35      	ldr	r3, [pc, #212]	@ (80007e0 <main+0x230>)
 800070a:	2200      	movs	r2, #0
 800070c:	801a      	strh	r2, [r3, #0]
		  }

		  if (mem==4)
 800070e:	4b37      	ldr	r3, [pc, #220]	@ (80007ec <main+0x23c>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b04      	cmp	r3, #4
 8000714:	d159      	bne.n	80007ca <main+0x21a>
		  {
			  Final_score=0;
 8000716:	4b39      	ldr	r3, [pc, #228]	@ (80007fc <main+0x24c>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
			  for(int i=0;i<4;i++)
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	e033      	b.n	800078a <main+0x1da>
			  {
				if(answer[i]>=Target)
 8000722:	4a33      	ldr	r2, [pc, #204]	@ (80007f0 <main+0x240>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800072a:	4b2c      	ldr	r3, [pc, #176]	@ (80007dc <main+0x22c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	db10      	blt.n	8000754 <main+0x1a4>
				{
					Final_score += Target/answer[i];
 8000732:	4b2a      	ldr	r3, [pc, #168]	@ (80007dc <main+0x22c>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	492e      	ldr	r1, [pc, #184]	@ (80007f0 <main+0x240>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800073e:	fb92 f2f3 	sdiv	r2, r2, r3
 8000742:	4b2e      	ldr	r3, [pc, #184]	@ (80007fc <main+0x24c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a2c      	ldr	r2, [pc, #176]	@ (80007fc <main+0x24c>)
 800074a:	6013      	str	r3, [r2, #0]
					debug = 9;
 800074c:	4b2c      	ldr	r3, [pc, #176]	@ (8000800 <main+0x250>)
 800074e:	2209      	movs	r2, #9
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	e017      	b.n	8000784 <main+0x1d4>
				}
				else if(answer[i]<Target)
 8000754:	4a26      	ldr	r2, [pc, #152]	@ (80007f0 <main+0x240>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <main+0x22c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	429a      	cmp	r2, r3
 8000762:	da0f      	bge.n	8000784 <main+0x1d4>
				{
					Final_score += answer[i]/Target;
 8000764:	4a22      	ldr	r2, [pc, #136]	@ (80007f0 <main+0x240>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <main+0x22c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	fb92 f2f3 	sdiv	r2, r2, r3
 8000774:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <main+0x24c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4413      	add	r3, r2
 800077a:	4a20      	ldr	r2, [pc, #128]	@ (80007fc <main+0x24c>)
 800077c:	6013      	str	r3, [r2, #0]
					debug = 10;
 800077e:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <main+0x250>)
 8000780:	220a      	movs	r2, #10
 8000782:	701a      	strb	r2, [r3, #0]
			  for(int i=0;i<4;i++)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3301      	adds	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b03      	cmp	r3, #3
 800078e:	ddc8      	ble.n	8000722 <main+0x172>
				}
			  }

			  memset(answer,0,sizeof(answer));
 8000790:	2210      	movs	r2, #16
 8000792:	2100      	movs	r1, #0
 8000794:	4816      	ldr	r0, [pc, #88]	@ (80007f0 <main+0x240>)
 8000796:	f005 fd8e 	bl	80062b6 <memset>
			  if (hi2c1.State == HAL_I2C_STATE_READY)
 800079a:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <main+0x244>)
 800079c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b20      	cmp	r3, #32
 80007a4:	d109      	bne.n	80007ba <main+0x20a>
			  {
				HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT, answer, 4);
 80007a6:	2304      	movs	r3, #4
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <main+0x240>)
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2302      	movs	r3, #2
 80007b0:	222c      	movs	r2, #44	@ 0x2c
 80007b2:	21a0      	movs	r1, #160	@ 0xa0
 80007b4:	480f      	ldr	r0, [pc, #60]	@ (80007f4 <main+0x244>)
 80007b6:	f001 fcc1 	bl	800213c <HAL_I2C_Mem_Write_IT>
			  }
			  memset(read,0,sizeof(read));
 80007ba:	2204      	movs	r2, #4
 80007bc:	2100      	movs	r1, #0
 80007be:	480e      	ldr	r0, [pc, #56]	@ (80007f8 <main+0x248>)
 80007c0:	f005 fd79 	bl	80062b6 <memset>
			  mem=0;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <main+0x23c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
		  }

  	  }
	  sendUART();
 80007ca:	f000 fa87 	bl	8000cdc <sendUART>
	  rx_UART();
 80007ce:	e706      	b.n	80005de <main+0x2e>
 80007d0:	20000000 	.word	0x20000000
 80007d4:	200003b8 	.word	0x200003b8
 80007d8:	200003bc 	.word	0x200003bc
 80007dc:	20000398 	.word	0x20000398
 80007e0:	200003b0 	.word	0x200003b0
 80007e4:	200003b3 	.word	0x200003b3
 80007e8:	20000396 	.word	0x20000396
 80007ec:	200003b2 	.word	0x200003b2
 80007f0:	2000039c 	.word	0x2000039c
 80007f4:	2000008c 	.word	0x2000008c
 80007f8:	200003ac 	.word	0x200003ac
 80007fc:	20000004 	.word	0x20000004
 8000800:	200003bd 	.word	0x200003bd

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	@ 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	2238      	movs	r2, #56	@ 0x38
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f005 fd4f 	bl	80062b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000826:	2000      	movs	r0, #0
 8000828:	f003 fa20 	bl	8003c6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082c:	2302      	movs	r3, #2
 800082e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000836:	2340      	movs	r3, #64	@ 0x40
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083e:	2302      	movs	r3, #2
 8000840:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000842:	2304      	movs	r3, #4
 8000844:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000846:	2355      	movs	r3, #85	@ 0x55
 8000848:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0318 	add.w	r3, r7, #24
 800085a:	4618      	mov	r0, r3
 800085c:	f003 faba 	bl	8003dd4 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000866:	f000 fab2 	bl	8000dce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2303      	movs	r3, #3
 8000870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2104      	movs	r1, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f003 fdb8 	bl	80043f8 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800088e:	f000 fa9e 	bl	8000dce <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	@ 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <MX_I2C1_Init+0x74>)
 80008a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000914 <MX_I2C1_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_I2C1_Init+0x74>)
 80008a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <MX_I2C1_Init+0x7c>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008ac:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <MX_I2C1_Init+0x74>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008be:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ca:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <MX_I2C1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_I2C1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d6:	480e      	ldr	r0, [pc, #56]	@ (8000910 <MX_I2C1_Init+0x74>)
 80008d8:	f001 fb95 	bl	8002006 <HAL_I2C_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008e2:	f000 fa74 	bl	8000dce <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4809      	ldr	r0, [pc, #36]	@ (8000910 <MX_I2C1_Init+0x74>)
 80008ea:	f003 f927 	bl	8003b3c <HAL_I2CEx_ConfigAnalogFilter>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008f4:	f000 fa6b 	bl	8000dce <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_I2C1_Init+0x74>)
 80008fc:	f003 f969 	bl	8003bd2 <HAL_I2CEx_ConfigDigitalFilter>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 fa62 	bl	8000dce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000008c 	.word	0x2000008c
 8000914:	40005400 	.word	0x40005400
 8000918:	30a0a7fb 	.word	0x30a0a7fb

0800091c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000920:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000922:	4a21      	ldr	r2, [pc, #132]	@ (80009a8 <MX_LPUART1_UART_Init+0x8c>)
 8000924:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 96200;
 8000926:	4b1f      	ldr	r3, [pc, #124]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000928:	4a20      	ldr	r2, [pc, #128]	@ (80009ac <MX_LPUART1_UART_Init+0x90>)
 800092a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092c:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000932:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000938:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800093e:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000940:	220c      	movs	r2, #12
 8000942:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000944:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000958:	2200      	movs	r2, #0
 800095a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800095c:	4811      	ldr	r0, [pc, #68]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 800095e:	f004 fb74 	bl	800504a <HAL_UART_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000968:	f000 fa31 	bl	8000dce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000970:	f005 fa66 	bl	8005e40 <HAL_UARTEx_SetTxFifoThreshold>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800097a:	f000 fa28 	bl	8000dce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	4808      	ldr	r0, [pc, #32]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000982:	f005 fa9b 	bl	8005ebc <HAL_UARTEx_SetRxFifoThreshold>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800098c:	f000 fa1f 	bl	8000dce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_LPUART1_UART_Init+0x88>)
 8000992:	f005 fa1c 	bl	8005dce <HAL_UARTEx_DisableFifoMode>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800099c:	f000 fa17 	bl	8000dce <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200001a0 	.word	0x200001a0
 80009a8:	40008000 	.word	0x40008000
 80009ac:	000177c8 	.word	0x000177c8

080009b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b4:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009b6:	4a23      	ldr	r2, [pc, #140]	@ (8000a44 <MX_USART1_UART_Init+0x94>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ba:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f2:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f8:	4811      	ldr	r0, [pc, #68]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009fa:	f004 fb26 	bl	800504a <HAL_UART_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a04:	f000 f9e3 	bl	8000dce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 8000a0c:	f005 fa18 	bl	8005e40 <HAL_UARTEx_SetTxFifoThreshold>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a16:	f000 f9da 	bl	8000dce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4808      	ldr	r0, [pc, #32]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 8000a1e:	f005 fa4d 	bl	8005ebc <HAL_UARTEx_SetRxFifoThreshold>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a28:	f000 f9d1 	bl	8000dce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 8000a2e:	f005 f9ce 	bl	8005dce <HAL_UARTEx_DisableFifoMode>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a38:	f000 f9c9 	bl	8000dce <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000234 	.word	0x20000234
 8000a44:	40013800 	.word	0x40013800

08000a48 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <MX_SPI3_Init+0x78>)
 8000a50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000a54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a58:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a60:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000a62:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a66:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a7a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000a7e:	2238      	movs	r2, #56	@ 0x38
 8000a80:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000a96:	2207      	movs	r2, #7
 8000a98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_SPI3_Init+0x74>)
 8000aa8:	f004 f910 	bl	8004ccc <HAL_SPI_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ab2:	f000 f98c 	bl	8000dce <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000328 	.word	0x20000328
 8000ac0:	40003c00 	.word	0x40003c00

08000ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000aca:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <MX_DMA_Init+0x70>)
 8000acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ace:	4a19      	ldr	r2, [pc, #100]	@ (8000b34 <MX_DMA_Init+0x70>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ad6:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <MX_DMA_Init+0x70>)
 8000ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae2:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <MX_DMA_Init+0x70>)
 8000ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ae6:	4a13      	ldr	r2, [pc, #76]	@ (8000b34 <MX_DMA_Init+0x70>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6493      	str	r3, [r2, #72]	@ 0x48
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_DMA_Init+0x70>)
 8000af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	200b      	movs	r0, #11
 8000b00:	f000 fe49 	bl	8001796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b04:	200b      	movs	r0, #11
 8000b06:	f000 fe60 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	200c      	movs	r0, #12
 8000b10:	f000 fe41 	bl	8001796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b14:	200c      	movs	r0, #12
 8000b16:	f000 fe58 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	200d      	movs	r0, #13
 8000b20:	f000 fe39 	bl	8001796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b24:	200d      	movs	r0, #13
 8000b26:	f000 fe50 	bl	80017ca <HAL_NVIC_EnableIRQ>

}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b5f      	ldr	r3, [pc, #380]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	4a5e      	ldr	r2, [pc, #376]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5a:	4b5c      	ldr	r3, [pc, #368]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b66:	4b59      	ldr	r3, [pc, #356]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	4a58      	ldr	r2, [pc, #352]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000b6c:	f043 0320 	orr.w	r3, r3, #32
 8000b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b72:	4b56      	ldr	r3, [pc, #344]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	f003 0320 	and.w	r3, r3, #32
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b53      	ldr	r3, [pc, #332]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	4a52      	ldr	r2, [pc, #328]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8a:	4b50      	ldr	r3, [pc, #320]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b4d      	ldr	r3, [pc, #308]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	4a4c      	ldr	r2, [pc, #304]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	4b47      	ldr	r3, [pc, #284]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	4a46      	ldr	r2, [pc, #280]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bba:	4b44      	ldr	r3, [pc, #272]	@ (8000ccc <MX_GPIO_Init+0x194>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4841      	ldr	r0, [pc, #260]	@ (8000cd0 <MX_GPIO_Init+0x198>)
 8000bcc:	f001 f9e0 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2130      	movs	r1, #48	@ 0x30
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd8:	f001 f9da 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2101      	movs	r1, #1
 8000be0:	483c      	ldr	r0, [pc, #240]	@ (8000cd4 <MX_GPIO_Init+0x19c>)
 8000be2:	f001 f9d5 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2104      	movs	r1, #4
 8000bea:	483b      	ldr	r0, [pc, #236]	@ (8000cd8 <MX_GPIO_Init+0x1a0>)
 8000bec:	f001 f9d0 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4832      	ldr	r0, [pc, #200]	@ (8000cd0 <MX_GPIO_Init+0x198>)
 8000c08:	f001 f828 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	482c      	ldr	r0, [pc, #176]	@ (8000cd0 <MX_GPIO_Init+0x198>)
 8000c20:	f001 f81c 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c24:	2302      	movs	r3, #2
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c28:	2311      	movs	r3, #17
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4825      	ldr	r0, [pc, #148]	@ (8000cd0 <MX_GPIO_Init+0x198>)
 8000c3c:	f001 f80e 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8;
 8000c40:	f240 1303 	movw	r3, #259	@ 0x103
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c58:	f001 f800 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000c5c:	2330      	movs	r3, #48	@ 0x30
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c60:	2311      	movs	r3, #17
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c76:	f000 fff1 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c7e:	2311      	movs	r3, #17
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4810      	ldr	r0, [pc, #64]	@ (8000cd4 <MX_GPIO_Init+0x19c>)
 8000c92:	f000 ffe3 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c96:	2304      	movs	r3, #4
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	480a      	ldr	r0, [pc, #40]	@ (8000cd8 <MX_GPIO_Init+0x1a0>)
 8000cae:	f000 ffd5 	bl	8001c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2028      	movs	r0, #40	@ 0x28
 8000cb8:	f000 fd6d 	bl	8001796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cbc:	2028      	movs	r0, #40	@ 0x28
 8000cbe:	f000 fd84 	bl	80017ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	@ 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	48000800 	.word	0x48000800
 8000cd4:	48000400 	.word	0x48000400
 8000cd8:	48000c00 	.word	0x48000c00

08000cdc <sendUART>:

/* USER CODE BEGIN 4 */
void sendUART()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

		databytes[0] = 0x45; // Header byte
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <sendUART+0x38>)
 8000ce2:	2245      	movs	r2, #69	@ 0x45
 8000ce4:	701a      	strb	r2, [r3, #0]
		databytes[1] = (uint8_t)(Final_score & 0x00FF); // Lower byte
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <sendUART+0x3c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <sendUART+0x38>)
 8000cee:	705a      	strb	r2, [r3, #1]
		databytes[2] = (uint8_t)((Final_score >> 8) & 0x00FF); // Upper byte
 8000cf0:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <sendUART+0x3c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	121b      	asrs	r3, r3, #8
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <sendUART+0x38>)
 8000cfa:	709a      	strb	r2, [r3, #2]
		databytes[3] = 0x0A;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <sendUART+0x38>)
 8000cfe:	220a      	movs	r2, #10
 8000d00:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit(&hlpuart1, databytes, sizeof(databytes), 10);
 8000d02:	230a      	movs	r3, #10
 8000d04:	2204      	movs	r2, #4
 8000d06:	4903      	ldr	r1, [pc, #12]	@ (8000d14 <sendUART+0x38>)
 8000d08:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <sendUART+0x40>)
 8000d0a:	f004 f9ee 	bl	80050ea <HAL_UART_Transmit>
//			else if (i>2)
//			{
//				i=0;
//			}
//		HAL_Delay(500);
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000038c 	.word	0x2000038c
 8000d18:	20000004 	.word	0x20000004
 8000d1c:	200001a0 	.word	0x200001a0

08000d20 <rx_UART>:
void rx_UART()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	Rx[4] = '\0';
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <rx_UART+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	711a      	strb	r2, [r3, #4]
	HAL_UART_Receive(&hlpuart1, Rx, 5,10);
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	2205      	movs	r2, #5
 8000d2e:	4915      	ldr	r1, [pc, #84]	@ (8000d84 <rx_UART+0x64>)
 8000d30:	4815      	ldr	r0, [pc, #84]	@ (8000d88 <rx_UART+0x68>)
 8000d32:	f004 fa68 	bl	8005206 <HAL_UART_Receive>
	Difficulty = (uint16_t)(Rx[2]<< 8) + (uint8_t)(Rx[1]);
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <rx_UART+0x64>)
 8000d38:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <rx_UART+0x64>)
 8000d44:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <rx_UART+0x6c>)
 8000d50:	801a      	strh	r2, [r3, #0]

	switch (Difficulty)
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <rx_UART+0x6c>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d00e      	beq.n	8000d78 <rx_UART+0x58>
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	dc10      	bgt.n	8000d80 <rx_UART+0x60>
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d002      	beq.n	8000d68 <rx_UART+0x48>
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d004      	beq.n	8000d70 <rx_UART+0x50>
		break;
	}

//			    z = (RxBuffer[6] & 0x0F) + ((RxBuffer[5] & 0x0F) << 4 );
//			    z = RxBuffer[5]+RxBuffer[6];
}
 8000d66:	e00b      	b.n	8000d80 <rx_UART+0x60>
		Delay = 200;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <rx_UART+0x70>)
 8000d6a:	22c8      	movs	r2, #200	@ 0xc8
 8000d6c:	601a      	str	r2, [r3, #0]
		break;
 8000d6e:	e007      	b.n	8000d80 <rx_UART+0x60>
		Delay = 100;
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <rx_UART+0x70>)
 8000d72:	2264      	movs	r2, #100	@ 0x64
 8000d74:	601a      	str	r2, [r3, #0]
		break;
 8000d76:	e003      	b.n	8000d80 <rx_UART+0x60>
		Delay = 5;
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <rx_UART+0x70>)
 8000d7a:	2205      	movs	r2, #5
 8000d7c:	601a      	str	r2, [r3, #0]
		break;
 8000d7e:	bf00      	nop
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000390 	.word	0x20000390
 8000d88:	200001a0 	.word	0x200001a0
 8000d8c:	200003b4 	.word	0x200003b4
 8000d90:	200003b8 	.word	0x200003b8

08000d94 <start_gen>:
//	                    {
//	                    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
//	                    }
//	                }
void start_gen()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	srand(HAL_GetTick());
 8000d98:	f000 fbf4 	bl	8001584 <HAL_GetTick>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f005 f918 	bl	8005fd4 <srand>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <random_number>:
uint16_t random_number(uint16_t array_size)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
    return rand() % array_size;
 8000db2:	f005 f93d 	bl	8006030 <rand>
 8000db6:	4602      	mov	r2, r0
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	fb92 f1f3 	sdiv	r1, r2, r3
 8000dbe:	fb01 f303 	mul.w	r3, r1, r3
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	b29b      	uxth	r3, r3
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd2:	b672      	cpsid	i
}
 8000dd4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd6:	bf00      	nop
 8000dd8:	e7fd      	b.n	8000dd6 <Error_Handler+0x8>
	...

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <HAL_MspInit+0x44>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e20 <HAL_MspInit+0x44>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <HAL_MspInit+0x44>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <HAL_MspInit+0x44>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfe:	4a08      	ldr	r2, [pc, #32]	@ (8000e20 <HAL_MspInit+0x44>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_MspInit+0x44>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e12:	f002 ffcf 	bl	8003db4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b09e      	sub	sp, #120	@ 0x78
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	2254      	movs	r2, #84	@ 0x54
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f005 fa36 	bl	80062b6 <memset>
  if(hi2c->Instance==I2C1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a50      	ldr	r2, [pc, #320]	@ (8000f90 <HAL_I2C_MspInit+0x16c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	f040 8099 	bne.w	8000f88 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e56:	2340      	movs	r3, #64	@ 0x40
 8000e58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 fce4 	bl	8004830 <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e6e:	f7ff ffae 	bl	8000dce <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	4b48      	ldr	r3, [pc, #288]	@ (8000f94 <HAL_I2C_MspInit+0x170>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	4a47      	ldr	r2, [pc, #284]	@ (8000f94 <HAL_I2C_MspInit+0x170>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7e:	4b45      	ldr	r3, [pc, #276]	@ (8000f94 <HAL_I2C_MspInit+0x170>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e8e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e90:	2312      	movs	r3, #18
 8000e92:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	483c      	ldr	r0, [pc, #240]	@ (8000f98 <HAL_I2C_MspInit+0x174>)
 8000ea8:	f000 fed8 	bl	8001c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eac:	4b39      	ldr	r3, [pc, #228]	@ (8000f94 <HAL_I2C_MspInit+0x170>)
 8000eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb0:	4a38      	ldr	r2, [pc, #224]	@ (8000f94 <HAL_I2C_MspInit+0x170>)
 8000eb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb8:	4b36      	ldr	r3, [pc, #216]	@ (8000f94 <HAL_I2C_MspInit+0x170>)
 8000eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ebc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000ec4:	4b35      	ldr	r3, [pc, #212]	@ (8000f9c <HAL_I2C_MspInit+0x178>)
 8000ec6:	4a36      	ldr	r2, [pc, #216]	@ (8000fa0 <HAL_I2C_MspInit+0x17c>)
 8000ec8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000eca:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <HAL_I2C_MspInit+0x178>)
 8000ecc:	2210      	movs	r2, #16
 8000ece:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed0:	4b32      	ldr	r3, [pc, #200]	@ (8000f9c <HAL_I2C_MspInit+0x178>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed6:	4b31      	ldr	r3, [pc, #196]	@ (8000f9c <HAL_I2C_MspInit+0x178>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000edc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f9c <HAL_I2C_MspInit+0x178>)
 8000ede:	2280      	movs	r2, #128	@ 0x80
 8000ee0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f9c <HAL_I2C_MspInit+0x178>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <HAL_I2C_MspInit+0x178>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000eee:	4b2b      	ldr	r3, [pc, #172]	@ (8000f9c <HAL_I2C_MspInit+0x178>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef4:	4b29      	ldr	r3, [pc, #164]	@ (8000f9c <HAL_I2C_MspInit+0x178>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000efa:	4828      	ldr	r0, [pc, #160]	@ (8000f9c <HAL_I2C_MspInit+0x178>)
 8000efc:	f000 fc80 	bl	8001800 <HAL_DMA_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8000f06:	f7ff ff62 	bl	8000dce <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a23      	ldr	r2, [pc, #140]	@ (8000f9c <HAL_I2C_MspInit+0x178>)
 8000f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f10:	4a22      	ldr	r2, [pc, #136]	@ (8000f9c <HAL_I2C_MspInit+0x178>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000f16:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <HAL_I2C_MspInit+0x180>)
 8000f18:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <HAL_I2C_MspInit+0x184>)
 8000f1a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <HAL_I2C_MspInit+0x180>)
 8000f1e:	2211      	movs	r2, #17
 8000f20:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f22:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <HAL_I2C_MspInit+0x180>)
 8000f24:	2210      	movs	r2, #16
 8000f26:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <HAL_I2C_MspInit+0x180>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <HAL_I2C_MspInit+0x180>)
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <HAL_I2C_MspInit+0x180>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <HAL_I2C_MspInit+0x180>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <HAL_I2C_MspInit+0x180>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <HAL_I2C_MspInit+0x180>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f4c:	4815      	ldr	r0, [pc, #84]	@ (8000fa4 <HAL_I2C_MspInit+0x180>)
 8000f4e:	f000 fc57 	bl	8001800 <HAL_DMA_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8000f58:	f7ff ff39 	bl	8000dce <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a11      	ldr	r2, [pc, #68]	@ (8000fa4 <HAL_I2C_MspInit+0x180>)
 8000f60:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f62:	4a10      	ldr	r2, [pc, #64]	@ (8000fa4 <HAL_I2C_MspInit+0x180>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	201f      	movs	r0, #31
 8000f6e:	f000 fc12 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f72:	201f      	movs	r0, #31
 8000f74:	f000 fc29 	bl	80017ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2020      	movs	r0, #32
 8000f7e:	f000 fc0a 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f82:	2020      	movs	r0, #32
 8000f84:	f000 fc21 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3778      	adds	r7, #120	@ 0x78
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40005400 	.word	0x40005400
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	200000e0 	.word	0x200000e0
 8000fa0:	40020008 	.word	0x40020008
 8000fa4:	20000140 	.word	0x20000140
 8000fa8:	4002001c 	.word	0x4002001c

08000fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0a0      	sub	sp, #128	@ 0x80
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc4:	f107 0318 	add.w	r3, r7, #24
 8000fc8:	2254      	movs	r2, #84	@ 0x54
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f005 f972 	bl	80062b6 <memset>
  if(huart->Instance==LPUART1)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a52      	ldr	r2, [pc, #328]	@ (8001120 <HAL_UART_MspInit+0x174>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d161      	bne.n	80010a0 <HAL_UART_MspInit+0xf4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000fdc:	2320      	movs	r3, #32
 8000fde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe4:	f107 0318 	add.w	r3, r7, #24
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 fc21 	bl	8004830 <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ff4:	f7ff feeb 	bl	8000dce <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ff8:	4b4a      	ldr	r3, [pc, #296]	@ (8001124 <HAL_UART_MspInit+0x178>)
 8000ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ffc:	4a49      	ldr	r2, [pc, #292]	@ (8001124 <HAL_UART_MspInit+0x178>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001004:	4b47      	ldr	r3, [pc, #284]	@ (8001124 <HAL_UART_MspInit+0x178>)
 8001006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b44      	ldr	r3, [pc, #272]	@ (8001124 <HAL_UART_MspInit+0x178>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001014:	4a43      	ldr	r2, [pc, #268]	@ (8001124 <HAL_UART_MspInit+0x178>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101c:	4b41      	ldr	r3, [pc, #260]	@ (8001124 <HAL_UART_MspInit+0x178>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001028:	230c      	movs	r3, #12
 800102a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001038:	230c      	movs	r3, #12
 800103a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001046:	f000 fe09 	bl	8001c5c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 800104a:	4b37      	ldr	r3, [pc, #220]	@ (8001128 <HAL_UART_MspInit+0x17c>)
 800104c:	4a37      	ldr	r2, [pc, #220]	@ (800112c <HAL_UART_MspInit+0x180>)
 800104e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001050:	4b35      	ldr	r3, [pc, #212]	@ (8001128 <HAL_UART_MspInit+0x17c>)
 8001052:	2222      	movs	r2, #34	@ 0x22
 8001054:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001056:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <HAL_UART_MspInit+0x17c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800105c:	4b32      	ldr	r3, [pc, #200]	@ (8001128 <HAL_UART_MspInit+0x17c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001062:	4b31      	ldr	r3, [pc, #196]	@ (8001128 <HAL_UART_MspInit+0x17c>)
 8001064:	2280      	movs	r2, #128	@ 0x80
 8001066:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001068:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <HAL_UART_MspInit+0x17c>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800106e:	4b2e      	ldr	r3, [pc, #184]	@ (8001128 <HAL_UART_MspInit+0x17c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001074:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <HAL_UART_MspInit+0x17c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800107a:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <HAL_UART_MspInit+0x17c>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001080:	4829      	ldr	r0, [pc, #164]	@ (8001128 <HAL_UART_MspInit+0x17c>)
 8001082:	f000 fbbd 	bl	8001800 <HAL_DMA_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800108c:	f7ff fe9f 	bl	8000dce <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a25      	ldr	r2, [pc, #148]	@ (8001128 <HAL_UART_MspInit+0x17c>)
 8001094:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001098:	4a23      	ldr	r2, [pc, #140]	@ (8001128 <HAL_UART_MspInit+0x17c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800109e:	e03a      	b.n	8001116 <HAL_UART_MspInit+0x16a>
  else if(huart->Instance==USART1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a22      	ldr	r2, [pc, #136]	@ (8001130 <HAL_UART_MspInit+0x184>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d135      	bne.n	8001116 <HAL_UART_MspInit+0x16a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fbba 	bl	8004830 <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 80010c2:	f7ff fe84 	bl	8000dce <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c6:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <HAL_UART_MspInit+0x178>)
 80010c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ca:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <HAL_UART_MspInit+0x178>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010d2:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <HAL_UART_MspInit+0x178>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <HAL_UART_MspInit+0x178>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e2:	4a10      	ldr	r2, [pc, #64]	@ (8001124 <HAL_UART_MspInit+0x178>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <HAL_UART_MspInit+0x178>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010f6:	2330      	movs	r3, #48	@ 0x30
 80010f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001106:	2307      	movs	r3, #7
 8001108:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800110e:	4619      	mov	r1, r3
 8001110:	4808      	ldr	r0, [pc, #32]	@ (8001134 <HAL_UART_MspInit+0x188>)
 8001112:	f000 fda3 	bl	8001c5c <HAL_GPIO_Init>
}
 8001116:	bf00      	nop
 8001118:	3780      	adds	r7, #128	@ 0x80
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40008000 	.word	0x40008000
 8001124:	40021000 	.word	0x40021000
 8001128:	200002c8 	.word	0x200002c8
 800112c:	40020030 	.word	0x40020030
 8001130:	40013800 	.word	0x40013800
 8001134:	48000800 	.word	0x48000800

08001138 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a1b      	ldr	r2, [pc, #108]	@ (80011c4 <HAL_SPI_MspInit+0x8c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d130      	bne.n	80011bc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800115a:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <HAL_SPI_MspInit+0x90>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	4a1a      	ldr	r2, [pc, #104]	@ (80011c8 <HAL_SPI_MspInit+0x90>)
 8001160:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001164:	6593      	str	r3, [r2, #88]	@ 0x58
 8001166:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <HAL_SPI_MspInit+0x90>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <HAL_SPI_MspInit+0x90>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <HAL_SPI_MspInit+0x90>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117e:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_SPI_MspInit+0x90>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800118a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800119c:	2306      	movs	r3, #6
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4809      	ldr	r0, [pc, #36]	@ (80011cc <HAL_SPI_MspInit+0x94>)
 80011a8:	f000 fd58 	bl	8001c5c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2033      	movs	r0, #51	@ 0x33
 80011b2:	f000 faf0 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80011b6:	2033      	movs	r0, #51	@ 0x33
 80011b8:	f000 fb07 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	3728      	adds	r7, #40	@ 0x28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40003c00 	.word	0x40003c00
 80011c8:	40021000 	.word	0x40021000
 80011cc:	48000800 	.word	0x48000800

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <NMI_Handler+0x4>

080011d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <MemManage_Handler+0x4>

080011e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001226:	f000 f99b 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001234:	4802      	ldr	r0, [pc, #8]	@ (8001240 <DMA1_Channel1_IRQHandler+0x10>)
 8001236:	f000 fbf2 	bl	8001a1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200000e0 	.word	0x200000e0

08001244 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <DMA1_Channel2_IRQHandler+0x10>)
 800124a:	f000 fbe8 	bl	8001a1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000140 	.word	0x20000140

08001258 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <DMA1_Channel3_IRQHandler+0x10>)
 800125e:	f000 fbde 	bl	8001a1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200002c8 	.word	0x200002c8

0800126c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <I2C1_EV_IRQHandler+0x10>)
 8001272:	f001 f873 	bl	800235c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000008c 	.word	0x2000008c

08001280 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001284:	4802      	ldr	r0, [pc, #8]	@ (8001290 <I2C1_ER_IRQHandler+0x10>)
 8001286:	f001 f883 	bl	8002390 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000008c 	.word	0x2000008c

08001294 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001298:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800129c:	f000 fe90 	bl	8001fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <SPI3_IRQHandler+0x10>)
 80012aa:	f003 fdbb 	bl	8004e24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000328 	.word	0x20000328

080012b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return 1;
 80012bc:	2301      	movs	r3, #1
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_kill>:

int _kill(int pid, int sig)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012d2:	f005 f83f 	bl	8006354 <__errno>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2216      	movs	r2, #22
 80012da:	601a      	str	r2, [r3, #0]
  return -1;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_exit>:

void _exit (int status)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ffe7 	bl	80012c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012fa:	bf00      	nop
 80012fc:	e7fd      	b.n	80012fa <_exit+0x12>

080012fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	e00a      	b.n	8001326 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001310:	f3af 8000 	nop.w
 8001314:	4601      	mov	r1, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	60ba      	str	r2, [r7, #8]
 800131c:	b2ca      	uxtb	r2, r1
 800131e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	dbf0      	blt.n	8001310 <_read+0x12>
  }

  return len;
 800132e:	687b      	ldr	r3, [r7, #4]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e009      	b.n	800135e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	60ba      	str	r2, [r7, #8]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3301      	adds	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	dbf1      	blt.n	800134a <_write+0x12>
  }
  return len;
 8001366:	687b      	ldr	r3, [r7, #4]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_close>:

int _close(int file)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001398:	605a      	str	r2, [r3, #4]
  return 0;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_isatty>:

int _isatty(int file)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013be:	b480      	push	{r7}
 80013c0:	b085      	sub	sp, #20
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f004 ffa4 	bl	8006354 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	@ (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	@ (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20020000 	.word	0x20020000
 8001438:	00000400 	.word	0x00000400
 800143c:	200003c0 	.word	0x200003c0
 8001440:	20000518 	.word	0x20000518

08001444 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001468:	480d      	ldr	r0, [pc, #52]	@ (80014a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800146a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800146c:	f7ff ffea 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <LoopForever+0xe>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	@ (80014b4 <LoopForever+0x16>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f004 ff63 	bl	8006360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149a:	f7ff f889 	bl	80005b0 <main>

0800149e <LoopForever>:

LoopForever:
    b LoopForever
 800149e:	e7fe      	b.n	800149e <LoopForever>
  ldr   r0, =_estack
 80014a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014ac:	08007134 	.word	0x08007134
  ldr r2, =_sbss
 80014b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014b4:	20000514 	.word	0x20000514

080014b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>

080014ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 f95b 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f80e 	bl	80014ec <HAL_InitTick>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	e001      	b.n	80014e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014dc:	f7ff fc7e 	bl	8000ddc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e0:	79fb      	ldrb	r3, [r7, #7]

}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014f8:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <HAL_InitTick+0x68>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d022      	beq.n	8001546 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_InitTick+0x6c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <HAL_InitTick+0x68>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800150c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f966 	bl	80017e6 <HAL_SYSTICK_Config>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10f      	bne.n	8001540 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b0f      	cmp	r3, #15
 8001524:	d809      	bhi.n	800153a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001526:	2200      	movs	r2, #0
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	f04f 30ff 	mov.w	r0, #4294967295
 800152e:	f000 f932 	bl	8001796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001532:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <HAL_InitTick+0x70>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e007      	b.n	800154a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e004      	b.n	800154a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e001      	b.n	800154a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000010 	.word	0x20000010
 8001558:	20000008 	.word	0x20000008
 800155c:	2000000c 	.word	0x2000000c

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	@ (800157c <HAL_IncTick+0x1c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <HAL_IncTick+0x20>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4413      	add	r3, r2
 800156e:	4a03      	ldr	r2, [pc, #12]	@ (800157c <HAL_IncTick+0x1c>)
 8001570:	6013      	str	r3, [r2, #0]
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	200003c4 	.word	0x200003c4
 8001580:	20000010 	.word	0x20000010

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200003c4 	.word	0x200003c4

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d004      	beq.n	80015c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <HAL_Delay+0x40>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c0:	bf00      	nop
 80015c2:	f7ff ffdf 	bl	8001584 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d8f7      	bhi.n	80015c2 <HAL_Delay+0x26>
  {
  }
}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000010 	.word	0x20000010

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	@ (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	@ (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	@ (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	@ 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	@ 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff8e 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	@ (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff29 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff40 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff90 	bl	80016d4 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5f 	bl	8001680 <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff33 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa4 	bl	800173c <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e08d      	b.n	800192e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4b47      	ldr	r3, [pc, #284]	@ (8001938 <HAL_DMA_Init+0x138>)
 800181a:	429a      	cmp	r2, r3
 800181c:	d80f      	bhi.n	800183e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b45      	ldr	r3, [pc, #276]	@ (800193c <HAL_DMA_Init+0x13c>)
 8001826:	4413      	add	r3, r2
 8001828:	4a45      	ldr	r2, [pc, #276]	@ (8001940 <HAL_DMA_Init+0x140>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	009a      	lsls	r2, r3, #2
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a42      	ldr	r2, [pc, #264]	@ (8001944 <HAL_DMA_Init+0x144>)
 800183a:	641a      	str	r2, [r3, #64]	@ 0x40
 800183c:	e00e      	b.n	800185c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	4b40      	ldr	r3, [pc, #256]	@ (8001948 <HAL_DMA_Init+0x148>)
 8001846:	4413      	add	r3, r2
 8001848:	4a3d      	ldr	r2, [pc, #244]	@ (8001940 <HAL_DMA_Init+0x140>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	009a      	lsls	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a3c      	ldr	r2, [pc, #240]	@ (800194c <HAL_DMA_Init+0x14c>)
 800185a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001876:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f972 	bl	8001b98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018bc:	d102      	bne.n	80018c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d010      	beq.n	8001904 <HAL_DMA_Init+0x104>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d80c      	bhi.n	8001904 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f992 	bl	8001c14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	e008      	b.n	8001916 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40020407 	.word	0x40020407
 800193c:	bffdfff8 	.word	0xbffdfff8
 8001940:	cccccccd 	.word	0xcccccccd
 8001944:	40020000 	.word	0x40020000
 8001948:	bffdfbf8 	.word	0xbffdfbf8
 800194c:	40020400 	.word	0x40020400

08001950 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d00d      	beq.n	8001984 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2204      	movs	r2, #4
 800196c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	e047      	b.n	8001a14 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 020e 	bic.w	r2, r2, #14
 8001992:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	2101      	movs	r1, #1
 80019c2:	fa01 f202 	lsl.w	r2, r1, r2
 80019c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00c      	beq.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4798      	blx	r3
    }
  }
  return status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	2204      	movs	r2, #4
 8001a40:	409a      	lsls	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d026      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x7a>
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d021      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d107      	bne.n	8001a72 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0204 	bic.w	r2, r2, #4
 8001a70:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	f003 021f 	and.w	r2, r3, #31
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	2104      	movs	r1, #4
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d071      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a96:	e06c      	b.n	8001b72 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d02e      	beq.n	8001b0a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d029      	beq.n	8001b0a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10b      	bne.n	8001adc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 020a 	bic.w	r2, r2, #10
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	2102      	movs	r1, #2
 8001aea:	fa01 f202 	lsl.w	r2, r1, r2
 8001aee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d038      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b08:	e033      	b.n	8001b72 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2208      	movs	r2, #8
 8001b14:	409a      	lsls	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d02a      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d025      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 020e 	bic.w	r2, r2, #14
 8001b36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
}
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b8a:	b2db      	uxtb	r3, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b16      	ldr	r3, [pc, #88]	@ (8001c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d802      	bhi.n	8001bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001bac:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	e001      	b.n	8001bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bb4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	3b08      	subs	r3, #8
 8001bc2:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	009a      	lsls	r2, r3, #2
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	@ (8001c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001be2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2201      	movs	r2, #1
 8001bec:	409a      	lsls	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40020407 	.word	0x40020407
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020820 	.word	0x40020820
 8001c0c:	cccccccd 	.word	0xcccccccd
 8001c10:	40020880 	.word	0x40020880

08001c14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a08      	ldr	r2, [pc, #32]	@ (8001c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c36:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	2201      	movs	r2, #1
 8001c42:	409a      	lsls	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	1000823f 	.word	0x1000823f
 8001c58:	40020940 	.word	0x40020940

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c6a:	e15a      	b.n	8001f22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2101      	movs	r1, #1
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 814c 	beq.w	8001f1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d005      	beq.n	8001c9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d130      	bne.n	8001cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	f003 0201 	and.w	r2, r3, #1
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d017      	beq.n	8001d3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d123      	bne.n	8001d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	08da      	lsrs	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3208      	adds	r2, #8
 8001d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	6939      	ldr	r1, [r7, #16]
 8001d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0203 	and.w	r2, r3, #3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80a6 	beq.w	8001f1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd4:	4a5a      	ldr	r2, [pc, #360]	@ (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ddc:	4b58      	ldr	r3, [pc, #352]	@ (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de8:	4a56      	ldr	r2, [pc, #344]	@ (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e12:	d01f      	beq.n	8001e54 <HAL_GPIO_Init+0x1f8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a4c      	ldr	r2, [pc, #304]	@ (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d019      	beq.n	8001e50 <HAL_GPIO_Init+0x1f4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a4b      	ldr	r2, [pc, #300]	@ (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d013      	beq.n	8001e4c <HAL_GPIO_Init+0x1f0>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a4a      	ldr	r2, [pc, #296]	@ (8001f50 <HAL_GPIO_Init+0x2f4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00d      	beq.n	8001e48 <HAL_GPIO_Init+0x1ec>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a49      	ldr	r2, [pc, #292]	@ (8001f54 <HAL_GPIO_Init+0x2f8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d007      	beq.n	8001e44 <HAL_GPIO_Init+0x1e8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a48      	ldr	r2, [pc, #288]	@ (8001f58 <HAL_GPIO_Init+0x2fc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <HAL_GPIO_Init+0x1e4>
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	e00a      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e40:	2306      	movs	r3, #6
 8001e42:	e008      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e44:	2304      	movs	r3, #4
 8001e46:	e006      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e004      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e002      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e54:	2300      	movs	r3, #0
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	f002 0203 	and.w	r2, r2, #3
 8001e5c:	0092      	lsls	r2, r2, #2
 8001e5e:	4093      	lsls	r3, r2
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e66:	4937      	ldr	r1, [pc, #220]	@ (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e74:	4b39      	ldr	r3, [pc, #228]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e98:	4a30      	ldr	r2, [pc, #192]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ec2:	4a26      	ldr	r2, [pc, #152]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ec8:	4b24      	ldr	r3, [pc, #144]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eec:	4a1b      	ldr	r2, [pc, #108]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f16:	4a11      	ldr	r2, [pc, #68]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f47f ae9d 	bne.w	8001c6c <HAL_GPIO_Init+0x10>
  }
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40010000 	.word	0x40010000
 8001f48:	48000400 	.word	0x48000400
 8001f4c:	48000800 	.word	0x48000800
 8001f50:	48000c00 	.word	0x48000c00
 8001f54:	48001000 	.word	0x48001000
 8001f58:	48001400 	.word	0x48001400
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	e001      	b.n	8001f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fac:	e002      	b.n	8001fb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fca:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fd6:	4a05      	ldr	r2, [pc, #20]	@ (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f806 	bl	8001ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e08d      	b.n	8002134 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d106      	bne.n	8002032 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7fe fef9 	bl	8000e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2224      	movs	r2, #36	@ 0x24
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0201 	bic.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002056:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002066:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	e006      	b.n	800208e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800208c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d108      	bne.n	80020a8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	e007      	b.n	80020b8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69d9      	ldr	r1, [r3, #28]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1a      	ldr	r2, [r3, #32]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af02      	add	r7, sp, #8
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	4608      	mov	r0, r1
 8002146:	4611      	mov	r1, r2
 8002148:	461a      	mov	r2, r3
 800214a:	4603      	mov	r3, r0
 800214c:	817b      	strh	r3, [r7, #10]
 800214e:	460b      	mov	r3, r1
 8002150:	813b      	strh	r3, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b20      	cmp	r3, #32
 8002160:	d16a      	bne.n	8002238 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_I2C_Mem_Write_IT+0x32>
 8002168:	8bbb      	ldrh	r3, [r7, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002174:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e05f      	b.n	800223a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002188:	d101      	bne.n	800218e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800218a:	2302      	movs	r3, #2
 800218c:	e055      	b.n	800223a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_I2C_Mem_Write_IT+0x60>
 8002198:	2302      	movs	r3, #2
 800219a:	e04e      	b.n	800223a <HAL_I2C_Mem_Write_IT+0xfe>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2221      	movs	r2, #33	@ 0x21
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2240      	movs	r2, #64	@ 0x40
 80021b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8bba      	ldrh	r2, [r7, #28]
 80021ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002244 <HAL_I2C_Mem_Write_IT+0x108>)
 80021d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002248 <HAL_I2C_Mem_Write_IT+0x10c>)
 80021d6:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80021d8:	897a      	ldrh	r2, [r7, #10]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d109      	bne.n	80021f8 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021e4:	893b      	ldrh	r3, [r7, #8]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295
 80021f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80021f6:	e00b      	b.n	8002210 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021f8:	893b      	ldrh	r3, [r7, #8]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002206:	893b      	ldrh	r3, [r7, #8]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	8979      	ldrh	r1, [r7, #10]
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <HAL_I2C_Mem_Write_IT+0x110>)
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f001 fb78 	bl	8003914 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800222c:	2101      	movs	r1, #1
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f001 fba2 	bl	8003978 <I2C_Enable_IRQ>

    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
  }
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	ffff0000 	.word	0xffff0000
 8002248:	08002519 	.word	0x08002519
 800224c:	80002000 	.word	0x80002000

08002250 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af02      	add	r7, sp, #8
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	4608      	mov	r0, r1
 800225a:	4611      	mov	r1, r2
 800225c:	461a      	mov	r2, r3
 800225e:	4603      	mov	r3, r0
 8002260:	817b      	strh	r3, [r7, #10]
 8002262:	460b      	mov	r3, r1
 8002264:	813b      	strh	r3, [r7, #8]
 8002266:	4613      	mov	r3, r2
 8002268:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b20      	cmp	r3, #32
 8002274:	d166      	bne.n	8002344 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_I2C_Mem_Read_IT+0x32>
 800227c:	8bbb      	ldrh	r3, [r7, #28]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002288:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e05b      	b.n	8002346 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800229c:	d101      	bne.n	80022a2 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800229e:	2302      	movs	r3, #2
 80022a0:	e051      	b.n	8002346 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_I2C_Mem_Read_IT+0x60>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e04a      	b.n	8002346 <HAL_I2C_Mem_Read_IT+0xf6>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2222      	movs	r2, #34	@ 0x22
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2240      	movs	r2, #64	@ 0x40
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8bba      	ldrh	r2, [r7, #28]
 80022d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002350 <HAL_I2C_Mem_Read_IT+0x100>)
 80022de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002354 <HAL_I2C_Mem_Read_IT+0x104>)
 80022e4:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80022e6:	897a      	ldrh	r2, [r7, #10]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d109      	bne.n	8002306 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022f2:	893b      	ldrh	r3, [r7, #8]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002302:	651a      	str	r2, [r3, #80]	@ 0x50
 8002304:	e00b      	b.n	800231e <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002306:	893b      	ldrh	r3, [r7, #8]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	b29b      	uxth	r3, r3
 800230c:	b2da      	uxtb	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002314:	893b      	ldrh	r3, [r7, #8]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	8979      	ldrh	r1, [r7, #10]
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <HAL_I2C_Mem_Read_IT+0x108>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2300      	movs	r3, #0
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f001 faf2 	bl	8003914 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002338:	2101      	movs	r1, #1
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f001 fb1c 	bl	8003978 <I2C_Enable_IRQ>

    return HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	e000      	b.n	8002346 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002344:	2302      	movs	r3, #2
  }
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	ffff0000 	.word	0xffff0000
 8002354:	08002519 	.word	0x08002519
 8002358:	80002000 	.word	0x80002000

0800235c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
  }
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00f      	beq.n	80023d2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00f      	beq.n	80023fc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	f043 0208 	orr.w	r2, r3, #8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00f      	beq.n	8002426 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002414:	f043 0202 	orr.w	r2, r3, #2
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002424:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 030b 	and.w	r3, r3, #11
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002436:	68f9      	ldr	r1, [r7, #12]
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f001 f911 	bl	8003660 <I2C_ITError>
  }
}
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	70fb      	strb	r3, [r7, #3]
 80024a2:	4613      	mov	r3, r2
 80024a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002524:	4b8d      	ldr	r3, [pc, #564]	@ (800275c <I2C_Mem_ISR_IT+0x244>)
 8002526:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <I2C_Mem_ISR_IT+0x22>
 8002536:	2302      	movs	r3, #2
 8002538:	e10c      	b.n	8002754 <I2C_Mem_ISR_IT+0x23c>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	d012      	beq.n	8002572 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00d      	beq.n	8002572 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2210      	movs	r2, #16
 800255c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	f043 0204 	orr.w	r2, r3, #4
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f001 f98f 	bl	800388e <I2C_Flush_TXDR>
 8002570:	e0dd      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d022      	beq.n	80025c2 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002582:	2b00      	cmp	r3, #0
 8002584:	d01d      	beq.n	80025c2 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f023 0304 	bic.w	r3, r3, #4
 800258c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025c0:	e0b5      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d02c      	beq.n	8002626 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d027      	beq.n	8002626 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025de:	d118      	bne.n	8002612 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002610:	e08d      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800261a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f04f 32ff 	mov.w	r2, #4294967295
 8002622:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002624:	e083      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262c:	2b00      	cmp	r3, #0
 800262e:	d03c      	beq.n	80026aa <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002636:	2b00      	cmp	r3, #0
 8002638:	d037      	beq.n	80026aa <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d02c      	beq.n	800269e <I2C_Mem_ISR_IT+0x186>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	d128      	bne.n	800269e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	2bff      	cmp	r3, #255	@ 0xff
 8002654:	d910      	bls.n	8002678 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	22ff      	movs	r2, #255	@ 0xff
 800265a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002660:	b299      	uxth	r1, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002666:	b2da      	uxtb	r2, r3
 8002668:	2300      	movs	r3, #0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f001 f94f 	bl	8003914 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002676:	e017      	b.n	80026a8 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002686:	b299      	uxth	r1, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268c:	b2da      	uxtb	r2, r3
 800268e:	2300      	movs	r3, #0
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f001 f93c 	bl	8003914 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800269c:	e004      	b.n	80026a8 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800269e:	2140      	movs	r1, #64	@ 0x40
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 ffdd 	bl	8003660 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026a6:	e042      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
 80026a8:	e041      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d03c      	beq.n	800272e <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d037      	beq.n	800272e <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026be:	2101      	movs	r1, #1
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f001 f9dd 	bl	8003a80 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80026c6:	2102      	movs	r1, #2
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f001 f955 	bl	8003978 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b22      	cmp	r3, #34	@ 0x22
 80026d8:	d101      	bne.n	80026de <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80026da:	4b21      	ldr	r3, [pc, #132]	@ (8002760 <I2C_Mem_ISR_IT+0x248>)
 80026dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2bff      	cmp	r3, #255	@ 0xff
 80026e6:	d910      	bls.n	800270a <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	22ff      	movs	r2, #255	@ 0xff
 80026ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f2:	b299      	uxth	r1, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f001 f906 	bl	8003914 <I2C_TransferConfig>
 8002708:	e011      	b.n	800272e <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002718:	b299      	uxth	r1, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271e:	b2da      	uxtb	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f001 f8f3 	bl	8003914 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002742:	6939      	ldr	r1, [r7, #16]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 fd0b 	bl	8003160 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	80002000 	.word	0x80002000
 8002760:	80002400 	.word	0x80002400

08002764 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <I2C_Slave_ISR_IT+0x24>
 8002784:	2302      	movs	r3, #2
 8002786:	e0e2      	b.n	800294e <I2C_Slave_ISR_IT+0x1ea>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80027a4:	6939      	ldr	r1, [r7, #16]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fda2 	bl	80032f0 <I2C_ITSlaveCplt>
 80027ac:	e0ca      	b.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d04b      	beq.n	8002850 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d046      	beq.n	8002850 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d128      	bne.n	800281e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b28      	cmp	r3, #40	@ 0x28
 80027d6:	d108      	bne.n	80027ea <I2C_Slave_ISR_IT+0x86>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027de:	d104      	bne.n	80027ea <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80027e0:	6939      	ldr	r1, [r7, #16]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fee8 	bl	80035b8 <I2C_ITListenCplt>
 80027e8:	e031      	b.n	800284e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b29      	cmp	r3, #41	@ 0x29
 80027f4:	d10e      	bne.n	8002814 <I2C_Slave_ISR_IT+0xb0>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027fc:	d00a      	beq.n	8002814 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2210      	movs	r2, #16
 8002804:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f001 f841 	bl	800388e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fc4b 	bl	80030a8 <I2C_ITSlaveSeqCplt>
 8002812:	e01c      	b.n	800284e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2210      	movs	r2, #16
 800281a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800281c:	e08f      	b.n	800293e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2210      	movs	r2, #16
 8002824:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f043 0204 	orr.w	r2, r3, #4
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <I2C_Slave_ISR_IT+0xdc>
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800283e:	d17e      	bne.n	800293e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002844:	4619      	mov	r1, r3
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 ff0a 	bl	8003660 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800284c:	e077      	b.n	800293e <I2C_Slave_ISR_IT+0x1da>
 800284e:	e076      	b.n	800293e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d02f      	beq.n	80028ba <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002860:	2b00      	cmp	r3, #0
 8002862:	d02a      	beq.n	80028ba <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d018      	beq.n	80028a0 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d14b      	bne.n	8002942 <I2C_Slave_ISR_IT+0x1de>
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028b0:	d047      	beq.n	8002942 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fbf8 	bl	80030a8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80028b8:	e043      	b.n	8002942 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d009      	beq.n	80028d8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d004      	beq.n	80028d8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80028ce:	6939      	ldr	r1, [r7, #16]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fb28 	bl	8002f26 <I2C_ITAddrCplt>
 80028d6:	e035      	b.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d030      	beq.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02b      	beq.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d018      	beq.n	8002928 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	781a      	ldrb	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002926:	e00d      	b.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800292e:	d002      	beq.n	8002936 <I2C_Slave_ISR_IT+0x1d2>
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fbb6 	bl	80030a8 <I2C_ITSlaveSeqCplt>
 800293c:	e002      	b.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002942:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b088      	sub	sp, #32
 800295a:	af02      	add	r7, sp, #8
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <I2C_Master_ISR_DMA+0x1a>
 800296c:	2302      	movs	r3, #2
 800296e:	e0d9      	b.n	8002b24 <I2C_Master_ISR_DMA+0x1ce>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b00      	cmp	r3, #0
 8002980:	d016      	beq.n	80029b0 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002988:	2b00      	cmp	r3, #0
 800298a:	d011      	beq.n	80029b0 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2210      	movs	r2, #16
 8002992:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002998:	f043 0204 	orr.w	r2, r3, #4
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80029a0:	2120      	movs	r1, #32
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 ffe8 	bl	8003978 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 ff70 	bl	800388e <I2C_Flush_TXDR>
 80029ae:	e0b4      	b.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d071      	beq.n	8002a9e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d06c      	beq.n	8002a9e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029d2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d04e      	beq.n	8002a7c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ea:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2bff      	cmp	r3, #255	@ 0xff
 80029f4:	d906      	bls.n	8002a04 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	22ff      	movs	r2, #255	@ 0xff
 80029fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80029fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e010      	b.n	8002a26 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a16:	d003      	beq.n	8002a20 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e002      	b.n	8002a26 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002a20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a24:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	8a79      	ldrh	r1, [r7, #18]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 ff6d 	bl	8003914 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b22      	cmp	r3, #34	@ 0x22
 8002a56:	d108      	bne.n	8002a6a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a66:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a68:	e057      	b.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a78:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a7a:	e04e      	b.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a8a:	d003      	beq.n	8002a94 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 face 	bl	800302e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002a92:	e042      	b.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a94:	2140      	movs	r1, #64	@ 0x40
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fde2 	bl	8003660 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002a9c:	e03d      	b.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d028      	beq.n	8002afa <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d023      	beq.n	8002afa <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d119      	bne.n	8002af0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002aca:	d025      	beq.n	8002b18 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ad4:	d108      	bne.n	8002ae8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ae4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002ae6:	e017      	b.n	8002b18 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 faa0 	bl	800302e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002aee:	e013      	b.n	8002b18 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002af0:	2140      	movs	r1, #64	@ 0x40
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fdb4 	bl	8003660 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002af8:	e00e      	b.n	8002b18 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fb25 	bl	8003160 <I2C_ITMasterCplt>
 8002b16:	e000      	b.n	8002b1a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002b18:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002b38:	4b8d      	ldr	r3, [pc, #564]	@ (8002d70 <I2C_Mem_ISR_DMA+0x244>)
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <I2C_Mem_ISR_DMA+0x1e>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e10e      	b.n	8002d68 <I2C_Mem_ISR_DMA+0x23c>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d016      	beq.n	8002b8a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d011      	beq.n	8002b8a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f043 0204 	orr.w	r2, r3, #4
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002b7a:	2120      	movs	r1, #32
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fefb 	bl	8003978 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fe83 	bl	800388e <I2C_Flush_TXDR>
 8002b88:	e0e9      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00e      	beq.n	8002bb2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ba6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f04f 32ff 	mov.w	r2, #4294967295
 8002bae:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bb0:	e0d5      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05f      	beq.n	8002c7c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d05a      	beq.n	8002c7c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 ff59 	bl	8003a80 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002bce:	2110      	movs	r1, #16
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fed1 	bl	8003978 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d048      	beq.n	8002c72 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2bff      	cmp	r3, #255	@ 0xff
 8002be8:	d910      	bls.n	8002c0c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	22ff      	movs	r2, #255	@ 0xff
 8002bee:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf4:	b299      	uxth	r1, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fe85 	bl	8003914 <I2C_TransferConfig>
 8002c0a:	e011      	b.n	8002c30 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1a:	b299      	uxth	r1, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	2300      	movs	r3, #0
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 fe72 	bl	8003914 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b22      	cmp	r3, #34	@ 0x22
 8002c4c:	d108      	bne.n	8002c60 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c5c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c5e:	e07e      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c6e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c70:	e075      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c72:	2140      	movs	r1, #64	@ 0x40
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fcf3 	bl	8003660 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002c7a:	e070      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d05d      	beq.n	8002d42 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d058      	beq.n	8002d42 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c90:	2101      	movs	r1, #1
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fef4 	bl	8003a80 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002c98:	2110      	movs	r1, #16
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fe6c 	bl	8003978 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b22      	cmp	r3, #34	@ 0x22
 8002caa:	d101      	bne.n	8002cb0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002cac:	4b31      	ldr	r3, [pc, #196]	@ (8002d74 <I2C_Mem_ISR_DMA+0x248>)
 8002cae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2bff      	cmp	r3, #255	@ 0xff
 8002cb8:	d910      	bls.n	8002cdc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	22ff      	movs	r2, #255	@ 0xff
 8002cbe:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc4:	b299      	uxth	r1, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fe1d 	bl	8003914 <I2C_TransferConfig>
 8002cda:	e011      	b.n	8002d00 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cea:	b299      	uxth	r1, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fe0a 	bl	8003914 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b22      	cmp	r3, #34	@ 0x22
 8002d1c:	d108      	bne.n	8002d30 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d2c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d2e:	e016      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d3e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d40:	e00d      	b.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fa01 	bl	8003160 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	80002000 	.word	0x80002000
 8002d74:	80002400 	.word	0x80002400

08002d78 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <I2C_Slave_ISR_DMA+0x24>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e0c0      	b.n	8002f1e <I2C_Slave_ISR_DMA+0x1a6>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fa98 	bl	80032f0 <I2C_ITSlaveCplt>
 8002dc0:	e0a8      	b.n	8002f14 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8095 	beq.w	8002ef8 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 808f 	beq.w	8002ef8 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d104      	bne.n	8002dee <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d07d      	beq.n	8002eea <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00c      	beq.n	8002e32 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d128      	bne.n	8002e8a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b28      	cmp	r3, #40	@ 0x28
 8002e42:	d108      	bne.n	8002e56 <I2C_Slave_ISR_DMA+0xde>
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e4a:	d104      	bne.n	8002e56 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fbb2 	bl	80035b8 <I2C_ITListenCplt>
 8002e54:	e048      	b.n	8002ee8 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b29      	cmp	r3, #41	@ 0x29
 8002e60:	d10e      	bne.n	8002e80 <I2C_Slave_ISR_DMA+0x108>
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e68:	d00a      	beq.n	8002e80 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2210      	movs	r2, #16
 8002e70:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fd0b 	bl	800388e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f915 	bl	80030a8 <I2C_ITSlaveSeqCplt>
 8002e7e:	e033      	b.n	8002ee8 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2210      	movs	r2, #16
 8002e86:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002e88:	e034      	b.n	8002ef4 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2210      	movs	r2, #16
 8002e90:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e96:	f043 0204 	orr.w	r2, r3, #4
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <I2C_Slave_ISR_DMA+0x13c>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eb2:	d11f      	bne.n	8002ef4 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	2b21      	cmp	r3, #33	@ 0x21
 8002eb8:	d002      	beq.n	8002ec0 <I2C_Slave_ISR_DMA+0x148>
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	2b29      	cmp	r3, #41	@ 0x29
 8002ebe:	d103      	bne.n	8002ec8 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2221      	movs	r2, #33	@ 0x21
 8002ec4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ec6:	e008      	b.n	8002eda <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b22      	cmp	r3, #34	@ 0x22
 8002ecc:	d002      	beq.n	8002ed4 <I2C_Slave_ISR_DMA+0x15c>
 8002ece:	7dfb      	ldrb	r3, [r7, #23]
 8002ed0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ed2:	d102      	bne.n	8002eda <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2222      	movs	r2, #34	@ 0x22
 8002ed8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fbbd 	bl	8003660 <I2C_ITError>
      if (treatdmanack == 1U)
 8002ee6:	e005      	b.n	8002ef4 <I2C_Slave_ISR_DMA+0x17c>
 8002ee8:	e004      	b.n	8002ef4 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2210      	movs	r2, #16
 8002ef0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ef2:	e00f      	b.n	8002f14 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002ef4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ef6:	e00d      	b.n	8002f14 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f809 	bl	8002f26 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f3c:	2b28      	cmp	r3, #40	@ 0x28
 8002f3e:	d16a      	bne.n	8003016 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	0c1b      	lsrs	r3, r3, #16
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002f5e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f6c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002f7a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d138      	bne.n	8002ff6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002f84:	897b      	ldrh	r3, [r7, #10]
 8002f86:	09db      	lsrs	r3, r3, #7
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	89bb      	ldrh	r3, [r7, #12]
 8002f8c:	4053      	eors	r3, r2
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f003 0306 	and.w	r3, r3, #6
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d11c      	bne.n	8002fd2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002f98:	897b      	ldrh	r3, [r7, #10]
 8002f9a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d13b      	bne.n	8003026 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2208      	movs	r2, #8
 8002fba:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fc4:	89ba      	ldrh	r2, [r7, #12]
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff fa63 	bl	8002496 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fd0:	e029      	b.n	8003026 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002fd2:	893b      	ldrh	r3, [r7, #8]
 8002fd4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002fd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fd50 	bl	8003a80 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fe8:	89ba      	ldrh	r2, [r7, #12]
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	4619      	mov	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff fa51 	bl	8002496 <HAL_I2C_AddrCallback>
}
 8002ff4:	e017      	b.n	8003026 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ff6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fd40 	bl	8003a80 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003008:	89ba      	ldrh	r2, [r7, #12]
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff fa41 	bl	8002496 <HAL_I2C_AddrCallback>
}
 8003014:	e007      	b.n	8003026 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2208      	movs	r2, #8
 800301c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b21      	cmp	r3, #33	@ 0x21
 8003048:	d115      	bne.n	8003076 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2211      	movs	r2, #17
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800305e:	2101      	movs	r1, #1
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fd0d 	bl	8003a80 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff f9e9 	bl	8002446 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003074:	e014      	b.n	80030a0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2212      	movs	r2, #18
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800308a:	2102      	movs	r1, #2
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fcf7 	bl	8003a80 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff f9dd 	bl	800245a <HAL_I2C_MasterRxCpltCallback>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	e00c      	b.n	80030f6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030f4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b29      	cmp	r3, #41	@ 0x29
 8003100:	d112      	bne.n	8003128 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2228      	movs	r2, #40	@ 0x28
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2221      	movs	r2, #33	@ 0x21
 800310e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003110:	2101      	movs	r1, #1
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fcb4 	bl	8003a80 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff f9a4 	bl	800246e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003126:	e017      	b.n	8003158 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b2a      	cmp	r3, #42	@ 0x2a
 8003132:	d111      	bne.n	8003158 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2228      	movs	r2, #40	@ 0x28
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2222      	movs	r2, #34	@ 0x22
 8003140:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003142:	2102      	movs	r1, #2
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fc9b 	bl	8003a80 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff f995 	bl	8002482 <HAL_I2C_SlaveRxCpltCallback>
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2220      	movs	r2, #32
 8003174:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b21      	cmp	r3, #33	@ 0x21
 8003180:	d107      	bne.n	8003192 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003182:	2101      	movs	r1, #1
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fc7b 	bl	8003a80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2211      	movs	r2, #17
 800318e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003190:	e00c      	b.n	80031ac <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b22      	cmp	r3, #34	@ 0x22
 800319c:	d106      	bne.n	80031ac <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800319e:	2102      	movs	r1, #2
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fc6d 	bl	8003a80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2212      	movs	r2, #18
 80031aa:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b4c      	ldr	r3, [pc, #304]	@ (80032e8 <I2C_ITMasterCplt+0x188>)
 80031b8:	400b      	ands	r3, r1
 80031ba:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a49      	ldr	r2, [pc, #292]	@ (80032ec <I2C_ITMasterCplt+0x18c>)
 80031c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2210      	movs	r2, #16
 80031d8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	f043 0204 	orr.w	r2, r3, #4
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b60      	cmp	r3, #96	@ 0x60
 80031f0:	d10a      	bne.n	8003208 <I2C_ITMasterCplt+0xa8>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	b2db      	uxtb	r3, r3
 8003204:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003206:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fb40 	bl	800388e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b60      	cmp	r3, #96	@ 0x60
 800321e:	d002      	beq.n	8003226 <I2C_ITMasterCplt+0xc6>
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fa17 	bl	8003660 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003232:	e054      	b.n	80032de <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b21      	cmp	r3, #33	@ 0x21
 800323e:	d124      	bne.n	800328a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b40      	cmp	r3, #64	@ 0x40
 8003258:	d10b      	bne.n	8003272 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff f92b 	bl	80024c6 <HAL_I2C_MemTxCpltCallback>
}
 8003270:	e035      	b.n	80032de <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff f8df 	bl	8002446 <HAL_I2C_MasterTxCpltCallback>
}
 8003288:	e029      	b.n	80032de <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b22      	cmp	r3, #34	@ 0x22
 8003294:	d123      	bne.n	80032de <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	d10b      	bne.n	80032c8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff f90a 	bl	80024da <HAL_I2C_MemRxCpltCallback>
}
 80032c6:	e00a      	b.n	80032de <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff f8be 	bl	800245a <HAL_I2C_MasterRxCpltCallback>
}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	fe00e800 	.word	0xfe00e800
 80032ec:	ffff0000 	.word	0xffff0000

080032f0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003312:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2220      	movs	r2, #32
 800331a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800331c:	7afb      	ldrb	r3, [r7, #11]
 800331e:	2b21      	cmp	r3, #33	@ 0x21
 8003320:	d002      	beq.n	8003328 <I2C_ITSlaveCplt+0x38>
 8003322:	7afb      	ldrb	r3, [r7, #11]
 8003324:	2b29      	cmp	r3, #41	@ 0x29
 8003326:	d108      	bne.n	800333a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003328:	f248 0101 	movw	r1, #32769	@ 0x8001
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fba7 	bl	8003a80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2221      	movs	r2, #33	@ 0x21
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30
 8003338:	e019      	b.n	800336e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800333a:	7afb      	ldrb	r3, [r7, #11]
 800333c:	2b22      	cmp	r3, #34	@ 0x22
 800333e:	d002      	beq.n	8003346 <I2C_ITSlaveCplt+0x56>
 8003340:	7afb      	ldrb	r3, [r7, #11]
 8003342:	2b2a      	cmp	r3, #42	@ 0x2a
 8003344:	d108      	bne.n	8003358 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003346:	f248 0102 	movw	r1, #32770	@ 0x8002
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fb98 	bl	8003a80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2222      	movs	r2, #34	@ 0x22
 8003354:	631a      	str	r2, [r3, #48]	@ 0x30
 8003356:	e00a      	b.n	800336e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003358:	7afb      	ldrb	r3, [r7, #11]
 800335a:	2b28      	cmp	r3, #40	@ 0x28
 800335c:	d107      	bne.n	800336e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800335e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fb8c 	bl	8003a80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800337c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b89      	ldr	r3, [pc, #548]	@ (80035b0 <I2C_ITSlaveCplt+0x2c0>)
 800338a:	400b      	ands	r3, r1
 800338c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fa7d 	bl	800388e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d013      	beq.n	80033c6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033ac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01f      	beq.n	80033f6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033c4:	e017      	b.n	80033f6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033de:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d006      	beq.n	80033f6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f023 0304 	bic.w	r3, r3, #4
 8003406:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00c      	beq.n	8003442 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003450:	f043 0204 	orr.w	r2, r3, #4
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b00      	cmp	r3, #0
 8003460:	d049      	beq.n	80034f6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003468:	2b00      	cmp	r3, #0
 800346a:	d044      	beq.n	80034f6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d128      	bne.n	80034c8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b28      	cmp	r3, #40	@ 0x28
 8003480:	d108      	bne.n	8003494 <I2C_ITSlaveCplt+0x1a4>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003488:	d104      	bne.n	8003494 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800348a:	6979      	ldr	r1, [r7, #20]
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f893 	bl	80035b8 <I2C_ITListenCplt>
 8003492:	e030      	b.n	80034f6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b29      	cmp	r3, #41	@ 0x29
 800349e:	d10e      	bne.n	80034be <I2C_ITSlaveCplt+0x1ce>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034a6:	d00a      	beq.n	80034be <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2210      	movs	r2, #16
 80034ae:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f9ec 	bl	800388e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff fdf6 	bl	80030a8 <I2C_ITSlaveSeqCplt>
 80034bc:	e01b      	b.n	80034f6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2210      	movs	r2, #16
 80034c4:	61da      	str	r2, [r3, #28]
 80034c6:	e016      	b.n	80034f6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2210      	movs	r2, #16
 80034ce:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <I2C_ITSlaveCplt+0x1fa>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034e8:	d105      	bne.n	80034f6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f8b5 	bl	8003660 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f8a4 	bl	8003660 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b28      	cmp	r3, #40	@ 0x28
 8003522:	d141      	bne.n	80035a8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003524:	6979      	ldr	r1, [r7, #20]
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f846 	bl	80035b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800352c:	e03c      	b.n	80035a8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003532:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003536:	d014      	beq.n	8003562 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff fdb5 	bl	80030a8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a1c      	ldr	r2, [pc, #112]	@ (80035b4 <I2C_ITSlaveCplt+0x2c4>)
 8003542:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe ffa9 	bl	80024b2 <HAL_I2C_ListenCpltCallback>
}
 8003560:	e022      	b.n	80035a8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b22      	cmp	r3, #34	@ 0x22
 800356c:	d10e      	bne.n	800358c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fe ff7c 	bl	8002482 <HAL_I2C_SlaveRxCpltCallback>
}
 800358a:	e00d      	b.n	80035a8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fe ff63 	bl	800246e <HAL_I2C_SlaveTxCpltCallback>
}
 80035a8:	bf00      	nop
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	fe00e800 	.word	0xfe00e800
 80035b4:	ffff0000 	.word	0xffff0000

080035b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a25      	ldr	r2, [pc, #148]	@ (800365c <I2C_ITListenCplt+0xa4>)
 80035c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d022      	beq.n	8003634 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360a:	2b00      	cmp	r3, #0
 800360c:	d012      	beq.n	8003634 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362c:	f043 0204 	orr.w	r2, r3, #4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003634:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fa21 	bl	8003a80 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2210      	movs	r2, #16
 8003644:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe ff2f 	bl	80024b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	ffff0000 	.word	0xffff0000

08003660 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003670:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a6d      	ldr	r2, [pc, #436]	@ (8003834 <I2C_ITError+0x1d4>)
 800367e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	2b28      	cmp	r3, #40	@ 0x28
 8003696:	d005      	beq.n	80036a4 <I2C_ITError+0x44>
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	2b29      	cmp	r3, #41	@ 0x29
 800369c:	d002      	beq.n	80036a4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80036a2:	d10b      	bne.n	80036bc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036a4:	2103      	movs	r1, #3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f9ea 	bl	8003a80 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2228      	movs	r2, #40	@ 0x28
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a60      	ldr	r2, [pc, #384]	@ (8003838 <I2C_ITError+0x1d8>)
 80036b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80036ba:	e030      	b.n	800371e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036bc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f9dd 	bl	8003a80 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f8e1 	bl	800388e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b60      	cmp	r3, #96	@ 0x60
 80036d6:	d01f      	beq.n	8003718 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d114      	bne.n	8003718 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d109      	bne.n	8003710 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2210      	movs	r2, #16
 8003702:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003708:	f043 0204 	orr.w	r2, r3, #4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2220      	movs	r2, #32
 8003716:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003728:	2b00      	cmp	r3, #0
 800372a:	d039      	beq.n	80037a0 <I2C_ITError+0x140>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b11      	cmp	r3, #17
 8003730:	d002      	beq.n	8003738 <I2C_ITError+0xd8>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b21      	cmp	r3, #33	@ 0x21
 8003736:	d133      	bne.n	80037a0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003742:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003746:	d107      	bne.n	8003758 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003756:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe fa0d 	bl	8001b7c <HAL_DMA_GetState>
 8003762:	4603      	mov	r3, r0
 8003764:	2b01      	cmp	r3, #1
 8003766:	d017      	beq.n	8003798 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376c:	4a33      	ldr	r2, [pc, #204]	@ (800383c <I2C_ITError+0x1dc>)
 800376e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe f8e7 	bl	8001950 <HAL_DMA_Abort_IT>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d04d      	beq.n	8003824 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003792:	4610      	mov	r0, r2
 8003794:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003796:	e045      	b.n	8003824 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f851 	bl	8003840 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800379e:	e041      	b.n	8003824 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d039      	beq.n	800381c <I2C_ITError+0x1bc>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b12      	cmp	r3, #18
 80037ac:	d002      	beq.n	80037b4 <I2C_ITError+0x154>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b22      	cmp	r3, #34	@ 0x22
 80037b2:	d133      	bne.n	800381c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037c2:	d107      	bne.n	80037d4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fe f9cf 	bl	8001b7c <HAL_DMA_GetState>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d017      	beq.n	8003814 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e8:	4a14      	ldr	r2, [pc, #80]	@ (800383c <I2C_ITError+0x1dc>)
 80037ea:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe f8a9 	bl	8001950 <HAL_DMA_Abort_IT>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d011      	beq.n	8003828 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800380e:	4610      	mov	r0, r2
 8003810:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003812:	e009      	b.n	8003828 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f813 	bl	8003840 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800381a:	e005      	b.n	8003828 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f80f 	bl	8003840 <I2C_TreatErrorCallback>
  }
}
 8003822:	e002      	b.n	800382a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003824:	bf00      	nop
 8003826:	e000      	b.n	800382a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003828:	bf00      	nop
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	ffff0000 	.word	0xffff0000
 8003838:	08002765 	.word	0x08002765
 800383c:	080038d7 	.word	0x080038d7

08003840 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b60      	cmp	r3, #96	@ 0x60
 8003852:	d10e      	bne.n	8003872 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fe fe49 	bl	8002502 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003870:	e009      	b.n	8003886 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7fe fe34 	bl	80024ee <HAL_I2C_ErrorCallback>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d103      	bne.n	80038ac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2200      	movs	r2, #0
 80038aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d007      	beq.n	80038ca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	619a      	str	r2, [r3, #24]
  }
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f0:	2200      	movs	r2, #0
 80038f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003900:	2200      	movs	r2, #0
 8003902:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff ff9b 	bl	8003840 <I2C_TreatErrorCallback>
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	817b      	strh	r3, [r7, #10]
 8003922:	4613      	mov	r3, r2
 8003924:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003926:	897b      	ldrh	r3, [r7, #10]
 8003928:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800392c:	7a7b      	ldrb	r3, [r7, #9]
 800392e:	041b      	lsls	r3, r3, #16
 8003930:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003934:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	4313      	orrs	r3, r2
 800393e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003942:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	0d5b      	lsrs	r3, r3, #21
 800394e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003952:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <I2C_TransferConfig+0x60>)
 8003954:	430b      	orrs	r3, r1
 8003956:	43db      	mvns	r3, r3
 8003958:	ea02 0103 	and.w	r1, r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	03ff63ff 	.word	0x03ff63ff

08003978 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800398c:	4a39      	ldr	r2, [pc, #228]	@ (8003a74 <I2C_Enable_IRQ+0xfc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d032      	beq.n	80039f8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003996:	4a38      	ldr	r2, [pc, #224]	@ (8003a78 <I2C_Enable_IRQ+0x100>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d02d      	beq.n	80039f8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80039a0:	4a36      	ldr	r2, [pc, #216]	@ (8003a7c <I2C_Enable_IRQ+0x104>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d028      	beq.n	80039f8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	da03      	bge.n	80039b6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80039b4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80039c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80039c8:	887b      	ldrh	r3, [r7, #2]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80039d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80039da:	887b      	ldrh	r3, [r7, #2]
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d103      	bne.n	80039e8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80039e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80039e8:	887b      	ldrh	r3, [r7, #2]
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d133      	bne.n	8003a56 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f043 0320 	orr.w	r3, r3, #32
 80039f4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80039f6:	e02e      	b.n	8003a56 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	da03      	bge.n	8003a08 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003a06:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a08:	887b      	ldrh	r3, [r7, #2]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003a18:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003a2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a2c:	887b      	ldrh	r3, [r7, #2]
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d103      	bne.n	8003a3a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003a38:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a3a:	887b      	ldrh	r3, [r7, #2]
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d103      	bne.n	8003a48 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003a46:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	2b40      	cmp	r3, #64	@ 0x40
 8003a4c:	d103      	bne.n	8003a56 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a54:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6819      	ldr	r1, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	601a      	str	r2, [r3, #0]
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	08002957 	.word	0x08002957
 8003a78:	08002d79 	.word	0x08002d79
 8003a7c:	08002b2d 	.word	0x08002b2d

08003a80 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a90:	887b      	ldrh	r3, [r7, #2]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00f      	beq.n	8003aba <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003aa0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003aae:	2b28      	cmp	r3, #40	@ 0x28
 8003ab0:	d003      	beq.n	8003aba <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003ab8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00f      	beq.n	8003ae4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003aca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ad8:	2b28      	cmp	r3, #40	@ 0x28
 8003ada:	d003      	beq.n	8003ae4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003ae2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ae4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	da03      	bge.n	8003af4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003af2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003af4:	887b      	ldrh	r3, [r7, #2]
 8003af6:	2b10      	cmp	r3, #16
 8003af8:	d103      	bne.n	8003b02 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003b00:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b02:	887b      	ldrh	r3, [r7, #2]
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d103      	bne.n	8003b10 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f043 0320 	orr.w	r3, r3, #32
 8003b0e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b10:	887b      	ldrh	r3, [r7, #2]
 8003b12:	2b40      	cmp	r3, #64	@ 0x40
 8003b14:	d103      	bne.n	8003b1e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b1c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	43da      	mvns	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d138      	bne.n	8003bc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e032      	b.n	8003bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2224      	movs	r2, #36	@ 0x24
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e000      	b.n	8003bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
  }
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d139      	bne.n	8003c5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e033      	b.n	8003c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2224      	movs	r2, #36	@ 0x24
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e000      	b.n	8003c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
  }
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
	...

08003c6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d141      	bne.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c86:	d131      	bne.n	8003cec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c88:	4b47      	ldr	r3, [pc, #284]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c8e:	4a46      	ldr	r2, [pc, #280]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c98:	4b43      	ldr	r3, [pc, #268]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ca0:	4a41      	ldr	r2, [pc, #260]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ca8:	4b40      	ldr	r3, [pc, #256]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2232      	movs	r2, #50	@ 0x32
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8003db0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	0c9b      	lsrs	r3, r3, #18
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cbe:	e002      	b.n	8003cc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc6:	4b38      	ldr	r3, [pc, #224]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd2:	d102      	bne.n	8003cda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f2      	bne.n	8003cc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cda:	4b33      	ldr	r3, [pc, #204]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce6:	d158      	bne.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e057      	b.n	8003d9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cec:	4b2e      	ldr	r3, [pc, #184]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cf8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003cfc:	e04d      	b.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d04:	d141      	bne.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d06:	4b28      	ldr	r3, [pc, #160]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d12:	d131      	bne.n	8003d78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d14:	4b24      	ldr	r3, [pc, #144]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d1a:	4a23      	ldr	r2, [pc, #140]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d24:	4b20      	ldr	r3, [pc, #128]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d34:	4b1d      	ldr	r3, [pc, #116]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2232      	movs	r2, #50	@ 0x32
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003db0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d40:	fba2 2303 	umull	r2, r3, r2, r3
 8003d44:	0c9b      	lsrs	r3, r3, #18
 8003d46:	3301      	adds	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4a:	e002      	b.n	8003d52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d52:	4b15      	ldr	r3, [pc, #84]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d5e:	d102      	bne.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f2      	bne.n	8003d4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d66:	4b10      	ldr	r3, [pc, #64]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d72:	d112      	bne.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e011      	b.n	8003d9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d78:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d88:	e007      	b.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d8a:	4b07      	ldr	r3, [pc, #28]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d92:	4a05      	ldr	r2, [pc, #20]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40007000 	.word	0x40007000
 8003dac:	20000008 	.word	0x20000008
 8003db0:	431bde83 	.word	0x431bde83

08003db4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003db8:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4a04      	ldr	r2, [pc, #16]	@ (8003dd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dc2:	6093      	str	r3, [r2, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40007000 	.word	0x40007000

08003dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e2fe      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d075      	beq.n	8003ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df2:	4b97      	ldr	r3, [pc, #604]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dfc:	4b94      	ldr	r3, [pc, #592]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b0c      	cmp	r3, #12
 8003e0a:	d102      	bne.n	8003e12 <HAL_RCC_OscConfig+0x3e>
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d002      	beq.n	8003e18 <HAL_RCC_OscConfig+0x44>
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e18:	4b8d      	ldr	r3, [pc, #564]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d05b      	beq.n	8003edc <HAL_RCC_OscConfig+0x108>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d157      	bne.n	8003edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e2d9      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e38:	d106      	bne.n	8003e48 <HAL_RCC_OscConfig+0x74>
 8003e3a:	4b85      	ldr	r3, [pc, #532]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a84      	ldr	r2, [pc, #528]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e01d      	b.n	8003e84 <HAL_RCC_OscConfig+0xb0>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x98>
 8003e52:	4b7f      	ldr	r3, [pc, #508]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a7e      	ldr	r2, [pc, #504]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	4b7c      	ldr	r3, [pc, #496]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a7b      	ldr	r2, [pc, #492]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCC_OscConfig+0xb0>
 8003e6c:	4b78      	ldr	r3, [pc, #480]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a77      	ldr	r2, [pc, #476]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b75      	ldr	r3, [pc, #468]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a74      	ldr	r2, [pc, #464]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d013      	beq.n	8003eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fd fb7a 	bl	8001584 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fd fb76 	bl	8001584 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e29e      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0xc0>
 8003eb2:	e014      	b.n	8003ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fd fb66 	bl	8001584 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fd fb62 	bl	8001584 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	@ 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e28a      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ece:	4b60      	ldr	r3, [pc, #384]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0xe8>
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d075      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eea:	4b59      	ldr	r3, [pc, #356]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef4:	4b56      	ldr	r3, [pc, #344]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b0c      	cmp	r3, #12
 8003f02:	d102      	bne.n	8003f0a <HAL_RCC_OscConfig+0x136>
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d002      	beq.n	8003f10 <HAL_RCC_OscConfig+0x13c>
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d11f      	bne.n	8003f50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f10:	4b4f      	ldr	r3, [pc, #316]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_OscConfig+0x154>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e25d      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f28:	4b49      	ldr	r3, [pc, #292]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	061b      	lsls	r3, r3, #24
 8003f36:	4946      	ldr	r1, [pc, #280]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f3c:	4b45      	ldr	r3, [pc, #276]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fd fad3 	bl	80014ec <HAL_InitTick>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d043      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e249      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d023      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f58:	4b3d      	ldr	r3, [pc, #244]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a3c      	ldr	r2, [pc, #240]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fd fb0e 	bl	8001584 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6c:	f7fd fb0a 	bl	8001584 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e232      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f7e:	4b34      	ldr	r3, [pc, #208]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8a:	4b31      	ldr	r3, [pc, #196]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	061b      	lsls	r3, r3, #24
 8003f98:	492d      	ldr	r1, [pc, #180]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]
 8003f9e:	e01a      	b.n	8003fd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003fa6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fd faea 	bl	8001584 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb4:	f7fd fae6 	bl	8001584 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e20e      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fc6:	4b22      	ldr	r3, [pc, #136]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x1e0>
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d041      	beq.n	8004066 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01c      	beq.n	8004024 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fea:	4b19      	ldr	r3, [pc, #100]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff0:	4a17      	ldr	r2, [pc, #92]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffa:	f7fd fac3 	bl	8001584 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004002:	f7fd fabf 	bl	8001584 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e1e7      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004014:	4b0e      	ldr	r3, [pc, #56]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8004016:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0ef      	beq.n	8004002 <HAL_RCC_OscConfig+0x22e>
 8004022:	e020      	b.n	8004066 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004024:	4b0a      	ldr	r3, [pc, #40]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 8004026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800402a:	4a09      	ldr	r2, [pc, #36]	@ (8004050 <HAL_RCC_OscConfig+0x27c>)
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fd faa6 	bl	8001584 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800403a:	e00d      	b.n	8004058 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403c:	f7fd faa2 	bl	8001584 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d906      	bls.n	8004058 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e1ca      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000
 8004054:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004058:	4b8c      	ldr	r3, [pc, #560]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 800405a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1ea      	bne.n	800403c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80a6 	beq.w	80041c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004074:	2300      	movs	r3, #0
 8004076:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004078:	4b84      	ldr	r3, [pc, #528]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_OscConfig+0x2b4>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x2b6>
 8004088:	2300      	movs	r3, #0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	4b7f      	ldr	r3, [pc, #508]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004092:	4a7e      	ldr	r2, [pc, #504]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004098:	6593      	str	r3, [r2, #88]	@ 0x58
 800409a:	4b7c      	ldr	r3, [pc, #496]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 800409c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040a6:	2301      	movs	r3, #1
 80040a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040aa:	4b79      	ldr	r3, [pc, #484]	@ (8004290 <HAL_RCC_OscConfig+0x4bc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d118      	bne.n	80040e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b6:	4b76      	ldr	r3, [pc, #472]	@ (8004290 <HAL_RCC_OscConfig+0x4bc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a75      	ldr	r2, [pc, #468]	@ (8004290 <HAL_RCC_OscConfig+0x4bc>)
 80040bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c2:	f7fd fa5f 	bl	8001584 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ca:	f7fd fa5b 	bl	8001584 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e183      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040dc:	4b6c      	ldr	r3, [pc, #432]	@ (8004290 <HAL_RCC_OscConfig+0x4bc>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d108      	bne.n	8004102 <HAL_RCC_OscConfig+0x32e>
 80040f0:	4b66      	ldr	r3, [pc, #408]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f6:	4a65      	ldr	r2, [pc, #404]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004100:	e024      	b.n	800414c <HAL_RCC_OscConfig+0x378>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b05      	cmp	r3, #5
 8004108:	d110      	bne.n	800412c <HAL_RCC_OscConfig+0x358>
 800410a:	4b60      	ldr	r3, [pc, #384]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004110:	4a5e      	ldr	r2, [pc, #376]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004112:	f043 0304 	orr.w	r3, r3, #4
 8004116:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800411a:	4b5c      	ldr	r3, [pc, #368]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004120:	4a5a      	ldr	r2, [pc, #360]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800412a:	e00f      	b.n	800414c <HAL_RCC_OscConfig+0x378>
 800412c:	4b57      	ldr	r3, [pc, #348]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004132:	4a56      	ldr	r2, [pc, #344]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800413c:	4b53      	ldr	r3, [pc, #332]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004142:	4a52      	ldr	r2, [pc, #328]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004144:	f023 0304 	bic.w	r3, r3, #4
 8004148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d016      	beq.n	8004182 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004154:	f7fd fa16 	bl	8001584 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415a:	e00a      	b.n	8004172 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415c:	f7fd fa12 	bl	8001584 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e138      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004172:	4b46      	ldr	r3, [pc, #280]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0ed      	beq.n	800415c <HAL_RCC_OscConfig+0x388>
 8004180:	e015      	b.n	80041ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004182:	f7fd f9ff 	bl	8001584 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004188:	e00a      	b.n	80041a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418a:	f7fd f9fb 	bl	8001584 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004198:	4293      	cmp	r3, r2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e121      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041a0:	4b3a      	ldr	r3, [pc, #232]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1ed      	bne.n	800418a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041ae:	7ffb      	ldrb	r3, [r7, #31]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d105      	bne.n	80041c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b4:	4b35      	ldr	r3, [pc, #212]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 80041b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b8:	4a34      	ldr	r2, [pc, #208]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 80041ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d03c      	beq.n	8004246 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01c      	beq.n	800420e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041d4:	4b2d      	ldr	r3, [pc, #180]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 80041d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041da:	4a2c      	ldr	r2, [pc, #176]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fd f9ce 	bl	8001584 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ec:	f7fd f9ca 	bl	8001584 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e0f2      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041fe:	4b23      	ldr	r3, [pc, #140]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004200:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ef      	beq.n	80041ec <HAL_RCC_OscConfig+0x418>
 800420c:	e01b      	b.n	8004246 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800420e:	4b1f      	ldr	r3, [pc, #124]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004210:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004214:	4a1d      	ldr	r2, [pc, #116]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fd f9b1 	bl	8001584 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004226:	f7fd f9ad 	bl	8001584 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0d5      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004238:	4b14      	ldr	r3, [pc, #80]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 800423a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1ef      	bne.n	8004226 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80c9 	beq.w	80043e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004250:	4b0e      	ldr	r3, [pc, #56]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b0c      	cmp	r3, #12
 800425a:	f000 8083 	beq.w	8004364 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d15e      	bne.n	8004324 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004266:	4b09      	ldr	r3, [pc, #36]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a08      	ldr	r2, [pc, #32]	@ (800428c <HAL_RCC_OscConfig+0x4b8>)
 800426c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fd f987 	bl	8001584 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004278:	e00c      	b.n	8004294 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800427a:	f7fd f983 	bl	8001584 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d905      	bls.n	8004294 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e0ab      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
 800428c:	40021000 	.word	0x40021000
 8004290:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004294:	4b55      	ldr	r3, [pc, #340]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1ec      	bne.n	800427a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a0:	4b52      	ldr	r3, [pc, #328]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	4b52      	ldr	r3, [pc, #328]	@ (80043f0 <HAL_RCC_OscConfig+0x61c>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6a11      	ldr	r1, [r2, #32]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042b0:	3a01      	subs	r2, #1
 80042b2:	0112      	lsls	r2, r2, #4
 80042b4:	4311      	orrs	r1, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80042ba:	0212      	lsls	r2, r2, #8
 80042bc:	4311      	orrs	r1, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80042c2:	0852      	lsrs	r2, r2, #1
 80042c4:	3a01      	subs	r2, #1
 80042c6:	0552      	lsls	r2, r2, #21
 80042c8:	4311      	orrs	r1, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042ce:	0852      	lsrs	r2, r2, #1
 80042d0:	3a01      	subs	r2, #1
 80042d2:	0652      	lsls	r2, r2, #25
 80042d4:	4311      	orrs	r1, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80042da:	06d2      	lsls	r2, r2, #27
 80042dc:	430a      	orrs	r2, r1
 80042de:	4943      	ldr	r1, [pc, #268]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e4:	4b41      	ldr	r3, [pc, #260]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a40      	ldr	r2, [pc, #256]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 80042ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042f0:	4b3e      	ldr	r3, [pc, #248]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a3d      	ldr	r2, [pc, #244]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 80042f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fd f942 	bl	8001584 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004304:	f7fd f93e 	bl	8001584 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e066      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004316:	4b35      	ldr	r3, [pc, #212]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0x530>
 8004322:	e05e      	b.n	80043e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004324:	4b31      	ldr	r3, [pc, #196]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a30      	ldr	r2, [pc, #192]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 800432a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800432e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fd f928 	bl	8001584 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004338:	f7fd f924 	bl	8001584 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e04c      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434a:	4b28      	ldr	r3, [pc, #160]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004356:	4b25      	ldr	r3, [pc, #148]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	4924      	ldr	r1, [pc, #144]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 800435c:	4b25      	ldr	r3, [pc, #148]	@ (80043f4 <HAL_RCC_OscConfig+0x620>)
 800435e:	4013      	ands	r3, r2
 8004360:	60cb      	str	r3, [r1, #12]
 8004362:	e03e      	b.n	80043e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e039      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004370:	4b1e      	ldr	r3, [pc, #120]	@ (80043ec <HAL_RCC_OscConfig+0x618>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f003 0203 	and.w	r2, r3, #3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	429a      	cmp	r2, r3
 8004382:	d12c      	bne.n	80043de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438e:	3b01      	subs	r3, #1
 8004390:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d123      	bne.n	80043de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d11b      	bne.n	80043de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d113      	bne.n	80043de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	3b01      	subs	r3, #1
 80043c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d109      	bne.n	80043de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	3b01      	subs	r3, #1
 80043d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3720      	adds	r7, #32
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000
 80043f0:	019f800c 	.word	0x019f800c
 80043f4:	feeefffc 	.word	0xfeeefffc

080043f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e11e      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004410:	4b91      	ldr	r3, [pc, #580]	@ (8004658 <HAL_RCC_ClockConfig+0x260>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d910      	bls.n	8004440 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b8e      	ldr	r3, [pc, #568]	@ (8004658 <HAL_RCC_ClockConfig+0x260>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 020f 	bic.w	r2, r3, #15
 8004426:	498c      	ldr	r1, [pc, #560]	@ (8004658 <HAL_RCC_ClockConfig+0x260>)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	4313      	orrs	r3, r2
 800442c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	4b8a      	ldr	r3, [pc, #552]	@ (8004658 <HAL_RCC_ClockConfig+0x260>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e106      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d073      	beq.n	8004534 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d129      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004454:	4b81      	ldr	r3, [pc, #516]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0f4      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004464:	f000 f99e 	bl	80047a4 <RCC_GetSysClockFreqFromPLLSource>
 8004468:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4a7c      	ldr	r2, [pc, #496]	@ (8004660 <HAL_RCC_ClockConfig+0x268>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d93f      	bls.n	80044f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004472:	4b7a      	ldr	r3, [pc, #488]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004486:	2b00      	cmp	r3, #0
 8004488:	d033      	beq.n	80044f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800448e:	2b00      	cmp	r3, #0
 8004490:	d12f      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004492:	4b72      	ldr	r3, [pc, #456]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800449a:	4a70      	ldr	r2, [pc, #448]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 800449c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044a2:	2380      	movs	r3, #128	@ 0x80
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e024      	b.n	80044f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044b0:	4b6a      	ldr	r3, [pc, #424]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0c6      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044c0:	4b66      	ldr	r3, [pc, #408]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0be      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80044d0:	f000 f8ce 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4a61      	ldr	r2, [pc, #388]	@ (8004660 <HAL_RCC_ClockConfig+0x268>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d909      	bls.n	80044f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044de:	4b5f      	ldr	r3, [pc, #380]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044e6:	4a5d      	ldr	r2, [pc, #372]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 80044e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80044ee:	2380      	movs	r3, #128	@ 0x80
 80044f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044f2:	4b5a      	ldr	r3, [pc, #360]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f023 0203 	bic.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4957      	ldr	r1, [pc, #348]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 8004500:	4313      	orrs	r3, r2
 8004502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004504:	f7fd f83e 	bl	8001584 <HAL_GetTick>
 8004508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	e00a      	b.n	8004522 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450c:	f7fd f83a 	bl	8001584 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e095      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	4b4e      	ldr	r3, [pc, #312]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 020c 	and.w	r2, r3, #12
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	429a      	cmp	r2, r3
 8004532:	d1eb      	bne.n	800450c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d023      	beq.n	8004588 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800454c:	4b43      	ldr	r3, [pc, #268]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4a42      	ldr	r2, [pc, #264]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 8004552:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004556:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004564:	4b3d      	ldr	r3, [pc, #244]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800456c:	4a3b      	ldr	r2, [pc, #236]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 800456e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004572:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004574:	4b39      	ldr	r3, [pc, #228]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4936      	ldr	r1, [pc, #216]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
 8004586:	e008      	b.n	800459a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b80      	cmp	r3, #128	@ 0x80
 800458c:	d105      	bne.n	800459a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800458e:	4b33      	ldr	r3, [pc, #204]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	4a32      	ldr	r2, [pc, #200]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 8004594:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004598:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800459a:	4b2f      	ldr	r3, [pc, #188]	@ (8004658 <HAL_RCC_ClockConfig+0x260>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d21d      	bcs.n	80045e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004658 <HAL_RCC_ClockConfig+0x260>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 020f 	bic.w	r2, r3, #15
 80045b0:	4929      	ldr	r1, [pc, #164]	@ (8004658 <HAL_RCC_ClockConfig+0x260>)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045b8:	f7fc ffe4 	bl	8001584 <HAL_GetTick>
 80045bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c0:	f7fc ffe0 	bl	8001584 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e03b      	b.n	800464e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d6:	4b20      	ldr	r3, [pc, #128]	@ (8004658 <HAL_RCC_ClockConfig+0x260>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d1ed      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f0:	4b1a      	ldr	r3, [pc, #104]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4917      	ldr	r1, [pc, #92]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800460e:	4b13      	ldr	r3, [pc, #76]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	490f      	ldr	r1, [pc, #60]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004622:	f000 f825 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 8004626:	4602      	mov	r2, r0
 8004628:	4b0c      	ldr	r3, [pc, #48]	@ (800465c <HAL_RCC_ClockConfig+0x264>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	490c      	ldr	r1, [pc, #48]	@ (8004664 <HAL_RCC_ClockConfig+0x26c>)
 8004634:	5ccb      	ldrb	r3, [r1, r3]
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	fa22 f303 	lsr.w	r3, r2, r3
 800463e:	4a0a      	ldr	r2, [pc, #40]	@ (8004668 <HAL_RCC_ClockConfig+0x270>)
 8004640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004642:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <HAL_RCC_ClockConfig+0x274>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7fc ff50 	bl	80014ec <HAL_InitTick>
 800464c:	4603      	mov	r3, r0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40022000 	.word	0x40022000
 800465c:	40021000 	.word	0x40021000
 8004660:	04c4b400 	.word	0x04c4b400
 8004664:	08007004 	.word	0x08007004
 8004668:	20000008 	.word	0x20000008
 800466c:	2000000c 	.word	0x2000000c

08004670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004676:	4b2c      	ldr	r3, [pc, #176]	@ (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b04      	cmp	r3, #4
 8004680:	d102      	bne.n	8004688 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004682:	4b2a      	ldr	r3, [pc, #168]	@ (800472c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	e047      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004688:	4b27      	ldr	r3, [pc, #156]	@ (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 030c 	and.w	r3, r3, #12
 8004690:	2b08      	cmp	r3, #8
 8004692:	d102      	bne.n	800469a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004694:	4b26      	ldr	r3, [pc, #152]	@ (8004730 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	e03e      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800469a:	4b23      	ldr	r3, [pc, #140]	@ (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	d136      	bne.n	8004714 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046a6:	4b20      	ldr	r3, [pc, #128]	@ (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	3301      	adds	r3, #1
 80046bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d10c      	bne.n	80046de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004730 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	4a16      	ldr	r2, [pc, #88]	@ (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ce:	68d2      	ldr	r2, [r2, #12]
 80046d0:	0a12      	lsrs	r2, r2, #8
 80046d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	617b      	str	r3, [r7, #20]
      break;
 80046dc:	e00c      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046de:	4a13      	ldr	r2, [pc, #76]	@ (800472c <HAL_RCC_GetSysClockFreq+0xbc>)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	4a10      	ldr	r2, [pc, #64]	@ (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e8:	68d2      	ldr	r2, [r2, #12]
 80046ea:	0a12      	lsrs	r2, r2, #8
 80046ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]
      break;
 80046f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	0e5b      	lsrs	r3, r3, #25
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	3301      	adds	r3, #1
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	e001      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004718:	693b      	ldr	r3, [r7, #16]
}
 800471a:	4618      	mov	r0, r3
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	00f42400 	.word	0x00f42400
 8004730:	016e3600 	.word	0x016e3600

08004734 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004738:	4b03      	ldr	r3, [pc, #12]	@ (8004748 <HAL_RCC_GetHCLKFreq+0x14>)
 800473a:	681b      	ldr	r3, [r3, #0]
}
 800473c:	4618      	mov	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000008 	.word	0x20000008

0800474c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004750:	f7ff fff0 	bl	8004734 <HAL_RCC_GetHCLKFreq>
 8004754:	4602      	mov	r2, r0
 8004756:	4b06      	ldr	r3, [pc, #24]	@ (8004770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	4904      	ldr	r1, [pc, #16]	@ (8004774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004762:	5ccb      	ldrb	r3, [r1, r3]
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40021000 	.word	0x40021000
 8004774:	08007014 	.word	0x08007014

08004778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800477c:	f7ff ffda 	bl	8004734 <HAL_RCC_GetHCLKFreq>
 8004780:	4602      	mov	r2, r0
 8004782:	4b06      	ldr	r3, [pc, #24]	@ (800479c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	0adb      	lsrs	r3, r3, #11
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	4904      	ldr	r1, [pc, #16]	@ (80047a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800478e:	5ccb      	ldrb	r3, [r1, r3]
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004798:	4618      	mov	r0, r3
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	08007014 	.word	0x08007014

080047a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	3301      	adds	r3, #1
 80047c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d10c      	bne.n	80047e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047c8:	4a17      	ldr	r2, [pc, #92]	@ (8004828 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	4a14      	ldr	r2, [pc, #80]	@ (8004824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047d2:	68d2      	ldr	r2, [r2, #12]
 80047d4:	0a12      	lsrs	r2, r2, #8
 80047d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	617b      	str	r3, [r7, #20]
    break;
 80047e0:	e00c      	b.n	80047fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047e2:	4a12      	ldr	r2, [pc, #72]	@ (800482c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ec:	68d2      	ldr	r2, [r2, #12]
 80047ee:	0a12      	lsrs	r2, r2, #8
 80047f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
 80047f8:	617b      	str	r3, [r7, #20]
    break;
 80047fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047fc:	4b09      	ldr	r3, [pc, #36]	@ (8004824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	0e5b      	lsrs	r3, r3, #25
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	3301      	adds	r3, #1
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004816:	687b      	ldr	r3, [r7, #4]
}
 8004818:	4618      	mov	r0, r3
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40021000 	.word	0x40021000
 8004828:	016e3600 	.word	0x016e3600
 800482c:	00f42400 	.word	0x00f42400

08004830 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004838:	2300      	movs	r3, #0
 800483a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800483c:	2300      	movs	r3, #0
 800483e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8098 	beq.w	800497e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484e:	2300      	movs	r3, #0
 8004850:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004852:	4b43      	ldr	r3, [pc, #268]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10d      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485e:	4b40      	ldr	r3, [pc, #256]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004862:	4a3f      	ldr	r2, [pc, #252]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004868:	6593      	str	r3, [r2, #88]	@ 0x58
 800486a:	4b3d      	ldr	r3, [pc, #244]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004876:	2301      	movs	r3, #1
 8004878:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800487a:	4b3a      	ldr	r3, [pc, #232]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a39      	ldr	r2, [pc, #228]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004884:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004886:	f7fc fe7d 	bl	8001584 <HAL_GetTick>
 800488a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800488c:	e009      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488e:	f7fc fe79 	bl	8001584 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d902      	bls.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	74fb      	strb	r3, [r7, #19]
        break;
 80048a0:	e005      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048a2:	4b30      	ldr	r3, [pc, #192]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0ef      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048ae:	7cfb      	ldrb	r3, [r7, #19]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d159      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01e      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d019      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048d0:	4b23      	ldr	r3, [pc, #140]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048dc:	4b20      	ldr	r3, [pc, #128]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048fc:	4a18      	ldr	r2, [pc, #96]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490e:	f7fc fe39 	bl	8001584 <HAL_GetTick>
 8004912:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004914:	e00b      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004916:	f7fc fe35 	bl	8001584 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004924:	4293      	cmp	r3, r2
 8004926:	d902      	bls.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	74fb      	strb	r3, [r7, #19]
            break;
 800492c:	e006      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800492e:	4b0c      	ldr	r3, [pc, #48]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0ec      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004942:	4b07      	ldr	r3, [pc, #28]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004948:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004950:	4903      	ldr	r1, [pc, #12]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004958:	e008      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800495a:	7cfb      	ldrb	r3, [r7, #19]
 800495c:	74bb      	strb	r3, [r7, #18]
 800495e:	e005      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	7cfb      	ldrb	r3, [r7, #19]
 800496a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800496c:	7c7b      	ldrb	r3, [r7, #17]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d105      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004972:	4ba7      	ldr	r3, [pc, #668]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004976:	4aa6      	ldr	r2, [pc, #664]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004978:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800497c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800498a:	4ba1      	ldr	r3, [pc, #644]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004990:	f023 0203 	bic.w	r2, r3, #3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	499d      	ldr	r1, [pc, #628]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049ac:	4b98      	ldr	r3, [pc, #608]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b2:	f023 020c 	bic.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	4995      	ldr	r1, [pc, #596]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049ce:	4b90      	ldr	r3, [pc, #576]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	498c      	ldr	r1, [pc, #560]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049f0:	4b87      	ldr	r3, [pc, #540]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	4984      	ldr	r1, [pc, #528]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a12:	4b7f      	ldr	r3, [pc, #508]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	497b      	ldr	r1, [pc, #492]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a34:	4b76      	ldr	r3, [pc, #472]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	4973      	ldr	r1, [pc, #460]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a56:	4b6e      	ldr	r3, [pc, #440]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	496a      	ldr	r1, [pc, #424]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a78:	4b65      	ldr	r3, [pc, #404]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	4962      	ldr	r1, [pc, #392]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	4959      	ldr	r1, [pc, #356]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004abc:	4b54      	ldr	r3, [pc, #336]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ac2:	f023 0203 	bic.w	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	4951      	ldr	r1, [pc, #324]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ade:	4b4c      	ldr	r3, [pc, #304]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aec:	4948      	ldr	r1, [pc, #288]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d015      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b00:	4b43      	ldr	r3, [pc, #268]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0e:	4940      	ldr	r1, [pc, #256]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b1e:	d105      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b20:	4b3b      	ldr	r3, [pc, #236]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a3a      	ldr	r2, [pc, #232]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d015      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b38:	4b35      	ldr	r3, [pc, #212]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b46:	4932      	ldr	r1, [pc, #200]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b56:	d105      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b58:	4b2d      	ldr	r3, [pc, #180]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b62:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b70:	4b27      	ldr	r3, [pc, #156]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b76:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7e:	4924      	ldr	r1, [pc, #144]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b8e:	d105      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b90:	4b1f      	ldr	r3, [pc, #124]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4a1e      	ldr	r2, [pc, #120]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b9a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ba8:	4b19      	ldr	r3, [pc, #100]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb6:	4916      	ldr	r1, [pc, #88]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bc6:	d105      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc8:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a10      	ldr	r2, [pc, #64]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bd2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d019      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bee:	4908      	ldr	r1, [pc, #32]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bfe:	d109      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c00:	4b03      	ldr	r3, [pc, #12]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a02      	ldr	r2, [pc, #8]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c0a:	60d3      	str	r3, [r2, #12]
 8004c0c:	e002      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d015      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c20:	4b29      	ldr	r3, [pc, #164]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c2e:	4926      	ldr	r1, [pc, #152]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c3e:	d105      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c40:	4b21      	ldr	r3, [pc, #132]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a20      	ldr	r2, [pc, #128]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c4a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d015      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c58:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c5e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c66:	4918      	ldr	r1, [pc, #96]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c76:	d105      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c78:	4b13      	ldr	r3, [pc, #76]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4a12      	ldr	r2, [pc, #72]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c82:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d015      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c90:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9e:	490a      	ldr	r1, [pc, #40]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004caa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cae:	d105      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb0:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a04      	ldr	r2, [pc, #16]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000

08004ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e09d      	b.n	8004e1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d108      	bne.n	8004cf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cee:	d009      	beq.n	8004d04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	61da      	str	r2, [r3, #28]
 8004cf6:	e005      	b.n	8004d04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fc fa0a 	bl	8001138 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d44:	d902      	bls.n	8004d4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e002      	b.n	8004d52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004d5a:	d007      	beq.n	8004d6c <HAL_SPI_Init+0xa0>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d64:	d002      	beq.n	8004d6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dae:	ea42 0103 	orr.w	r1, r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	f003 0204 	and.w	r2, r3, #4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004de8:	ea42 0103 	orr.w	r1, r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10e      	bne.n	8004e64 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d009      	beq.n	8004e64 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d004      	beq.n	8004e64 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	4798      	blx	r3
    return;
 8004e62:	e0ce      	b.n	8005002 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_SPI_IRQHandler+0x5e>
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
    return;
 8004e80:	e0bf      	b.n	8005002 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <HAL_SPI_IRQHandler+0x7e>
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80b0 	beq.w	8005002 <HAL_SPI_IRQHandler+0x1de>
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80aa 	beq.w	8005002 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d023      	beq.n	8004f00 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d011      	beq.n	8004ee8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec8:	f043 0204 	orr.w	r2, r3, #4
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	e00b      	b.n	8004f00 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ee8:	2300      	movs	r3, #0
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	693b      	ldr	r3, [r7, #16]
        return;
 8004efe:	e080      	b.n	8005002 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d014      	beq.n	8004f34 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f0e:	f043 0201 	orr.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00c      	beq.n	8004f58 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f42:	f043 0208 	orr.w	r2, r3, #8
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d04f      	beq.n	8005000 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f6e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d104      	bne.n	8004f8c <HAL_SPI_IRQHandler+0x168>
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d034      	beq.n	8004ff6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0203 	bic.w	r2, r2, #3
 8004f9a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d011      	beq.n	8004fc8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa8:	4a17      	ldr	r2, [pc, #92]	@ (8005008 <HAL_SPI_IRQHandler+0x1e4>)
 8004faa:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fc fccd 	bl	8001950 <HAL_DMA_Abort_IT>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d016      	beq.n	8004ffe <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8005008 <HAL_SPI_IRQHandler+0x1e4>)
 8004fd6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fc fcb7 	bl	8001950 <HAL_DMA_Abort_IT>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004ff4:	e003      	b.n	8004ffe <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f808 	bl	800500c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004ffc:	e000      	b.n	8005000 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004ffe:	bf00      	nop
    return;
 8005000:	bf00      	nop
  }
}
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	08005021 	.word	0x08005021

0800500c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7ff ffe5 	bl	800500c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e042      	b.n	80050e2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fb ff9c 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2224      	movs	r2, #36	@ 0x24
 8005078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fc7b 	bl	8005990 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f97c 	bl	8005398 <UART_SetConfig>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e01b      	b.n	80050e2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fcfa 	bl	8005ad4 <UART_CheckIdleState>
 80050e0:	4603      	mov	r3, r0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b08a      	sub	sp, #40	@ 0x28
 80050ee:	af02      	add	r7, sp, #8
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005100:	2b20      	cmp	r3, #32
 8005102:	d17b      	bne.n	80051fc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_UART_Transmit+0x26>
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e074      	b.n	80051fe <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2221      	movs	r2, #33	@ 0x21
 8005120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005124:	f7fc fa2e 	bl	8001584 <HAL_GetTick>
 8005128:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	88fa      	ldrh	r2, [r7, #6]
 8005136:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005142:	d108      	bne.n	8005156 <HAL_UART_Transmit+0x6c>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d104      	bne.n	8005156 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	e003      	b.n	800515e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800515e:	e030      	b.n	80051c2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2200      	movs	r2, #0
 8005168:	2180      	movs	r1, #128	@ 0x80
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fd5c 	bl	8005c28 <UART_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e03d      	b.n	80051fe <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10b      	bne.n	80051a0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005196:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	3302      	adds	r3, #2
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	e007      	b.n	80051b0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	781a      	ldrb	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3301      	adds	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1c8      	bne.n	8005160 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2200      	movs	r2, #0
 80051d6:	2140      	movs	r1, #64	@ 0x40
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 fd25 	bl	8005c28 <UART_WaitOnFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e006      	b.n	80051fe <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e000      	b.n	80051fe <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80051fc:	2302      	movs	r3, #2
  }
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b08a      	sub	sp, #40	@ 0x28
 800520a:	af02      	add	r7, sp, #8
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	603b      	str	r3, [r7, #0]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800521c:	2b20      	cmp	r3, #32
 800521e:	f040 80b5 	bne.w	800538c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <HAL_UART_Receive+0x28>
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e0ad      	b.n	800538e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2222      	movs	r2, #34	@ 0x22
 800523e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005248:	f7fc f99c 	bl	8001584 <HAL_GetTick>
 800524c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	88fa      	ldrh	r2, [r7, #6]
 8005252:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	88fa      	ldrh	r2, [r7, #6]
 800525a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005266:	d10e      	bne.n	8005286 <HAL_UART_Receive+0x80>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d105      	bne.n	800527c <HAL_UART_Receive+0x76>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005276:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800527a:	e02d      	b.n	80052d8 <HAL_UART_Receive+0xd2>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	22ff      	movs	r2, #255	@ 0xff
 8005280:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005284:	e028      	b.n	80052d8 <HAL_UART_Receive+0xd2>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10d      	bne.n	80052aa <HAL_UART_Receive+0xa4>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d104      	bne.n	80052a0 <HAL_UART_Receive+0x9a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	22ff      	movs	r2, #255	@ 0xff
 800529a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800529e:	e01b      	b.n	80052d8 <HAL_UART_Receive+0xd2>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	227f      	movs	r2, #127	@ 0x7f
 80052a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80052a8:	e016      	b.n	80052d8 <HAL_UART_Receive+0xd2>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052b2:	d10d      	bne.n	80052d0 <HAL_UART_Receive+0xca>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d104      	bne.n	80052c6 <HAL_UART_Receive+0xc0>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	227f      	movs	r2, #127	@ 0x7f
 80052c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80052c4:	e008      	b.n	80052d8 <HAL_UART_Receive+0xd2>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	223f      	movs	r2, #63	@ 0x3f
 80052ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80052ce:	e003      	b.n	80052d8 <HAL_UART_Receive+0xd2>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80052de:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052e8:	d108      	bne.n	80052fc <HAL_UART_Receive+0xf6>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e003      	b.n	8005304 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005304:	e036      	b.n	8005374 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	2120      	movs	r1, #32
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 fc89 	bl	8005c28 <UART_WaitOnFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e032      	b.n	800538e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10c      	bne.n	8005348 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005334:	b29a      	uxth	r2, r3
 8005336:	8a7b      	ldrh	r3, [r7, #18]
 8005338:	4013      	ands	r3, r2
 800533a:	b29a      	uxth	r2, r3
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	3302      	adds	r3, #2
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	e00c      	b.n	8005362 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534e:	b2da      	uxtb	r2, r3
 8005350:	8a7b      	ldrh	r3, [r7, #18]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	4013      	ands	r3, r2
 8005356:	b2da      	uxtb	r2, r3
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	3301      	adds	r3, #1
 8005360:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1c2      	bne.n	8005306 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	e000      	b.n	800538e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800538c:	2302      	movs	r3, #2
  }
}
 800538e:	4618      	mov	r0, r3
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800539c:	b08c      	sub	sp, #48	@ 0x30
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	4313      	orrs	r3, r2
 80053be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4baa      	ldr	r3, [pc, #680]	@ (8005670 <UART_SetConfig+0x2d8>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a9f      	ldr	r2, [pc, #636]	@ (8005674 <UART_SetConfig+0x2dc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005400:	4313      	orrs	r3, r2
 8005402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800540e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	6812      	ldr	r2, [r2, #0]
 8005416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005418:	430b      	orrs	r3, r1
 800541a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005422:	f023 010f 	bic.w	r1, r3, #15
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a90      	ldr	r2, [pc, #576]	@ (8005678 <UART_SetConfig+0x2e0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d125      	bne.n	8005488 <UART_SetConfig+0xf0>
 800543c:	4b8f      	ldr	r3, [pc, #572]	@ (800567c <UART_SetConfig+0x2e4>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	2b03      	cmp	r3, #3
 8005448:	d81a      	bhi.n	8005480 <UART_SetConfig+0xe8>
 800544a:	a201      	add	r2, pc, #4	@ (adr r2, 8005450 <UART_SetConfig+0xb8>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	08005461 	.word	0x08005461
 8005454:	08005471 	.word	0x08005471
 8005458:	08005469 	.word	0x08005469
 800545c:	08005479 	.word	0x08005479
 8005460:	2301      	movs	r3, #1
 8005462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005466:	e116      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005468:	2302      	movs	r3, #2
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546e:	e112      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005470:	2304      	movs	r3, #4
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005476:	e10e      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005478:	2308      	movs	r3, #8
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800547e:	e10a      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005480:	2310      	movs	r3, #16
 8005482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005486:	e106      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a7c      	ldr	r2, [pc, #496]	@ (8005680 <UART_SetConfig+0x2e8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d138      	bne.n	8005504 <UART_SetConfig+0x16c>
 8005492:	4b7a      	ldr	r3, [pc, #488]	@ (800567c <UART_SetConfig+0x2e4>)
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005498:	f003 030c 	and.w	r3, r3, #12
 800549c:	2b0c      	cmp	r3, #12
 800549e:	d82d      	bhi.n	80054fc <UART_SetConfig+0x164>
 80054a0:	a201      	add	r2, pc, #4	@ (adr r2, 80054a8 <UART_SetConfig+0x110>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054dd 	.word	0x080054dd
 80054ac:	080054fd 	.word	0x080054fd
 80054b0:	080054fd 	.word	0x080054fd
 80054b4:	080054fd 	.word	0x080054fd
 80054b8:	080054ed 	.word	0x080054ed
 80054bc:	080054fd 	.word	0x080054fd
 80054c0:	080054fd 	.word	0x080054fd
 80054c4:	080054fd 	.word	0x080054fd
 80054c8:	080054e5 	.word	0x080054e5
 80054cc:	080054fd 	.word	0x080054fd
 80054d0:	080054fd 	.word	0x080054fd
 80054d4:	080054fd 	.word	0x080054fd
 80054d8:	080054f5 	.word	0x080054f5
 80054dc:	2300      	movs	r3, #0
 80054de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e2:	e0d8      	b.n	8005696 <UART_SetConfig+0x2fe>
 80054e4:	2302      	movs	r3, #2
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ea:	e0d4      	b.n	8005696 <UART_SetConfig+0x2fe>
 80054ec:	2304      	movs	r3, #4
 80054ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f2:	e0d0      	b.n	8005696 <UART_SetConfig+0x2fe>
 80054f4:	2308      	movs	r3, #8
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054fa:	e0cc      	b.n	8005696 <UART_SetConfig+0x2fe>
 80054fc:	2310      	movs	r3, #16
 80054fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005502:	e0c8      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a5e      	ldr	r2, [pc, #376]	@ (8005684 <UART_SetConfig+0x2ec>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d125      	bne.n	800555a <UART_SetConfig+0x1c2>
 800550e:	4b5b      	ldr	r3, [pc, #364]	@ (800567c <UART_SetConfig+0x2e4>)
 8005510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005514:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005518:	2b30      	cmp	r3, #48	@ 0x30
 800551a:	d016      	beq.n	800554a <UART_SetConfig+0x1b2>
 800551c:	2b30      	cmp	r3, #48	@ 0x30
 800551e:	d818      	bhi.n	8005552 <UART_SetConfig+0x1ba>
 8005520:	2b20      	cmp	r3, #32
 8005522:	d00a      	beq.n	800553a <UART_SetConfig+0x1a2>
 8005524:	2b20      	cmp	r3, #32
 8005526:	d814      	bhi.n	8005552 <UART_SetConfig+0x1ba>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <UART_SetConfig+0x19a>
 800552c:	2b10      	cmp	r3, #16
 800552e:	d008      	beq.n	8005542 <UART_SetConfig+0x1aa>
 8005530:	e00f      	b.n	8005552 <UART_SetConfig+0x1ba>
 8005532:	2300      	movs	r3, #0
 8005534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005538:	e0ad      	b.n	8005696 <UART_SetConfig+0x2fe>
 800553a:	2302      	movs	r3, #2
 800553c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005540:	e0a9      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005542:	2304      	movs	r3, #4
 8005544:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005548:	e0a5      	b.n	8005696 <UART_SetConfig+0x2fe>
 800554a:	2308      	movs	r3, #8
 800554c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005550:	e0a1      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005552:	2310      	movs	r3, #16
 8005554:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005558:	e09d      	b.n	8005696 <UART_SetConfig+0x2fe>
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a4a      	ldr	r2, [pc, #296]	@ (8005688 <UART_SetConfig+0x2f0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d125      	bne.n	80055b0 <UART_SetConfig+0x218>
 8005564:	4b45      	ldr	r3, [pc, #276]	@ (800567c <UART_SetConfig+0x2e4>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800556e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005570:	d016      	beq.n	80055a0 <UART_SetConfig+0x208>
 8005572:	2bc0      	cmp	r3, #192	@ 0xc0
 8005574:	d818      	bhi.n	80055a8 <UART_SetConfig+0x210>
 8005576:	2b80      	cmp	r3, #128	@ 0x80
 8005578:	d00a      	beq.n	8005590 <UART_SetConfig+0x1f8>
 800557a:	2b80      	cmp	r3, #128	@ 0x80
 800557c:	d814      	bhi.n	80055a8 <UART_SetConfig+0x210>
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <UART_SetConfig+0x1f0>
 8005582:	2b40      	cmp	r3, #64	@ 0x40
 8005584:	d008      	beq.n	8005598 <UART_SetConfig+0x200>
 8005586:	e00f      	b.n	80055a8 <UART_SetConfig+0x210>
 8005588:	2300      	movs	r3, #0
 800558a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800558e:	e082      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005590:	2302      	movs	r3, #2
 8005592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005596:	e07e      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005598:	2304      	movs	r3, #4
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800559e:	e07a      	b.n	8005696 <UART_SetConfig+0x2fe>
 80055a0:	2308      	movs	r3, #8
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a6:	e076      	b.n	8005696 <UART_SetConfig+0x2fe>
 80055a8:	2310      	movs	r3, #16
 80055aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ae:	e072      	b.n	8005696 <UART_SetConfig+0x2fe>
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a35      	ldr	r2, [pc, #212]	@ (800568c <UART_SetConfig+0x2f4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d12a      	bne.n	8005610 <UART_SetConfig+0x278>
 80055ba:	4b30      	ldr	r3, [pc, #192]	@ (800567c <UART_SetConfig+0x2e4>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055c8:	d01a      	beq.n	8005600 <UART_SetConfig+0x268>
 80055ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ce:	d81b      	bhi.n	8005608 <UART_SetConfig+0x270>
 80055d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055d4:	d00c      	beq.n	80055f0 <UART_SetConfig+0x258>
 80055d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055da:	d815      	bhi.n	8005608 <UART_SetConfig+0x270>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <UART_SetConfig+0x250>
 80055e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e4:	d008      	beq.n	80055f8 <UART_SetConfig+0x260>
 80055e6:	e00f      	b.n	8005608 <UART_SetConfig+0x270>
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ee:	e052      	b.n	8005696 <UART_SetConfig+0x2fe>
 80055f0:	2302      	movs	r3, #2
 80055f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f6:	e04e      	b.n	8005696 <UART_SetConfig+0x2fe>
 80055f8:	2304      	movs	r3, #4
 80055fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055fe:	e04a      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005600:	2308      	movs	r3, #8
 8005602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005606:	e046      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005608:	2310      	movs	r3, #16
 800560a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800560e:	e042      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a17      	ldr	r2, [pc, #92]	@ (8005674 <UART_SetConfig+0x2dc>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d13a      	bne.n	8005690 <UART_SetConfig+0x2f8>
 800561a:	4b18      	ldr	r3, [pc, #96]	@ (800567c <UART_SetConfig+0x2e4>)
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005620:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005624:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005628:	d01a      	beq.n	8005660 <UART_SetConfig+0x2c8>
 800562a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800562e:	d81b      	bhi.n	8005668 <UART_SetConfig+0x2d0>
 8005630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005634:	d00c      	beq.n	8005650 <UART_SetConfig+0x2b8>
 8005636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800563a:	d815      	bhi.n	8005668 <UART_SetConfig+0x2d0>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <UART_SetConfig+0x2b0>
 8005640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005644:	d008      	beq.n	8005658 <UART_SetConfig+0x2c0>
 8005646:	e00f      	b.n	8005668 <UART_SetConfig+0x2d0>
 8005648:	2300      	movs	r3, #0
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800564e:	e022      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005650:	2302      	movs	r3, #2
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005656:	e01e      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005658:	2304      	movs	r3, #4
 800565a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800565e:	e01a      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005660:	2308      	movs	r3, #8
 8005662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005666:	e016      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005668:	2310      	movs	r3, #16
 800566a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800566e:	e012      	b.n	8005696 <UART_SetConfig+0x2fe>
 8005670:	cfff69f3 	.word	0xcfff69f3
 8005674:	40008000 	.word	0x40008000
 8005678:	40013800 	.word	0x40013800
 800567c:	40021000 	.word	0x40021000
 8005680:	40004400 	.word	0x40004400
 8005684:	40004800 	.word	0x40004800
 8005688:	40004c00 	.word	0x40004c00
 800568c:	40005000 	.word	0x40005000
 8005690:	2310      	movs	r3, #16
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4aae      	ldr	r2, [pc, #696]	@ (8005954 <UART_SetConfig+0x5bc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	f040 8097 	bne.w	80057d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d823      	bhi.n	80056f2 <UART_SetConfig+0x35a>
 80056aa:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <UART_SetConfig+0x318>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056f3 	.word	0x080056f3
 80056b8:	080056dd 	.word	0x080056dd
 80056bc:	080056f3 	.word	0x080056f3
 80056c0:	080056e3 	.word	0x080056e3
 80056c4:	080056f3 	.word	0x080056f3
 80056c8:	080056f3 	.word	0x080056f3
 80056cc:	080056f3 	.word	0x080056f3
 80056d0:	080056eb 	.word	0x080056eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d4:	f7ff f83a 	bl	800474c <HAL_RCC_GetPCLK1Freq>
 80056d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056da:	e010      	b.n	80056fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056dc:	4b9e      	ldr	r3, [pc, #632]	@ (8005958 <UART_SetConfig+0x5c0>)
 80056de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056e0:	e00d      	b.n	80056fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056e2:	f7fe ffc5 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 80056e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056e8:	e009      	b.n	80056fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056f0:	e005      	b.n	80056fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 8130 	beq.w	8005966 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570a:	4a94      	ldr	r2, [pc, #592]	@ (800595c <UART_SetConfig+0x5c4>)
 800570c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005710:	461a      	mov	r2, r3
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	fbb3 f3f2 	udiv	r3, r3, r2
 8005718:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	4613      	mov	r3, r2
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	4413      	add	r3, r2
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	429a      	cmp	r2, r3
 8005728:	d305      	bcc.n	8005736 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	429a      	cmp	r2, r3
 8005734:	d903      	bls.n	800573e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800573c:	e113      	b.n	8005966 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	2200      	movs	r2, #0
 8005742:	60bb      	str	r3, [r7, #8]
 8005744:	60fa      	str	r2, [r7, #12]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	4a84      	ldr	r2, [pc, #528]	@ (800595c <UART_SetConfig+0x5c4>)
 800574c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005750:	b29b      	uxth	r3, r3
 8005752:	2200      	movs	r2, #0
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800575c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005760:	f7fa fdae 	bl	80002c0 <__aeabi_uldivmod>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4610      	mov	r0, r2
 800576a:	4619      	mov	r1, r3
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	020b      	lsls	r3, r1, #8
 8005776:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800577a:	0202      	lsls	r2, r0, #8
 800577c:	6979      	ldr	r1, [r7, #20]
 800577e:	6849      	ldr	r1, [r1, #4]
 8005780:	0849      	lsrs	r1, r1, #1
 8005782:	2000      	movs	r0, #0
 8005784:	460c      	mov	r4, r1
 8005786:	4605      	mov	r5, r0
 8005788:	eb12 0804 	adds.w	r8, r2, r4
 800578c:	eb43 0905 	adc.w	r9, r3, r5
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	469a      	mov	sl, r3
 8005798:	4693      	mov	fp, r2
 800579a:	4652      	mov	r2, sl
 800579c:	465b      	mov	r3, fp
 800579e:	4640      	mov	r0, r8
 80057a0:	4649      	mov	r1, r9
 80057a2:	f7fa fd8d 	bl	80002c0 <__aeabi_uldivmod>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4613      	mov	r3, r2
 80057ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057b4:	d308      	bcc.n	80057c8 <UART_SetConfig+0x430>
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057bc:	d204      	bcs.n	80057c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6a3a      	ldr	r2, [r7, #32]
 80057c4:	60da      	str	r2, [r3, #12]
 80057c6:	e0ce      	b.n	8005966 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057ce:	e0ca      	b.n	8005966 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057d8:	d166      	bne.n	80058a8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80057da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057de:	2b08      	cmp	r3, #8
 80057e0:	d827      	bhi.n	8005832 <UART_SetConfig+0x49a>
 80057e2:	a201      	add	r2, pc, #4	@ (adr r2, 80057e8 <UART_SetConfig+0x450>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	0800580d 	.word	0x0800580d
 80057ec:	08005815 	.word	0x08005815
 80057f0:	0800581d 	.word	0x0800581d
 80057f4:	08005833 	.word	0x08005833
 80057f8:	08005823 	.word	0x08005823
 80057fc:	08005833 	.word	0x08005833
 8005800:	08005833 	.word	0x08005833
 8005804:	08005833 	.word	0x08005833
 8005808:	0800582b 	.word	0x0800582b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800580c:	f7fe ff9e 	bl	800474c <HAL_RCC_GetPCLK1Freq>
 8005810:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005812:	e014      	b.n	800583e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005814:	f7fe ffb0 	bl	8004778 <HAL_RCC_GetPCLK2Freq>
 8005818:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800581a:	e010      	b.n	800583e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800581c:	4b4e      	ldr	r3, [pc, #312]	@ (8005958 <UART_SetConfig+0x5c0>)
 800581e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005820:	e00d      	b.n	800583e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005822:	f7fe ff25 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 8005826:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005828:	e009      	b.n	800583e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800582a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005830:	e005      	b.n	800583e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800583c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8090 	beq.w	8005966 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	4a44      	ldr	r2, [pc, #272]	@ (800595c <UART_SetConfig+0x5c4>)
 800584c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005850:	461a      	mov	r2, r3
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	fbb3 f3f2 	udiv	r3, r3, r2
 8005858:	005a      	lsls	r2, r3, #1
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	441a      	add	r2, r3
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	fbb2 f3f3 	udiv	r3, r2, r3
 800586a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	2b0f      	cmp	r3, #15
 8005870:	d916      	bls.n	80058a0 <UART_SetConfig+0x508>
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005878:	d212      	bcs.n	80058a0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	b29b      	uxth	r3, r3
 800587e:	f023 030f 	bic.w	r3, r3, #15
 8005882:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	085b      	lsrs	r3, r3, #1
 8005888:	b29b      	uxth	r3, r3
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	b29a      	uxth	r2, r3
 8005890:	8bfb      	ldrh	r3, [r7, #30]
 8005892:	4313      	orrs	r3, r2
 8005894:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	8bfa      	ldrh	r2, [r7, #30]
 800589c:	60da      	str	r2, [r3, #12]
 800589e:	e062      	b.n	8005966 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058a6:	e05e      	b.n	8005966 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d828      	bhi.n	8005902 <UART_SetConfig+0x56a>
 80058b0:	a201      	add	r2, pc, #4	@ (adr r2, 80058b8 <UART_SetConfig+0x520>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	080058dd 	.word	0x080058dd
 80058bc:	080058e5 	.word	0x080058e5
 80058c0:	080058ed 	.word	0x080058ed
 80058c4:	08005903 	.word	0x08005903
 80058c8:	080058f3 	.word	0x080058f3
 80058cc:	08005903 	.word	0x08005903
 80058d0:	08005903 	.word	0x08005903
 80058d4:	08005903 	.word	0x08005903
 80058d8:	080058fb 	.word	0x080058fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058dc:	f7fe ff36 	bl	800474c <HAL_RCC_GetPCLK1Freq>
 80058e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058e2:	e014      	b.n	800590e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e4:	f7fe ff48 	bl	8004778 <HAL_RCC_GetPCLK2Freq>
 80058e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058ea:	e010      	b.n	800590e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <UART_SetConfig+0x5c0>)
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058f0:	e00d      	b.n	800590e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f2:	f7fe febd 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 80058f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058f8:	e009      	b.n	800590e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005900:	e005      	b.n	800590e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800590c:	bf00      	nop
    }

    if (pclk != 0U)
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	d028      	beq.n	8005966 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	4a10      	ldr	r2, [pc, #64]	@ (800595c <UART_SetConfig+0x5c4>)
 800591a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800591e:	461a      	mov	r2, r3
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	fbb3 f2f2 	udiv	r2, r3, r2
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	085b      	lsrs	r3, r3, #1
 800592c:	441a      	add	r2, r3
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	fbb2 f3f3 	udiv	r3, r2, r3
 8005936:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	2b0f      	cmp	r3, #15
 800593c:	d910      	bls.n	8005960 <UART_SetConfig+0x5c8>
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005944:	d20c      	bcs.n	8005960 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	b29a      	uxth	r2, r3
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60da      	str	r2, [r3, #12]
 8005950:	e009      	b.n	8005966 <UART_SetConfig+0x5ce>
 8005952:	bf00      	nop
 8005954:	40008000 	.word	0x40008000
 8005958:	00f42400 	.word	0x00f42400
 800595c:	0800701c 	.word	0x0800701c
      }
      else
      {
        ret = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2201      	movs	r2, #1
 800596a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2201      	movs	r2, #1
 8005972:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2200      	movs	r2, #0
 800597a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2200      	movs	r2, #0
 8005980:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005982:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005986:	4618      	mov	r0, r3
 8005988:	3730      	adds	r7, #48	@ 0x30
 800598a:	46bd      	mov	sp, r7
 800598c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01a      	beq.n	8005aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a8e:	d10a      	bne.n	8005aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	605a      	str	r2, [r3, #4]
  }
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b098      	sub	sp, #96	@ 0x60
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ae4:	f7fb fd4e 	bl	8001584 <HAL_GetTick>
 8005ae8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d12f      	bne.n	8005b58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005af8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b00:	2200      	movs	r2, #0
 8005b02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f88e 	bl	8005c28 <UART_WaitOnFlagUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d022      	beq.n	8005b58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b26:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e6      	bne.n	8005b12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e063      	b.n	8005c20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d149      	bne.n	8005bfa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f857 	bl	8005c28 <UART_WaitOnFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d03c      	beq.n	8005bfa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ba0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e6      	bne.n	8005b80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f023 0301 	bic.w	r3, r3, #1
 8005bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3308      	adds	r3, #8
 8005bd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bd2:	61fa      	str	r2, [r7, #28]
 8005bd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	69b9      	ldr	r1, [r7, #24]
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	617b      	str	r3, [r7, #20]
   return(result);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e5      	bne.n	8005bb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e012      	b.n	8005c20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3758      	adds	r7, #88	@ 0x58
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	4613      	mov	r3, r2
 8005c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c38:	e04f      	b.n	8005cda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d04b      	beq.n	8005cda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c42:	f7fb fc9f 	bl	8001584 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d302      	bcc.n	8005c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e04e      	b.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d037      	beq.n	8005cda <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b80      	cmp	r3, #128	@ 0x80
 8005c6e:	d034      	beq.n	8005cda <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b40      	cmp	r3, #64	@ 0x40
 8005c74:	d031      	beq.n	8005cda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d110      	bne.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2208      	movs	r2, #8
 8005c8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f838 	bl	8005d02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2208      	movs	r2, #8
 8005c96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e029      	b.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cb4:	d111      	bne.n	8005cda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f81e 	bl	8005d02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e00f      	b.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	bf0c      	ite	eq
 8005cea:	2301      	moveq	r3, #1
 8005cec:	2300      	movne	r3, #0
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d0a0      	beq.n	8005c3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b095      	sub	sp, #84	@ 0x54
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e6      	bne.n	8005d0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3308      	adds	r3, #8
 8005d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e3      	bne.n	8005d3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d118      	bne.n	8005dae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f023 0310 	bic.w	r3, r3, #16
 8005d90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6979      	ldr	r1, [r7, #20]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	613b      	str	r3, [r7, #16]
   return(result);
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e6      	bne.n	8005d7c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005dc2:	bf00      	nop
 8005dc4:	3754      	adds	r7, #84	@ 0x54
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e027      	b.n	8005e34 <HAL_UARTEx_DisableFifoMode+0x66>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2224      	movs	r2, #36	@ 0x24
 8005df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0201 	bic.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e02d      	b.n	8005eb4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2224      	movs	r2, #36	@ 0x24
 8005e64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0201 	bic.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f84f 	bl	8005f38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e02d      	b.n	8005f30 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2224      	movs	r2, #36	@ 0x24
 8005ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f811 	bl	8005f38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d108      	bne.n	8005f5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f58:	e031      	b.n	8005fbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f5e:	2308      	movs	r3, #8
 8005f60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	0e5b      	lsrs	r3, r3, #25
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	0f5b      	lsrs	r3, r3, #29
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f82:	7bbb      	ldrb	r3, [r7, #14]
 8005f84:	7b3a      	ldrb	r2, [r7, #12]
 8005f86:	4911      	ldr	r1, [pc, #68]	@ (8005fcc <UARTEx_SetNbDataToProcess+0x94>)
 8005f88:	5c8a      	ldrb	r2, [r1, r2]
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f8e:	7b3a      	ldrb	r2, [r7, #12]
 8005f90:	490f      	ldr	r1, [pc, #60]	@ (8005fd0 <UARTEx_SetNbDataToProcess+0x98>)
 8005f92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f94:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	7b7a      	ldrb	r2, [r7, #13]
 8005fa4:	4909      	ldr	r1, [pc, #36]	@ (8005fcc <UARTEx_SetNbDataToProcess+0x94>)
 8005fa6:	5c8a      	ldrb	r2, [r1, r2]
 8005fa8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fac:	7b7a      	ldrb	r2, [r7, #13]
 8005fae:	4908      	ldr	r1, [pc, #32]	@ (8005fd0 <UARTEx_SetNbDataToProcess+0x98>)
 8005fb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005fbe:	bf00      	nop
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	08007034 	.word	0x08007034
 8005fd0:	0800703c 	.word	0x0800703c

08005fd4 <srand>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4b10      	ldr	r3, [pc, #64]	@ (8006018 <srand+0x44>)
 8005fd8:	681d      	ldr	r5, [r3, #0]
 8005fda:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005fdc:	4604      	mov	r4, r0
 8005fde:	b9b3      	cbnz	r3, 800600e <srand+0x3a>
 8005fe0:	2018      	movs	r0, #24
 8005fe2:	f000 fa4d 	bl	8006480 <malloc>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	6328      	str	r0, [r5, #48]	@ 0x30
 8005fea:	b920      	cbnz	r0, 8005ff6 <srand+0x22>
 8005fec:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <srand+0x48>)
 8005fee:	480c      	ldr	r0, [pc, #48]	@ (8006020 <srand+0x4c>)
 8005ff0:	2146      	movs	r1, #70	@ 0x46
 8005ff2:	f000 f9dd 	bl	80063b0 <__assert_func>
 8005ff6:	490b      	ldr	r1, [pc, #44]	@ (8006024 <srand+0x50>)
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8006028 <srand+0x54>)
 8005ffa:	e9c0 1300 	strd	r1, r3, [r0]
 8005ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800602c <srand+0x58>)
 8006000:	6083      	str	r3, [r0, #8]
 8006002:	230b      	movs	r3, #11
 8006004:	8183      	strh	r3, [r0, #12]
 8006006:	2100      	movs	r1, #0
 8006008:	2001      	movs	r0, #1
 800600a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800600e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006010:	2200      	movs	r2, #0
 8006012:	611c      	str	r4, [r3, #16]
 8006014:	615a      	str	r2, [r3, #20]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	20000020 	.word	0x20000020
 800601c:	08007044 	.word	0x08007044
 8006020:	0800705b 	.word	0x0800705b
 8006024:	abcd330e 	.word	0xabcd330e
 8006028:	e66d1234 	.word	0xe66d1234
 800602c:	0005deec 	.word	0x0005deec

08006030 <rand>:
 8006030:	4b16      	ldr	r3, [pc, #88]	@ (800608c <rand+0x5c>)
 8006032:	b510      	push	{r4, lr}
 8006034:	681c      	ldr	r4, [r3, #0]
 8006036:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006038:	b9b3      	cbnz	r3, 8006068 <rand+0x38>
 800603a:	2018      	movs	r0, #24
 800603c:	f000 fa20 	bl	8006480 <malloc>
 8006040:	4602      	mov	r2, r0
 8006042:	6320      	str	r0, [r4, #48]	@ 0x30
 8006044:	b920      	cbnz	r0, 8006050 <rand+0x20>
 8006046:	4b12      	ldr	r3, [pc, #72]	@ (8006090 <rand+0x60>)
 8006048:	4812      	ldr	r0, [pc, #72]	@ (8006094 <rand+0x64>)
 800604a:	2152      	movs	r1, #82	@ 0x52
 800604c:	f000 f9b0 	bl	80063b0 <__assert_func>
 8006050:	4911      	ldr	r1, [pc, #68]	@ (8006098 <rand+0x68>)
 8006052:	4b12      	ldr	r3, [pc, #72]	@ (800609c <rand+0x6c>)
 8006054:	e9c0 1300 	strd	r1, r3, [r0]
 8006058:	4b11      	ldr	r3, [pc, #68]	@ (80060a0 <rand+0x70>)
 800605a:	6083      	str	r3, [r0, #8]
 800605c:	230b      	movs	r3, #11
 800605e:	8183      	strh	r3, [r0, #12]
 8006060:	2100      	movs	r1, #0
 8006062:	2001      	movs	r0, #1
 8006064:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006068:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800606a:	480e      	ldr	r0, [pc, #56]	@ (80060a4 <rand+0x74>)
 800606c:	690b      	ldr	r3, [r1, #16]
 800606e:	694c      	ldr	r4, [r1, #20]
 8006070:	4a0d      	ldr	r2, [pc, #52]	@ (80060a8 <rand+0x78>)
 8006072:	4358      	muls	r0, r3
 8006074:	fb02 0004 	mla	r0, r2, r4, r0
 8006078:	fba3 3202 	umull	r3, r2, r3, r2
 800607c:	3301      	adds	r3, #1
 800607e:	eb40 0002 	adc.w	r0, r0, r2
 8006082:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006086:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800608a:	bd10      	pop	{r4, pc}
 800608c:	20000020 	.word	0x20000020
 8006090:	08007044 	.word	0x08007044
 8006094:	0800705b 	.word	0x0800705b
 8006098:	abcd330e 	.word	0xabcd330e
 800609c:	e66d1234 	.word	0xe66d1234
 80060a0:	0005deec 	.word	0x0005deec
 80060a4:	5851f42d 	.word	0x5851f42d
 80060a8:	4c957f2d 	.word	0x4c957f2d

080060ac <std>:
 80060ac:	2300      	movs	r3, #0
 80060ae:	b510      	push	{r4, lr}
 80060b0:	4604      	mov	r4, r0
 80060b2:	e9c0 3300 	strd	r3, r3, [r0]
 80060b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ba:	6083      	str	r3, [r0, #8]
 80060bc:	8181      	strh	r1, [r0, #12]
 80060be:	6643      	str	r3, [r0, #100]	@ 0x64
 80060c0:	81c2      	strh	r2, [r0, #14]
 80060c2:	6183      	str	r3, [r0, #24]
 80060c4:	4619      	mov	r1, r3
 80060c6:	2208      	movs	r2, #8
 80060c8:	305c      	adds	r0, #92	@ 0x5c
 80060ca:	f000 f8f4 	bl	80062b6 <memset>
 80060ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006104 <std+0x58>)
 80060d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80060d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006108 <std+0x5c>)
 80060d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060d6:	4b0d      	ldr	r3, [pc, #52]	@ (800610c <std+0x60>)
 80060d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <std+0x64>)
 80060dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80060de:	4b0d      	ldr	r3, [pc, #52]	@ (8006114 <std+0x68>)
 80060e0:	6224      	str	r4, [r4, #32]
 80060e2:	429c      	cmp	r4, r3
 80060e4:	d006      	beq.n	80060f4 <std+0x48>
 80060e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060ea:	4294      	cmp	r4, r2
 80060ec:	d002      	beq.n	80060f4 <std+0x48>
 80060ee:	33d0      	adds	r3, #208	@ 0xd0
 80060f0:	429c      	cmp	r4, r3
 80060f2:	d105      	bne.n	8006100 <std+0x54>
 80060f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060fc:	f000 b954 	b.w	80063a8 <__retarget_lock_init_recursive>
 8006100:	bd10      	pop	{r4, pc}
 8006102:	bf00      	nop
 8006104:	08006231 	.word	0x08006231
 8006108:	08006253 	.word	0x08006253
 800610c:	0800628b 	.word	0x0800628b
 8006110:	080062af 	.word	0x080062af
 8006114:	200003c8 	.word	0x200003c8

08006118 <stdio_exit_handler>:
 8006118:	4a02      	ldr	r2, [pc, #8]	@ (8006124 <stdio_exit_handler+0xc>)
 800611a:	4903      	ldr	r1, [pc, #12]	@ (8006128 <stdio_exit_handler+0x10>)
 800611c:	4803      	ldr	r0, [pc, #12]	@ (800612c <stdio_exit_handler+0x14>)
 800611e:	f000 b869 	b.w	80061f4 <_fwalk_sglue>
 8006122:	bf00      	nop
 8006124:	20000014 	.word	0x20000014
 8006128:	080066f5 	.word	0x080066f5
 800612c:	20000024 	.word	0x20000024

08006130 <cleanup_stdio>:
 8006130:	6841      	ldr	r1, [r0, #4]
 8006132:	4b0c      	ldr	r3, [pc, #48]	@ (8006164 <cleanup_stdio+0x34>)
 8006134:	4299      	cmp	r1, r3
 8006136:	b510      	push	{r4, lr}
 8006138:	4604      	mov	r4, r0
 800613a:	d001      	beq.n	8006140 <cleanup_stdio+0x10>
 800613c:	f000 fada 	bl	80066f4 <_fflush_r>
 8006140:	68a1      	ldr	r1, [r4, #8]
 8006142:	4b09      	ldr	r3, [pc, #36]	@ (8006168 <cleanup_stdio+0x38>)
 8006144:	4299      	cmp	r1, r3
 8006146:	d002      	beq.n	800614e <cleanup_stdio+0x1e>
 8006148:	4620      	mov	r0, r4
 800614a:	f000 fad3 	bl	80066f4 <_fflush_r>
 800614e:	68e1      	ldr	r1, [r4, #12]
 8006150:	4b06      	ldr	r3, [pc, #24]	@ (800616c <cleanup_stdio+0x3c>)
 8006152:	4299      	cmp	r1, r3
 8006154:	d004      	beq.n	8006160 <cleanup_stdio+0x30>
 8006156:	4620      	mov	r0, r4
 8006158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800615c:	f000 baca 	b.w	80066f4 <_fflush_r>
 8006160:	bd10      	pop	{r4, pc}
 8006162:	bf00      	nop
 8006164:	200003c8 	.word	0x200003c8
 8006168:	20000430 	.word	0x20000430
 800616c:	20000498 	.word	0x20000498

08006170 <global_stdio_init.part.0>:
 8006170:	b510      	push	{r4, lr}
 8006172:	4b0b      	ldr	r3, [pc, #44]	@ (80061a0 <global_stdio_init.part.0+0x30>)
 8006174:	4c0b      	ldr	r4, [pc, #44]	@ (80061a4 <global_stdio_init.part.0+0x34>)
 8006176:	4a0c      	ldr	r2, [pc, #48]	@ (80061a8 <global_stdio_init.part.0+0x38>)
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	4620      	mov	r0, r4
 800617c:	2200      	movs	r2, #0
 800617e:	2104      	movs	r1, #4
 8006180:	f7ff ff94 	bl	80060ac <std>
 8006184:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006188:	2201      	movs	r2, #1
 800618a:	2109      	movs	r1, #9
 800618c:	f7ff ff8e 	bl	80060ac <std>
 8006190:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006194:	2202      	movs	r2, #2
 8006196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800619a:	2112      	movs	r1, #18
 800619c:	f7ff bf86 	b.w	80060ac <std>
 80061a0:	20000500 	.word	0x20000500
 80061a4:	200003c8 	.word	0x200003c8
 80061a8:	08006119 	.word	0x08006119

080061ac <__sfp_lock_acquire>:
 80061ac:	4801      	ldr	r0, [pc, #4]	@ (80061b4 <__sfp_lock_acquire+0x8>)
 80061ae:	f000 b8fc 	b.w	80063aa <__retarget_lock_acquire_recursive>
 80061b2:	bf00      	nop
 80061b4:	20000509 	.word	0x20000509

080061b8 <__sfp_lock_release>:
 80061b8:	4801      	ldr	r0, [pc, #4]	@ (80061c0 <__sfp_lock_release+0x8>)
 80061ba:	f000 b8f7 	b.w	80063ac <__retarget_lock_release_recursive>
 80061be:	bf00      	nop
 80061c0:	20000509 	.word	0x20000509

080061c4 <__sinit>:
 80061c4:	b510      	push	{r4, lr}
 80061c6:	4604      	mov	r4, r0
 80061c8:	f7ff fff0 	bl	80061ac <__sfp_lock_acquire>
 80061cc:	6a23      	ldr	r3, [r4, #32]
 80061ce:	b11b      	cbz	r3, 80061d8 <__sinit+0x14>
 80061d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d4:	f7ff bff0 	b.w	80061b8 <__sfp_lock_release>
 80061d8:	4b04      	ldr	r3, [pc, #16]	@ (80061ec <__sinit+0x28>)
 80061da:	6223      	str	r3, [r4, #32]
 80061dc:	4b04      	ldr	r3, [pc, #16]	@ (80061f0 <__sinit+0x2c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1f5      	bne.n	80061d0 <__sinit+0xc>
 80061e4:	f7ff ffc4 	bl	8006170 <global_stdio_init.part.0>
 80061e8:	e7f2      	b.n	80061d0 <__sinit+0xc>
 80061ea:	bf00      	nop
 80061ec:	08006131 	.word	0x08006131
 80061f0:	20000500 	.word	0x20000500

080061f4 <_fwalk_sglue>:
 80061f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f8:	4607      	mov	r7, r0
 80061fa:	4688      	mov	r8, r1
 80061fc:	4614      	mov	r4, r2
 80061fe:	2600      	movs	r6, #0
 8006200:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006204:	f1b9 0901 	subs.w	r9, r9, #1
 8006208:	d505      	bpl.n	8006216 <_fwalk_sglue+0x22>
 800620a:	6824      	ldr	r4, [r4, #0]
 800620c:	2c00      	cmp	r4, #0
 800620e:	d1f7      	bne.n	8006200 <_fwalk_sglue+0xc>
 8006210:	4630      	mov	r0, r6
 8006212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006216:	89ab      	ldrh	r3, [r5, #12]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d907      	bls.n	800622c <_fwalk_sglue+0x38>
 800621c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006220:	3301      	adds	r3, #1
 8006222:	d003      	beq.n	800622c <_fwalk_sglue+0x38>
 8006224:	4629      	mov	r1, r5
 8006226:	4638      	mov	r0, r7
 8006228:	47c0      	blx	r8
 800622a:	4306      	orrs	r6, r0
 800622c:	3568      	adds	r5, #104	@ 0x68
 800622e:	e7e9      	b.n	8006204 <_fwalk_sglue+0x10>

08006230 <__sread>:
 8006230:	b510      	push	{r4, lr}
 8006232:	460c      	mov	r4, r1
 8006234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006238:	f000 f868 	bl	800630c <_read_r>
 800623c:	2800      	cmp	r0, #0
 800623e:	bfab      	itete	ge
 8006240:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006242:	89a3      	ldrhlt	r3, [r4, #12]
 8006244:	181b      	addge	r3, r3, r0
 8006246:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800624a:	bfac      	ite	ge
 800624c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800624e:	81a3      	strhlt	r3, [r4, #12]
 8006250:	bd10      	pop	{r4, pc}

08006252 <__swrite>:
 8006252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006256:	461f      	mov	r7, r3
 8006258:	898b      	ldrh	r3, [r1, #12]
 800625a:	05db      	lsls	r3, r3, #23
 800625c:	4605      	mov	r5, r0
 800625e:	460c      	mov	r4, r1
 8006260:	4616      	mov	r6, r2
 8006262:	d505      	bpl.n	8006270 <__swrite+0x1e>
 8006264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006268:	2302      	movs	r3, #2
 800626a:	2200      	movs	r2, #0
 800626c:	f000 f83c 	bl	80062e8 <_lseek_r>
 8006270:	89a3      	ldrh	r3, [r4, #12]
 8006272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006276:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800627a:	81a3      	strh	r3, [r4, #12]
 800627c:	4632      	mov	r2, r6
 800627e:	463b      	mov	r3, r7
 8006280:	4628      	mov	r0, r5
 8006282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006286:	f000 b853 	b.w	8006330 <_write_r>

0800628a <__sseek>:
 800628a:	b510      	push	{r4, lr}
 800628c:	460c      	mov	r4, r1
 800628e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006292:	f000 f829 	bl	80062e8 <_lseek_r>
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	bf15      	itete	ne
 800629c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800629e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062a6:	81a3      	strheq	r3, [r4, #12]
 80062a8:	bf18      	it	ne
 80062aa:	81a3      	strhne	r3, [r4, #12]
 80062ac:	bd10      	pop	{r4, pc}

080062ae <__sclose>:
 80062ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b2:	f000 b809 	b.w	80062c8 <_close_r>

080062b6 <memset>:
 80062b6:	4402      	add	r2, r0
 80062b8:	4603      	mov	r3, r0
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d100      	bne.n	80062c0 <memset+0xa>
 80062be:	4770      	bx	lr
 80062c0:	f803 1b01 	strb.w	r1, [r3], #1
 80062c4:	e7f9      	b.n	80062ba <memset+0x4>
	...

080062c8 <_close_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4d06      	ldr	r5, [pc, #24]	@ (80062e4 <_close_r+0x1c>)
 80062cc:	2300      	movs	r3, #0
 80062ce:	4604      	mov	r4, r0
 80062d0:	4608      	mov	r0, r1
 80062d2:	602b      	str	r3, [r5, #0]
 80062d4:	f7fb f84c 	bl	8001370 <_close>
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	d102      	bne.n	80062e2 <_close_r+0x1a>
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	b103      	cbz	r3, 80062e2 <_close_r+0x1a>
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
 80062e4:	20000504 	.word	0x20000504

080062e8 <_lseek_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4d07      	ldr	r5, [pc, #28]	@ (8006308 <_lseek_r+0x20>)
 80062ec:	4604      	mov	r4, r0
 80062ee:	4608      	mov	r0, r1
 80062f0:	4611      	mov	r1, r2
 80062f2:	2200      	movs	r2, #0
 80062f4:	602a      	str	r2, [r5, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	f7fb f861 	bl	80013be <_lseek>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d102      	bne.n	8006306 <_lseek_r+0x1e>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	b103      	cbz	r3, 8006306 <_lseek_r+0x1e>
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	bd38      	pop	{r3, r4, r5, pc}
 8006308:	20000504 	.word	0x20000504

0800630c <_read_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	4d07      	ldr	r5, [pc, #28]	@ (800632c <_read_r+0x20>)
 8006310:	4604      	mov	r4, r0
 8006312:	4608      	mov	r0, r1
 8006314:	4611      	mov	r1, r2
 8006316:	2200      	movs	r2, #0
 8006318:	602a      	str	r2, [r5, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	f7fa ffef 	bl	80012fe <_read>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_read_r+0x1e>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_read_r+0x1e>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	20000504 	.word	0x20000504

08006330 <_write_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4d07      	ldr	r5, [pc, #28]	@ (8006350 <_write_r+0x20>)
 8006334:	4604      	mov	r4, r0
 8006336:	4608      	mov	r0, r1
 8006338:	4611      	mov	r1, r2
 800633a:	2200      	movs	r2, #0
 800633c:	602a      	str	r2, [r5, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	f7fa fffa 	bl	8001338 <_write>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d102      	bne.n	800634e <_write_r+0x1e>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	b103      	cbz	r3, 800634e <_write_r+0x1e>
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	20000504 	.word	0x20000504

08006354 <__errno>:
 8006354:	4b01      	ldr	r3, [pc, #4]	@ (800635c <__errno+0x8>)
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000020 	.word	0x20000020

08006360 <__libc_init_array>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	4d0d      	ldr	r5, [pc, #52]	@ (8006398 <__libc_init_array+0x38>)
 8006364:	4c0d      	ldr	r4, [pc, #52]	@ (800639c <__libc_init_array+0x3c>)
 8006366:	1b64      	subs	r4, r4, r5
 8006368:	10a4      	asrs	r4, r4, #2
 800636a:	2600      	movs	r6, #0
 800636c:	42a6      	cmp	r6, r4
 800636e:	d109      	bne.n	8006384 <__libc_init_array+0x24>
 8006370:	4d0b      	ldr	r5, [pc, #44]	@ (80063a0 <__libc_init_array+0x40>)
 8006372:	4c0c      	ldr	r4, [pc, #48]	@ (80063a4 <__libc_init_array+0x44>)
 8006374:	f000 fe3a 	bl	8006fec <_init>
 8006378:	1b64      	subs	r4, r4, r5
 800637a:	10a4      	asrs	r4, r4, #2
 800637c:	2600      	movs	r6, #0
 800637e:	42a6      	cmp	r6, r4
 8006380:	d105      	bne.n	800638e <__libc_init_array+0x2e>
 8006382:	bd70      	pop	{r4, r5, r6, pc}
 8006384:	f855 3b04 	ldr.w	r3, [r5], #4
 8006388:	4798      	blx	r3
 800638a:	3601      	adds	r6, #1
 800638c:	e7ee      	b.n	800636c <__libc_init_array+0xc>
 800638e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006392:	4798      	blx	r3
 8006394:	3601      	adds	r6, #1
 8006396:	e7f2      	b.n	800637e <__libc_init_array+0x1e>
 8006398:	0800712c 	.word	0x0800712c
 800639c:	0800712c 	.word	0x0800712c
 80063a0:	0800712c 	.word	0x0800712c
 80063a4:	08007130 	.word	0x08007130

080063a8 <__retarget_lock_init_recursive>:
 80063a8:	4770      	bx	lr

080063aa <__retarget_lock_acquire_recursive>:
 80063aa:	4770      	bx	lr

080063ac <__retarget_lock_release_recursive>:
 80063ac:	4770      	bx	lr
	...

080063b0 <__assert_func>:
 80063b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063b2:	4614      	mov	r4, r2
 80063b4:	461a      	mov	r2, r3
 80063b6:	4b09      	ldr	r3, [pc, #36]	@ (80063dc <__assert_func+0x2c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4605      	mov	r5, r0
 80063bc:	68d8      	ldr	r0, [r3, #12]
 80063be:	b954      	cbnz	r4, 80063d6 <__assert_func+0x26>
 80063c0:	4b07      	ldr	r3, [pc, #28]	@ (80063e0 <__assert_func+0x30>)
 80063c2:	461c      	mov	r4, r3
 80063c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063c8:	9100      	str	r1, [sp, #0]
 80063ca:	462b      	mov	r3, r5
 80063cc:	4905      	ldr	r1, [pc, #20]	@ (80063e4 <__assert_func+0x34>)
 80063ce:	f000 f9b9 	bl	8006744 <fiprintf>
 80063d2:	f000 f9d9 	bl	8006788 <abort>
 80063d6:	4b04      	ldr	r3, [pc, #16]	@ (80063e8 <__assert_func+0x38>)
 80063d8:	e7f4      	b.n	80063c4 <__assert_func+0x14>
 80063da:	bf00      	nop
 80063dc:	20000020 	.word	0x20000020
 80063e0:	080070ee 	.word	0x080070ee
 80063e4:	080070c0 	.word	0x080070c0
 80063e8:	080070b3 	.word	0x080070b3

080063ec <_free_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4605      	mov	r5, r0
 80063f0:	2900      	cmp	r1, #0
 80063f2:	d041      	beq.n	8006478 <_free_r+0x8c>
 80063f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063f8:	1f0c      	subs	r4, r1, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	bfb8      	it	lt
 80063fe:	18e4      	addlt	r4, r4, r3
 8006400:	f000 f8e8 	bl	80065d4 <__malloc_lock>
 8006404:	4a1d      	ldr	r2, [pc, #116]	@ (800647c <_free_r+0x90>)
 8006406:	6813      	ldr	r3, [r2, #0]
 8006408:	b933      	cbnz	r3, 8006418 <_free_r+0x2c>
 800640a:	6063      	str	r3, [r4, #4]
 800640c:	6014      	str	r4, [r2, #0]
 800640e:	4628      	mov	r0, r5
 8006410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006414:	f000 b8e4 	b.w	80065e0 <__malloc_unlock>
 8006418:	42a3      	cmp	r3, r4
 800641a:	d908      	bls.n	800642e <_free_r+0x42>
 800641c:	6820      	ldr	r0, [r4, #0]
 800641e:	1821      	adds	r1, r4, r0
 8006420:	428b      	cmp	r3, r1
 8006422:	bf01      	itttt	eq
 8006424:	6819      	ldreq	r1, [r3, #0]
 8006426:	685b      	ldreq	r3, [r3, #4]
 8006428:	1809      	addeq	r1, r1, r0
 800642a:	6021      	streq	r1, [r4, #0]
 800642c:	e7ed      	b.n	800640a <_free_r+0x1e>
 800642e:	461a      	mov	r2, r3
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	b10b      	cbz	r3, 8006438 <_free_r+0x4c>
 8006434:	42a3      	cmp	r3, r4
 8006436:	d9fa      	bls.n	800642e <_free_r+0x42>
 8006438:	6811      	ldr	r1, [r2, #0]
 800643a:	1850      	adds	r0, r2, r1
 800643c:	42a0      	cmp	r0, r4
 800643e:	d10b      	bne.n	8006458 <_free_r+0x6c>
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	4401      	add	r1, r0
 8006444:	1850      	adds	r0, r2, r1
 8006446:	4283      	cmp	r3, r0
 8006448:	6011      	str	r1, [r2, #0]
 800644a:	d1e0      	bne.n	800640e <_free_r+0x22>
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	6053      	str	r3, [r2, #4]
 8006452:	4408      	add	r0, r1
 8006454:	6010      	str	r0, [r2, #0]
 8006456:	e7da      	b.n	800640e <_free_r+0x22>
 8006458:	d902      	bls.n	8006460 <_free_r+0x74>
 800645a:	230c      	movs	r3, #12
 800645c:	602b      	str	r3, [r5, #0]
 800645e:	e7d6      	b.n	800640e <_free_r+0x22>
 8006460:	6820      	ldr	r0, [r4, #0]
 8006462:	1821      	adds	r1, r4, r0
 8006464:	428b      	cmp	r3, r1
 8006466:	bf04      	itt	eq
 8006468:	6819      	ldreq	r1, [r3, #0]
 800646a:	685b      	ldreq	r3, [r3, #4]
 800646c:	6063      	str	r3, [r4, #4]
 800646e:	bf04      	itt	eq
 8006470:	1809      	addeq	r1, r1, r0
 8006472:	6021      	streq	r1, [r4, #0]
 8006474:	6054      	str	r4, [r2, #4]
 8006476:	e7ca      	b.n	800640e <_free_r+0x22>
 8006478:	bd38      	pop	{r3, r4, r5, pc}
 800647a:	bf00      	nop
 800647c:	20000510 	.word	0x20000510

08006480 <malloc>:
 8006480:	4b02      	ldr	r3, [pc, #8]	@ (800648c <malloc+0xc>)
 8006482:	4601      	mov	r1, r0
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	f000 b825 	b.w	80064d4 <_malloc_r>
 800648a:	bf00      	nop
 800648c:	20000020 	.word	0x20000020

08006490 <sbrk_aligned>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	4e0f      	ldr	r6, [pc, #60]	@ (80064d0 <sbrk_aligned+0x40>)
 8006494:	460c      	mov	r4, r1
 8006496:	6831      	ldr	r1, [r6, #0]
 8006498:	4605      	mov	r5, r0
 800649a:	b911      	cbnz	r1, 80064a2 <sbrk_aligned+0x12>
 800649c:	f000 f964 	bl	8006768 <_sbrk_r>
 80064a0:	6030      	str	r0, [r6, #0]
 80064a2:	4621      	mov	r1, r4
 80064a4:	4628      	mov	r0, r5
 80064a6:	f000 f95f 	bl	8006768 <_sbrk_r>
 80064aa:	1c43      	adds	r3, r0, #1
 80064ac:	d103      	bne.n	80064b6 <sbrk_aligned+0x26>
 80064ae:	f04f 34ff 	mov.w	r4, #4294967295
 80064b2:	4620      	mov	r0, r4
 80064b4:	bd70      	pop	{r4, r5, r6, pc}
 80064b6:	1cc4      	adds	r4, r0, #3
 80064b8:	f024 0403 	bic.w	r4, r4, #3
 80064bc:	42a0      	cmp	r0, r4
 80064be:	d0f8      	beq.n	80064b2 <sbrk_aligned+0x22>
 80064c0:	1a21      	subs	r1, r4, r0
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 f950 	bl	8006768 <_sbrk_r>
 80064c8:	3001      	adds	r0, #1
 80064ca:	d1f2      	bne.n	80064b2 <sbrk_aligned+0x22>
 80064cc:	e7ef      	b.n	80064ae <sbrk_aligned+0x1e>
 80064ce:	bf00      	nop
 80064d0:	2000050c 	.word	0x2000050c

080064d4 <_malloc_r>:
 80064d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d8:	1ccd      	adds	r5, r1, #3
 80064da:	f025 0503 	bic.w	r5, r5, #3
 80064de:	3508      	adds	r5, #8
 80064e0:	2d0c      	cmp	r5, #12
 80064e2:	bf38      	it	cc
 80064e4:	250c      	movcc	r5, #12
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	4606      	mov	r6, r0
 80064ea:	db01      	blt.n	80064f0 <_malloc_r+0x1c>
 80064ec:	42a9      	cmp	r1, r5
 80064ee:	d904      	bls.n	80064fa <_malloc_r+0x26>
 80064f0:	230c      	movs	r3, #12
 80064f2:	6033      	str	r3, [r6, #0]
 80064f4:	2000      	movs	r0, #0
 80064f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065d0 <_malloc_r+0xfc>
 80064fe:	f000 f869 	bl	80065d4 <__malloc_lock>
 8006502:	f8d8 3000 	ldr.w	r3, [r8]
 8006506:	461c      	mov	r4, r3
 8006508:	bb44      	cbnz	r4, 800655c <_malloc_r+0x88>
 800650a:	4629      	mov	r1, r5
 800650c:	4630      	mov	r0, r6
 800650e:	f7ff ffbf 	bl	8006490 <sbrk_aligned>
 8006512:	1c43      	adds	r3, r0, #1
 8006514:	4604      	mov	r4, r0
 8006516:	d158      	bne.n	80065ca <_malloc_r+0xf6>
 8006518:	f8d8 4000 	ldr.w	r4, [r8]
 800651c:	4627      	mov	r7, r4
 800651e:	2f00      	cmp	r7, #0
 8006520:	d143      	bne.n	80065aa <_malloc_r+0xd6>
 8006522:	2c00      	cmp	r4, #0
 8006524:	d04b      	beq.n	80065be <_malloc_r+0xea>
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	4639      	mov	r1, r7
 800652a:	4630      	mov	r0, r6
 800652c:	eb04 0903 	add.w	r9, r4, r3
 8006530:	f000 f91a 	bl	8006768 <_sbrk_r>
 8006534:	4581      	cmp	r9, r0
 8006536:	d142      	bne.n	80065be <_malloc_r+0xea>
 8006538:	6821      	ldr	r1, [r4, #0]
 800653a:	1a6d      	subs	r5, r5, r1
 800653c:	4629      	mov	r1, r5
 800653e:	4630      	mov	r0, r6
 8006540:	f7ff ffa6 	bl	8006490 <sbrk_aligned>
 8006544:	3001      	adds	r0, #1
 8006546:	d03a      	beq.n	80065be <_malloc_r+0xea>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	442b      	add	r3, r5
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	f8d8 3000 	ldr.w	r3, [r8]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	bb62      	cbnz	r2, 80065b0 <_malloc_r+0xdc>
 8006556:	f8c8 7000 	str.w	r7, [r8]
 800655a:	e00f      	b.n	800657c <_malloc_r+0xa8>
 800655c:	6822      	ldr	r2, [r4, #0]
 800655e:	1b52      	subs	r2, r2, r5
 8006560:	d420      	bmi.n	80065a4 <_malloc_r+0xd0>
 8006562:	2a0b      	cmp	r2, #11
 8006564:	d917      	bls.n	8006596 <_malloc_r+0xc2>
 8006566:	1961      	adds	r1, r4, r5
 8006568:	42a3      	cmp	r3, r4
 800656a:	6025      	str	r5, [r4, #0]
 800656c:	bf18      	it	ne
 800656e:	6059      	strne	r1, [r3, #4]
 8006570:	6863      	ldr	r3, [r4, #4]
 8006572:	bf08      	it	eq
 8006574:	f8c8 1000 	streq.w	r1, [r8]
 8006578:	5162      	str	r2, [r4, r5]
 800657a:	604b      	str	r3, [r1, #4]
 800657c:	4630      	mov	r0, r6
 800657e:	f000 f82f 	bl	80065e0 <__malloc_unlock>
 8006582:	f104 000b 	add.w	r0, r4, #11
 8006586:	1d23      	adds	r3, r4, #4
 8006588:	f020 0007 	bic.w	r0, r0, #7
 800658c:	1ac2      	subs	r2, r0, r3
 800658e:	bf1c      	itt	ne
 8006590:	1a1b      	subne	r3, r3, r0
 8006592:	50a3      	strne	r3, [r4, r2]
 8006594:	e7af      	b.n	80064f6 <_malloc_r+0x22>
 8006596:	6862      	ldr	r2, [r4, #4]
 8006598:	42a3      	cmp	r3, r4
 800659a:	bf0c      	ite	eq
 800659c:	f8c8 2000 	streq.w	r2, [r8]
 80065a0:	605a      	strne	r2, [r3, #4]
 80065a2:	e7eb      	b.n	800657c <_malloc_r+0xa8>
 80065a4:	4623      	mov	r3, r4
 80065a6:	6864      	ldr	r4, [r4, #4]
 80065a8:	e7ae      	b.n	8006508 <_malloc_r+0x34>
 80065aa:	463c      	mov	r4, r7
 80065ac:	687f      	ldr	r7, [r7, #4]
 80065ae:	e7b6      	b.n	800651e <_malloc_r+0x4a>
 80065b0:	461a      	mov	r2, r3
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	42a3      	cmp	r3, r4
 80065b6:	d1fb      	bne.n	80065b0 <_malloc_r+0xdc>
 80065b8:	2300      	movs	r3, #0
 80065ba:	6053      	str	r3, [r2, #4]
 80065bc:	e7de      	b.n	800657c <_malloc_r+0xa8>
 80065be:	230c      	movs	r3, #12
 80065c0:	6033      	str	r3, [r6, #0]
 80065c2:	4630      	mov	r0, r6
 80065c4:	f000 f80c 	bl	80065e0 <__malloc_unlock>
 80065c8:	e794      	b.n	80064f4 <_malloc_r+0x20>
 80065ca:	6005      	str	r5, [r0, #0]
 80065cc:	e7d6      	b.n	800657c <_malloc_r+0xa8>
 80065ce:	bf00      	nop
 80065d0:	20000510 	.word	0x20000510

080065d4 <__malloc_lock>:
 80065d4:	4801      	ldr	r0, [pc, #4]	@ (80065dc <__malloc_lock+0x8>)
 80065d6:	f7ff bee8 	b.w	80063aa <__retarget_lock_acquire_recursive>
 80065da:	bf00      	nop
 80065dc:	20000508 	.word	0x20000508

080065e0 <__malloc_unlock>:
 80065e0:	4801      	ldr	r0, [pc, #4]	@ (80065e8 <__malloc_unlock+0x8>)
 80065e2:	f7ff bee3 	b.w	80063ac <__retarget_lock_release_recursive>
 80065e6:	bf00      	nop
 80065e8:	20000508 	.word	0x20000508

080065ec <__sflush_r>:
 80065ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f4:	0716      	lsls	r6, r2, #28
 80065f6:	4605      	mov	r5, r0
 80065f8:	460c      	mov	r4, r1
 80065fa:	d454      	bmi.n	80066a6 <__sflush_r+0xba>
 80065fc:	684b      	ldr	r3, [r1, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	dc02      	bgt.n	8006608 <__sflush_r+0x1c>
 8006602:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006604:	2b00      	cmp	r3, #0
 8006606:	dd48      	ble.n	800669a <__sflush_r+0xae>
 8006608:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800660a:	2e00      	cmp	r6, #0
 800660c:	d045      	beq.n	800669a <__sflush_r+0xae>
 800660e:	2300      	movs	r3, #0
 8006610:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006614:	682f      	ldr	r7, [r5, #0]
 8006616:	6a21      	ldr	r1, [r4, #32]
 8006618:	602b      	str	r3, [r5, #0]
 800661a:	d030      	beq.n	800667e <__sflush_r+0x92>
 800661c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	0759      	lsls	r1, r3, #29
 8006622:	d505      	bpl.n	8006630 <__sflush_r+0x44>
 8006624:	6863      	ldr	r3, [r4, #4]
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800662a:	b10b      	cbz	r3, 8006630 <__sflush_r+0x44>
 800662c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800662e:	1ad2      	subs	r2, r2, r3
 8006630:	2300      	movs	r3, #0
 8006632:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006634:	6a21      	ldr	r1, [r4, #32]
 8006636:	4628      	mov	r0, r5
 8006638:	47b0      	blx	r6
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	d106      	bne.n	800664e <__sflush_r+0x62>
 8006640:	6829      	ldr	r1, [r5, #0]
 8006642:	291d      	cmp	r1, #29
 8006644:	d82b      	bhi.n	800669e <__sflush_r+0xb2>
 8006646:	4a2a      	ldr	r2, [pc, #168]	@ (80066f0 <__sflush_r+0x104>)
 8006648:	410a      	asrs	r2, r1
 800664a:	07d6      	lsls	r6, r2, #31
 800664c:	d427      	bmi.n	800669e <__sflush_r+0xb2>
 800664e:	2200      	movs	r2, #0
 8006650:	6062      	str	r2, [r4, #4]
 8006652:	04d9      	lsls	r1, r3, #19
 8006654:	6922      	ldr	r2, [r4, #16]
 8006656:	6022      	str	r2, [r4, #0]
 8006658:	d504      	bpl.n	8006664 <__sflush_r+0x78>
 800665a:	1c42      	adds	r2, r0, #1
 800665c:	d101      	bne.n	8006662 <__sflush_r+0x76>
 800665e:	682b      	ldr	r3, [r5, #0]
 8006660:	b903      	cbnz	r3, 8006664 <__sflush_r+0x78>
 8006662:	6560      	str	r0, [r4, #84]	@ 0x54
 8006664:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006666:	602f      	str	r7, [r5, #0]
 8006668:	b1b9      	cbz	r1, 800669a <__sflush_r+0xae>
 800666a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800666e:	4299      	cmp	r1, r3
 8006670:	d002      	beq.n	8006678 <__sflush_r+0x8c>
 8006672:	4628      	mov	r0, r5
 8006674:	f7ff feba 	bl	80063ec <_free_r>
 8006678:	2300      	movs	r3, #0
 800667a:	6363      	str	r3, [r4, #52]	@ 0x34
 800667c:	e00d      	b.n	800669a <__sflush_r+0xae>
 800667e:	2301      	movs	r3, #1
 8006680:	4628      	mov	r0, r5
 8006682:	47b0      	blx	r6
 8006684:	4602      	mov	r2, r0
 8006686:	1c50      	adds	r0, r2, #1
 8006688:	d1c9      	bne.n	800661e <__sflush_r+0x32>
 800668a:	682b      	ldr	r3, [r5, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0c6      	beq.n	800661e <__sflush_r+0x32>
 8006690:	2b1d      	cmp	r3, #29
 8006692:	d001      	beq.n	8006698 <__sflush_r+0xac>
 8006694:	2b16      	cmp	r3, #22
 8006696:	d11e      	bne.n	80066d6 <__sflush_r+0xea>
 8006698:	602f      	str	r7, [r5, #0]
 800669a:	2000      	movs	r0, #0
 800669c:	e022      	b.n	80066e4 <__sflush_r+0xf8>
 800669e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066a2:	b21b      	sxth	r3, r3
 80066a4:	e01b      	b.n	80066de <__sflush_r+0xf2>
 80066a6:	690f      	ldr	r7, [r1, #16]
 80066a8:	2f00      	cmp	r7, #0
 80066aa:	d0f6      	beq.n	800669a <__sflush_r+0xae>
 80066ac:	0793      	lsls	r3, r2, #30
 80066ae:	680e      	ldr	r6, [r1, #0]
 80066b0:	bf08      	it	eq
 80066b2:	694b      	ldreq	r3, [r1, #20]
 80066b4:	600f      	str	r7, [r1, #0]
 80066b6:	bf18      	it	ne
 80066b8:	2300      	movne	r3, #0
 80066ba:	eba6 0807 	sub.w	r8, r6, r7
 80066be:	608b      	str	r3, [r1, #8]
 80066c0:	f1b8 0f00 	cmp.w	r8, #0
 80066c4:	dde9      	ble.n	800669a <__sflush_r+0xae>
 80066c6:	6a21      	ldr	r1, [r4, #32]
 80066c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066ca:	4643      	mov	r3, r8
 80066cc:	463a      	mov	r2, r7
 80066ce:	4628      	mov	r0, r5
 80066d0:	47b0      	blx	r6
 80066d2:	2800      	cmp	r0, #0
 80066d4:	dc08      	bgt.n	80066e8 <__sflush_r+0xfc>
 80066d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	f04f 30ff 	mov.w	r0, #4294967295
 80066e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e8:	4407      	add	r7, r0
 80066ea:	eba8 0800 	sub.w	r8, r8, r0
 80066ee:	e7e7      	b.n	80066c0 <__sflush_r+0xd4>
 80066f0:	dfbffffe 	.word	0xdfbffffe

080066f4 <_fflush_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	690b      	ldr	r3, [r1, #16]
 80066f8:	4605      	mov	r5, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	b913      	cbnz	r3, 8006704 <_fflush_r+0x10>
 80066fe:	2500      	movs	r5, #0
 8006700:	4628      	mov	r0, r5
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	b118      	cbz	r0, 800670e <_fflush_r+0x1a>
 8006706:	6a03      	ldr	r3, [r0, #32]
 8006708:	b90b      	cbnz	r3, 800670e <_fflush_r+0x1a>
 800670a:	f7ff fd5b 	bl	80061c4 <__sinit>
 800670e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0f3      	beq.n	80066fe <_fflush_r+0xa>
 8006716:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006718:	07d0      	lsls	r0, r2, #31
 800671a:	d404      	bmi.n	8006726 <_fflush_r+0x32>
 800671c:	0599      	lsls	r1, r3, #22
 800671e:	d402      	bmi.n	8006726 <_fflush_r+0x32>
 8006720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006722:	f7ff fe42 	bl	80063aa <__retarget_lock_acquire_recursive>
 8006726:	4628      	mov	r0, r5
 8006728:	4621      	mov	r1, r4
 800672a:	f7ff ff5f 	bl	80065ec <__sflush_r>
 800672e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006730:	07da      	lsls	r2, r3, #31
 8006732:	4605      	mov	r5, r0
 8006734:	d4e4      	bmi.n	8006700 <_fflush_r+0xc>
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	059b      	lsls	r3, r3, #22
 800673a:	d4e1      	bmi.n	8006700 <_fflush_r+0xc>
 800673c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800673e:	f7ff fe35 	bl	80063ac <__retarget_lock_release_recursive>
 8006742:	e7dd      	b.n	8006700 <_fflush_r+0xc>

08006744 <fiprintf>:
 8006744:	b40e      	push	{r1, r2, r3}
 8006746:	b503      	push	{r0, r1, lr}
 8006748:	4601      	mov	r1, r0
 800674a:	ab03      	add	r3, sp, #12
 800674c:	4805      	ldr	r0, [pc, #20]	@ (8006764 <fiprintf+0x20>)
 800674e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006752:	6800      	ldr	r0, [r0, #0]
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	f000 f847 	bl	80067e8 <_vfiprintf_r>
 800675a:	b002      	add	sp, #8
 800675c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006760:	b003      	add	sp, #12
 8006762:	4770      	bx	lr
 8006764:	20000020 	.word	0x20000020

08006768 <_sbrk_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4d06      	ldr	r5, [pc, #24]	@ (8006784 <_sbrk_r+0x1c>)
 800676c:	2300      	movs	r3, #0
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fa fe30 	bl	80013d8 <_sbrk>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_sbrk_r+0x1a>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_sbrk_r+0x1a>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	20000504 	.word	0x20000504

08006788 <abort>:
 8006788:	b508      	push	{r3, lr}
 800678a:	2006      	movs	r0, #6
 800678c:	f000 fb8e 	bl	8006eac <raise>
 8006790:	2001      	movs	r0, #1
 8006792:	f7fa fda9 	bl	80012e8 <_exit>

08006796 <__sfputc_r>:
 8006796:	6893      	ldr	r3, [r2, #8]
 8006798:	3b01      	subs	r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	b410      	push	{r4}
 800679e:	6093      	str	r3, [r2, #8]
 80067a0:	da08      	bge.n	80067b4 <__sfputc_r+0x1e>
 80067a2:	6994      	ldr	r4, [r2, #24]
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	db01      	blt.n	80067ac <__sfputc_r+0x16>
 80067a8:	290a      	cmp	r1, #10
 80067aa:	d103      	bne.n	80067b4 <__sfputc_r+0x1e>
 80067ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067b0:	f000 bac0 	b.w	8006d34 <__swbuf_r>
 80067b4:	6813      	ldr	r3, [r2, #0]
 80067b6:	1c58      	adds	r0, r3, #1
 80067b8:	6010      	str	r0, [r2, #0]
 80067ba:	7019      	strb	r1, [r3, #0]
 80067bc:	4608      	mov	r0, r1
 80067be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <__sfputs_r>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	4606      	mov	r6, r0
 80067c8:	460f      	mov	r7, r1
 80067ca:	4614      	mov	r4, r2
 80067cc:	18d5      	adds	r5, r2, r3
 80067ce:	42ac      	cmp	r4, r5
 80067d0:	d101      	bne.n	80067d6 <__sfputs_r+0x12>
 80067d2:	2000      	movs	r0, #0
 80067d4:	e007      	b.n	80067e6 <__sfputs_r+0x22>
 80067d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067da:	463a      	mov	r2, r7
 80067dc:	4630      	mov	r0, r6
 80067de:	f7ff ffda 	bl	8006796 <__sfputc_r>
 80067e2:	1c43      	adds	r3, r0, #1
 80067e4:	d1f3      	bne.n	80067ce <__sfputs_r+0xa>
 80067e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080067e8 <_vfiprintf_r>:
 80067e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	460d      	mov	r5, r1
 80067ee:	b09d      	sub	sp, #116	@ 0x74
 80067f0:	4614      	mov	r4, r2
 80067f2:	4698      	mov	r8, r3
 80067f4:	4606      	mov	r6, r0
 80067f6:	b118      	cbz	r0, 8006800 <_vfiprintf_r+0x18>
 80067f8:	6a03      	ldr	r3, [r0, #32]
 80067fa:	b90b      	cbnz	r3, 8006800 <_vfiprintf_r+0x18>
 80067fc:	f7ff fce2 	bl	80061c4 <__sinit>
 8006800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006802:	07d9      	lsls	r1, r3, #31
 8006804:	d405      	bmi.n	8006812 <_vfiprintf_r+0x2a>
 8006806:	89ab      	ldrh	r3, [r5, #12]
 8006808:	059a      	lsls	r2, r3, #22
 800680a:	d402      	bmi.n	8006812 <_vfiprintf_r+0x2a>
 800680c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800680e:	f7ff fdcc 	bl	80063aa <__retarget_lock_acquire_recursive>
 8006812:	89ab      	ldrh	r3, [r5, #12]
 8006814:	071b      	lsls	r3, r3, #28
 8006816:	d501      	bpl.n	800681c <_vfiprintf_r+0x34>
 8006818:	692b      	ldr	r3, [r5, #16]
 800681a:	b99b      	cbnz	r3, 8006844 <_vfiprintf_r+0x5c>
 800681c:	4629      	mov	r1, r5
 800681e:	4630      	mov	r0, r6
 8006820:	f000 fac6 	bl	8006db0 <__swsetup_r>
 8006824:	b170      	cbz	r0, 8006844 <_vfiprintf_r+0x5c>
 8006826:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006828:	07dc      	lsls	r4, r3, #31
 800682a:	d504      	bpl.n	8006836 <_vfiprintf_r+0x4e>
 800682c:	f04f 30ff 	mov.w	r0, #4294967295
 8006830:	b01d      	add	sp, #116	@ 0x74
 8006832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	0598      	lsls	r0, r3, #22
 800683a:	d4f7      	bmi.n	800682c <_vfiprintf_r+0x44>
 800683c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800683e:	f7ff fdb5 	bl	80063ac <__retarget_lock_release_recursive>
 8006842:	e7f3      	b.n	800682c <_vfiprintf_r+0x44>
 8006844:	2300      	movs	r3, #0
 8006846:	9309      	str	r3, [sp, #36]	@ 0x24
 8006848:	2320      	movs	r3, #32
 800684a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800684e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006852:	2330      	movs	r3, #48	@ 0x30
 8006854:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a04 <_vfiprintf_r+0x21c>
 8006858:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800685c:	f04f 0901 	mov.w	r9, #1
 8006860:	4623      	mov	r3, r4
 8006862:	469a      	mov	sl, r3
 8006864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006868:	b10a      	cbz	r2, 800686e <_vfiprintf_r+0x86>
 800686a:	2a25      	cmp	r2, #37	@ 0x25
 800686c:	d1f9      	bne.n	8006862 <_vfiprintf_r+0x7a>
 800686e:	ebba 0b04 	subs.w	fp, sl, r4
 8006872:	d00b      	beq.n	800688c <_vfiprintf_r+0xa4>
 8006874:	465b      	mov	r3, fp
 8006876:	4622      	mov	r2, r4
 8006878:	4629      	mov	r1, r5
 800687a:	4630      	mov	r0, r6
 800687c:	f7ff ffa2 	bl	80067c4 <__sfputs_r>
 8006880:	3001      	adds	r0, #1
 8006882:	f000 80a7 	beq.w	80069d4 <_vfiprintf_r+0x1ec>
 8006886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006888:	445a      	add	r2, fp
 800688a:	9209      	str	r2, [sp, #36]	@ 0x24
 800688c:	f89a 3000 	ldrb.w	r3, [sl]
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 809f 	beq.w	80069d4 <_vfiprintf_r+0x1ec>
 8006896:	2300      	movs	r3, #0
 8006898:	f04f 32ff 	mov.w	r2, #4294967295
 800689c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068a0:	f10a 0a01 	add.w	sl, sl, #1
 80068a4:	9304      	str	r3, [sp, #16]
 80068a6:	9307      	str	r3, [sp, #28]
 80068a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80068ae:	4654      	mov	r4, sl
 80068b0:	2205      	movs	r2, #5
 80068b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b6:	4853      	ldr	r0, [pc, #332]	@ (8006a04 <_vfiprintf_r+0x21c>)
 80068b8:	f7f9 fcb2 	bl	8000220 <memchr>
 80068bc:	9a04      	ldr	r2, [sp, #16]
 80068be:	b9d8      	cbnz	r0, 80068f8 <_vfiprintf_r+0x110>
 80068c0:	06d1      	lsls	r1, r2, #27
 80068c2:	bf44      	itt	mi
 80068c4:	2320      	movmi	r3, #32
 80068c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068ca:	0713      	lsls	r3, r2, #28
 80068cc:	bf44      	itt	mi
 80068ce:	232b      	movmi	r3, #43	@ 0x2b
 80068d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068d4:	f89a 3000 	ldrb.w	r3, [sl]
 80068d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80068da:	d015      	beq.n	8006908 <_vfiprintf_r+0x120>
 80068dc:	9a07      	ldr	r2, [sp, #28]
 80068de:	4654      	mov	r4, sl
 80068e0:	2000      	movs	r0, #0
 80068e2:	f04f 0c0a 	mov.w	ip, #10
 80068e6:	4621      	mov	r1, r4
 80068e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ec:	3b30      	subs	r3, #48	@ 0x30
 80068ee:	2b09      	cmp	r3, #9
 80068f0:	d94b      	bls.n	800698a <_vfiprintf_r+0x1a2>
 80068f2:	b1b0      	cbz	r0, 8006922 <_vfiprintf_r+0x13a>
 80068f4:	9207      	str	r2, [sp, #28]
 80068f6:	e014      	b.n	8006922 <_vfiprintf_r+0x13a>
 80068f8:	eba0 0308 	sub.w	r3, r0, r8
 80068fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006900:	4313      	orrs	r3, r2
 8006902:	9304      	str	r3, [sp, #16]
 8006904:	46a2      	mov	sl, r4
 8006906:	e7d2      	b.n	80068ae <_vfiprintf_r+0xc6>
 8006908:	9b03      	ldr	r3, [sp, #12]
 800690a:	1d19      	adds	r1, r3, #4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	9103      	str	r1, [sp, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	bfbb      	ittet	lt
 8006914:	425b      	neglt	r3, r3
 8006916:	f042 0202 	orrlt.w	r2, r2, #2
 800691a:	9307      	strge	r3, [sp, #28]
 800691c:	9307      	strlt	r3, [sp, #28]
 800691e:	bfb8      	it	lt
 8006920:	9204      	strlt	r2, [sp, #16]
 8006922:	7823      	ldrb	r3, [r4, #0]
 8006924:	2b2e      	cmp	r3, #46	@ 0x2e
 8006926:	d10a      	bne.n	800693e <_vfiprintf_r+0x156>
 8006928:	7863      	ldrb	r3, [r4, #1]
 800692a:	2b2a      	cmp	r3, #42	@ 0x2a
 800692c:	d132      	bne.n	8006994 <_vfiprintf_r+0x1ac>
 800692e:	9b03      	ldr	r3, [sp, #12]
 8006930:	1d1a      	adds	r2, r3, #4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	9203      	str	r2, [sp, #12]
 8006936:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800693a:	3402      	adds	r4, #2
 800693c:	9305      	str	r3, [sp, #20]
 800693e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a14 <_vfiprintf_r+0x22c>
 8006942:	7821      	ldrb	r1, [r4, #0]
 8006944:	2203      	movs	r2, #3
 8006946:	4650      	mov	r0, sl
 8006948:	f7f9 fc6a 	bl	8000220 <memchr>
 800694c:	b138      	cbz	r0, 800695e <_vfiprintf_r+0x176>
 800694e:	9b04      	ldr	r3, [sp, #16]
 8006950:	eba0 000a 	sub.w	r0, r0, sl
 8006954:	2240      	movs	r2, #64	@ 0x40
 8006956:	4082      	lsls	r2, r0
 8006958:	4313      	orrs	r3, r2
 800695a:	3401      	adds	r4, #1
 800695c:	9304      	str	r3, [sp, #16]
 800695e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006962:	4829      	ldr	r0, [pc, #164]	@ (8006a08 <_vfiprintf_r+0x220>)
 8006964:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006968:	2206      	movs	r2, #6
 800696a:	f7f9 fc59 	bl	8000220 <memchr>
 800696e:	2800      	cmp	r0, #0
 8006970:	d03f      	beq.n	80069f2 <_vfiprintf_r+0x20a>
 8006972:	4b26      	ldr	r3, [pc, #152]	@ (8006a0c <_vfiprintf_r+0x224>)
 8006974:	bb1b      	cbnz	r3, 80069be <_vfiprintf_r+0x1d6>
 8006976:	9b03      	ldr	r3, [sp, #12]
 8006978:	3307      	adds	r3, #7
 800697a:	f023 0307 	bic.w	r3, r3, #7
 800697e:	3308      	adds	r3, #8
 8006980:	9303      	str	r3, [sp, #12]
 8006982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006984:	443b      	add	r3, r7
 8006986:	9309      	str	r3, [sp, #36]	@ 0x24
 8006988:	e76a      	b.n	8006860 <_vfiprintf_r+0x78>
 800698a:	fb0c 3202 	mla	r2, ip, r2, r3
 800698e:	460c      	mov	r4, r1
 8006990:	2001      	movs	r0, #1
 8006992:	e7a8      	b.n	80068e6 <_vfiprintf_r+0xfe>
 8006994:	2300      	movs	r3, #0
 8006996:	3401      	adds	r4, #1
 8006998:	9305      	str	r3, [sp, #20]
 800699a:	4619      	mov	r1, r3
 800699c:	f04f 0c0a 	mov.w	ip, #10
 80069a0:	4620      	mov	r0, r4
 80069a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069a6:	3a30      	subs	r2, #48	@ 0x30
 80069a8:	2a09      	cmp	r2, #9
 80069aa:	d903      	bls.n	80069b4 <_vfiprintf_r+0x1cc>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0c6      	beq.n	800693e <_vfiprintf_r+0x156>
 80069b0:	9105      	str	r1, [sp, #20]
 80069b2:	e7c4      	b.n	800693e <_vfiprintf_r+0x156>
 80069b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80069b8:	4604      	mov	r4, r0
 80069ba:	2301      	movs	r3, #1
 80069bc:	e7f0      	b.n	80069a0 <_vfiprintf_r+0x1b8>
 80069be:	ab03      	add	r3, sp, #12
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	462a      	mov	r2, r5
 80069c4:	4b12      	ldr	r3, [pc, #72]	@ (8006a10 <_vfiprintf_r+0x228>)
 80069c6:	a904      	add	r1, sp, #16
 80069c8:	4630      	mov	r0, r6
 80069ca:	f3af 8000 	nop.w
 80069ce:	4607      	mov	r7, r0
 80069d0:	1c78      	adds	r0, r7, #1
 80069d2:	d1d6      	bne.n	8006982 <_vfiprintf_r+0x19a>
 80069d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069d6:	07d9      	lsls	r1, r3, #31
 80069d8:	d405      	bmi.n	80069e6 <_vfiprintf_r+0x1fe>
 80069da:	89ab      	ldrh	r3, [r5, #12]
 80069dc:	059a      	lsls	r2, r3, #22
 80069de:	d402      	bmi.n	80069e6 <_vfiprintf_r+0x1fe>
 80069e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069e2:	f7ff fce3 	bl	80063ac <__retarget_lock_release_recursive>
 80069e6:	89ab      	ldrh	r3, [r5, #12]
 80069e8:	065b      	lsls	r3, r3, #25
 80069ea:	f53f af1f 	bmi.w	800682c <_vfiprintf_r+0x44>
 80069ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069f0:	e71e      	b.n	8006830 <_vfiprintf_r+0x48>
 80069f2:	ab03      	add	r3, sp, #12
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	462a      	mov	r2, r5
 80069f8:	4b05      	ldr	r3, [pc, #20]	@ (8006a10 <_vfiprintf_r+0x228>)
 80069fa:	a904      	add	r1, sp, #16
 80069fc:	4630      	mov	r0, r6
 80069fe:	f000 f879 	bl	8006af4 <_printf_i>
 8006a02:	e7e4      	b.n	80069ce <_vfiprintf_r+0x1e6>
 8006a04:	080070ef 	.word	0x080070ef
 8006a08:	080070f9 	.word	0x080070f9
 8006a0c:	00000000 	.word	0x00000000
 8006a10:	080067c5 	.word	0x080067c5
 8006a14:	080070f5 	.word	0x080070f5

08006a18 <_printf_common>:
 8006a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a1c:	4616      	mov	r6, r2
 8006a1e:	4698      	mov	r8, r3
 8006a20:	688a      	ldr	r2, [r1, #8]
 8006a22:	690b      	ldr	r3, [r1, #16]
 8006a24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	bfb8      	it	lt
 8006a2c:	4613      	movlt	r3, r2
 8006a2e:	6033      	str	r3, [r6, #0]
 8006a30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a34:	4607      	mov	r7, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	b10a      	cbz	r2, 8006a3e <_printf_common+0x26>
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	6033      	str	r3, [r6, #0]
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	0699      	lsls	r1, r3, #26
 8006a42:	bf42      	ittt	mi
 8006a44:	6833      	ldrmi	r3, [r6, #0]
 8006a46:	3302      	addmi	r3, #2
 8006a48:	6033      	strmi	r3, [r6, #0]
 8006a4a:	6825      	ldr	r5, [r4, #0]
 8006a4c:	f015 0506 	ands.w	r5, r5, #6
 8006a50:	d106      	bne.n	8006a60 <_printf_common+0x48>
 8006a52:	f104 0a19 	add.w	sl, r4, #25
 8006a56:	68e3      	ldr	r3, [r4, #12]
 8006a58:	6832      	ldr	r2, [r6, #0]
 8006a5a:	1a9b      	subs	r3, r3, r2
 8006a5c:	42ab      	cmp	r3, r5
 8006a5e:	dc26      	bgt.n	8006aae <_printf_common+0x96>
 8006a60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	3b00      	subs	r3, #0
 8006a68:	bf18      	it	ne
 8006a6a:	2301      	movne	r3, #1
 8006a6c:	0692      	lsls	r2, r2, #26
 8006a6e:	d42b      	bmi.n	8006ac8 <_printf_common+0xb0>
 8006a70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a74:	4641      	mov	r1, r8
 8006a76:	4638      	mov	r0, r7
 8006a78:	47c8      	blx	r9
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	d01e      	beq.n	8006abc <_printf_common+0xa4>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	6922      	ldr	r2, [r4, #16]
 8006a82:	f003 0306 	and.w	r3, r3, #6
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	bf02      	ittt	eq
 8006a8a:	68e5      	ldreq	r5, [r4, #12]
 8006a8c:	6833      	ldreq	r3, [r6, #0]
 8006a8e:	1aed      	subeq	r5, r5, r3
 8006a90:	68a3      	ldr	r3, [r4, #8]
 8006a92:	bf0c      	ite	eq
 8006a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a98:	2500      	movne	r5, #0
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	bfc4      	itt	gt
 8006a9e:	1a9b      	subgt	r3, r3, r2
 8006aa0:	18ed      	addgt	r5, r5, r3
 8006aa2:	2600      	movs	r6, #0
 8006aa4:	341a      	adds	r4, #26
 8006aa6:	42b5      	cmp	r5, r6
 8006aa8:	d11a      	bne.n	8006ae0 <_printf_common+0xc8>
 8006aaa:	2000      	movs	r0, #0
 8006aac:	e008      	b.n	8006ac0 <_printf_common+0xa8>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4652      	mov	r2, sl
 8006ab2:	4641      	mov	r1, r8
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	47c8      	blx	r9
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d103      	bne.n	8006ac4 <_printf_common+0xac>
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	e7c6      	b.n	8006a56 <_printf_common+0x3e>
 8006ac8:	18e1      	adds	r1, r4, r3
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	2030      	movs	r0, #48	@ 0x30
 8006ace:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ad2:	4422      	add	r2, r4
 8006ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006adc:	3302      	adds	r3, #2
 8006ade:	e7c7      	b.n	8006a70 <_printf_common+0x58>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	4622      	mov	r2, r4
 8006ae4:	4641      	mov	r1, r8
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	47c8      	blx	r9
 8006aea:	3001      	adds	r0, #1
 8006aec:	d0e6      	beq.n	8006abc <_printf_common+0xa4>
 8006aee:	3601      	adds	r6, #1
 8006af0:	e7d9      	b.n	8006aa6 <_printf_common+0x8e>
	...

08006af4 <_printf_i>:
 8006af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006af8:	7e0f      	ldrb	r7, [r1, #24]
 8006afa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006afc:	2f78      	cmp	r7, #120	@ 0x78
 8006afe:	4691      	mov	r9, r2
 8006b00:	4680      	mov	r8, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	469a      	mov	sl, r3
 8006b06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b0a:	d807      	bhi.n	8006b1c <_printf_i+0x28>
 8006b0c:	2f62      	cmp	r7, #98	@ 0x62
 8006b0e:	d80a      	bhi.n	8006b26 <_printf_i+0x32>
 8006b10:	2f00      	cmp	r7, #0
 8006b12:	f000 80d2 	beq.w	8006cba <_printf_i+0x1c6>
 8006b16:	2f58      	cmp	r7, #88	@ 0x58
 8006b18:	f000 80b9 	beq.w	8006c8e <_printf_i+0x19a>
 8006b1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b24:	e03a      	b.n	8006b9c <_printf_i+0xa8>
 8006b26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b2a:	2b15      	cmp	r3, #21
 8006b2c:	d8f6      	bhi.n	8006b1c <_printf_i+0x28>
 8006b2e:	a101      	add	r1, pc, #4	@ (adr r1, 8006b34 <_printf_i+0x40>)
 8006b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b34:	08006b8d 	.word	0x08006b8d
 8006b38:	08006ba1 	.word	0x08006ba1
 8006b3c:	08006b1d 	.word	0x08006b1d
 8006b40:	08006b1d 	.word	0x08006b1d
 8006b44:	08006b1d 	.word	0x08006b1d
 8006b48:	08006b1d 	.word	0x08006b1d
 8006b4c:	08006ba1 	.word	0x08006ba1
 8006b50:	08006b1d 	.word	0x08006b1d
 8006b54:	08006b1d 	.word	0x08006b1d
 8006b58:	08006b1d 	.word	0x08006b1d
 8006b5c:	08006b1d 	.word	0x08006b1d
 8006b60:	08006ca1 	.word	0x08006ca1
 8006b64:	08006bcb 	.word	0x08006bcb
 8006b68:	08006c5b 	.word	0x08006c5b
 8006b6c:	08006b1d 	.word	0x08006b1d
 8006b70:	08006b1d 	.word	0x08006b1d
 8006b74:	08006cc3 	.word	0x08006cc3
 8006b78:	08006b1d 	.word	0x08006b1d
 8006b7c:	08006bcb 	.word	0x08006bcb
 8006b80:	08006b1d 	.word	0x08006b1d
 8006b84:	08006b1d 	.word	0x08006b1d
 8006b88:	08006c63 	.word	0x08006c63
 8006b8c:	6833      	ldr	r3, [r6, #0]
 8006b8e:	1d1a      	adds	r2, r3, #4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6032      	str	r2, [r6, #0]
 8006b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e09d      	b.n	8006cdc <_printf_i+0x1e8>
 8006ba0:	6833      	ldr	r3, [r6, #0]
 8006ba2:	6820      	ldr	r0, [r4, #0]
 8006ba4:	1d19      	adds	r1, r3, #4
 8006ba6:	6031      	str	r1, [r6, #0]
 8006ba8:	0606      	lsls	r6, r0, #24
 8006baa:	d501      	bpl.n	8006bb0 <_printf_i+0xbc>
 8006bac:	681d      	ldr	r5, [r3, #0]
 8006bae:	e003      	b.n	8006bb8 <_printf_i+0xc4>
 8006bb0:	0645      	lsls	r5, r0, #25
 8006bb2:	d5fb      	bpl.n	8006bac <_printf_i+0xb8>
 8006bb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bb8:	2d00      	cmp	r5, #0
 8006bba:	da03      	bge.n	8006bc4 <_printf_i+0xd0>
 8006bbc:	232d      	movs	r3, #45	@ 0x2d
 8006bbe:	426d      	negs	r5, r5
 8006bc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bc4:	4859      	ldr	r0, [pc, #356]	@ (8006d2c <_printf_i+0x238>)
 8006bc6:	230a      	movs	r3, #10
 8006bc8:	e011      	b.n	8006bee <_printf_i+0xfa>
 8006bca:	6821      	ldr	r1, [r4, #0]
 8006bcc:	6833      	ldr	r3, [r6, #0]
 8006bce:	0608      	lsls	r0, r1, #24
 8006bd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bd4:	d402      	bmi.n	8006bdc <_printf_i+0xe8>
 8006bd6:	0649      	lsls	r1, r1, #25
 8006bd8:	bf48      	it	mi
 8006bda:	b2ad      	uxthmi	r5, r5
 8006bdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bde:	4853      	ldr	r0, [pc, #332]	@ (8006d2c <_printf_i+0x238>)
 8006be0:	6033      	str	r3, [r6, #0]
 8006be2:	bf14      	ite	ne
 8006be4:	230a      	movne	r3, #10
 8006be6:	2308      	moveq	r3, #8
 8006be8:	2100      	movs	r1, #0
 8006bea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bee:	6866      	ldr	r6, [r4, #4]
 8006bf0:	60a6      	str	r6, [r4, #8]
 8006bf2:	2e00      	cmp	r6, #0
 8006bf4:	bfa2      	ittt	ge
 8006bf6:	6821      	ldrge	r1, [r4, #0]
 8006bf8:	f021 0104 	bicge.w	r1, r1, #4
 8006bfc:	6021      	strge	r1, [r4, #0]
 8006bfe:	b90d      	cbnz	r5, 8006c04 <_printf_i+0x110>
 8006c00:	2e00      	cmp	r6, #0
 8006c02:	d04b      	beq.n	8006c9c <_printf_i+0x1a8>
 8006c04:	4616      	mov	r6, r2
 8006c06:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c0a:	fb03 5711 	mls	r7, r3, r1, r5
 8006c0e:	5dc7      	ldrb	r7, [r0, r7]
 8006c10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c14:	462f      	mov	r7, r5
 8006c16:	42bb      	cmp	r3, r7
 8006c18:	460d      	mov	r5, r1
 8006c1a:	d9f4      	bls.n	8006c06 <_printf_i+0x112>
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d10b      	bne.n	8006c38 <_printf_i+0x144>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	07df      	lsls	r7, r3, #31
 8006c24:	d508      	bpl.n	8006c38 <_printf_i+0x144>
 8006c26:	6923      	ldr	r3, [r4, #16]
 8006c28:	6861      	ldr	r1, [r4, #4]
 8006c2a:	4299      	cmp	r1, r3
 8006c2c:	bfde      	ittt	le
 8006c2e:	2330      	movle	r3, #48	@ 0x30
 8006c30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c38:	1b92      	subs	r2, r2, r6
 8006c3a:	6122      	str	r2, [r4, #16]
 8006c3c:	f8cd a000 	str.w	sl, [sp]
 8006c40:	464b      	mov	r3, r9
 8006c42:	aa03      	add	r2, sp, #12
 8006c44:	4621      	mov	r1, r4
 8006c46:	4640      	mov	r0, r8
 8006c48:	f7ff fee6 	bl	8006a18 <_printf_common>
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d14a      	bne.n	8006ce6 <_printf_i+0x1f2>
 8006c50:	f04f 30ff 	mov.w	r0, #4294967295
 8006c54:	b004      	add	sp, #16
 8006c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	f043 0320 	orr.w	r3, r3, #32
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	4833      	ldr	r0, [pc, #204]	@ (8006d30 <_printf_i+0x23c>)
 8006c64:	2778      	movs	r7, #120	@ 0x78
 8006c66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	6831      	ldr	r1, [r6, #0]
 8006c6e:	061f      	lsls	r7, r3, #24
 8006c70:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c74:	d402      	bmi.n	8006c7c <_printf_i+0x188>
 8006c76:	065f      	lsls	r7, r3, #25
 8006c78:	bf48      	it	mi
 8006c7a:	b2ad      	uxthmi	r5, r5
 8006c7c:	6031      	str	r1, [r6, #0]
 8006c7e:	07d9      	lsls	r1, r3, #31
 8006c80:	bf44      	itt	mi
 8006c82:	f043 0320 	orrmi.w	r3, r3, #32
 8006c86:	6023      	strmi	r3, [r4, #0]
 8006c88:	b11d      	cbz	r5, 8006c92 <_printf_i+0x19e>
 8006c8a:	2310      	movs	r3, #16
 8006c8c:	e7ac      	b.n	8006be8 <_printf_i+0xf4>
 8006c8e:	4827      	ldr	r0, [pc, #156]	@ (8006d2c <_printf_i+0x238>)
 8006c90:	e7e9      	b.n	8006c66 <_printf_i+0x172>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	f023 0320 	bic.w	r3, r3, #32
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	e7f6      	b.n	8006c8a <_printf_i+0x196>
 8006c9c:	4616      	mov	r6, r2
 8006c9e:	e7bd      	b.n	8006c1c <_printf_i+0x128>
 8006ca0:	6833      	ldr	r3, [r6, #0]
 8006ca2:	6825      	ldr	r5, [r4, #0]
 8006ca4:	6961      	ldr	r1, [r4, #20]
 8006ca6:	1d18      	adds	r0, r3, #4
 8006ca8:	6030      	str	r0, [r6, #0]
 8006caa:	062e      	lsls	r6, r5, #24
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	d501      	bpl.n	8006cb4 <_printf_i+0x1c0>
 8006cb0:	6019      	str	r1, [r3, #0]
 8006cb2:	e002      	b.n	8006cba <_printf_i+0x1c6>
 8006cb4:	0668      	lsls	r0, r5, #25
 8006cb6:	d5fb      	bpl.n	8006cb0 <_printf_i+0x1bc>
 8006cb8:	8019      	strh	r1, [r3, #0]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	6123      	str	r3, [r4, #16]
 8006cbe:	4616      	mov	r6, r2
 8006cc0:	e7bc      	b.n	8006c3c <_printf_i+0x148>
 8006cc2:	6833      	ldr	r3, [r6, #0]
 8006cc4:	1d1a      	adds	r2, r3, #4
 8006cc6:	6032      	str	r2, [r6, #0]
 8006cc8:	681e      	ldr	r6, [r3, #0]
 8006cca:	6862      	ldr	r2, [r4, #4]
 8006ccc:	2100      	movs	r1, #0
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7f9 faa6 	bl	8000220 <memchr>
 8006cd4:	b108      	cbz	r0, 8006cda <_printf_i+0x1e6>
 8006cd6:	1b80      	subs	r0, r0, r6
 8006cd8:	6060      	str	r0, [r4, #4]
 8006cda:	6863      	ldr	r3, [r4, #4]
 8006cdc:	6123      	str	r3, [r4, #16]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ce4:	e7aa      	b.n	8006c3c <_printf_i+0x148>
 8006ce6:	6923      	ldr	r3, [r4, #16]
 8006ce8:	4632      	mov	r2, r6
 8006cea:	4649      	mov	r1, r9
 8006cec:	4640      	mov	r0, r8
 8006cee:	47d0      	blx	sl
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d0ad      	beq.n	8006c50 <_printf_i+0x15c>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	079b      	lsls	r3, r3, #30
 8006cf8:	d413      	bmi.n	8006d22 <_printf_i+0x22e>
 8006cfa:	68e0      	ldr	r0, [r4, #12]
 8006cfc:	9b03      	ldr	r3, [sp, #12]
 8006cfe:	4298      	cmp	r0, r3
 8006d00:	bfb8      	it	lt
 8006d02:	4618      	movlt	r0, r3
 8006d04:	e7a6      	b.n	8006c54 <_printf_i+0x160>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4632      	mov	r2, r6
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	47d0      	blx	sl
 8006d10:	3001      	adds	r0, #1
 8006d12:	d09d      	beq.n	8006c50 <_printf_i+0x15c>
 8006d14:	3501      	adds	r5, #1
 8006d16:	68e3      	ldr	r3, [r4, #12]
 8006d18:	9903      	ldr	r1, [sp, #12]
 8006d1a:	1a5b      	subs	r3, r3, r1
 8006d1c:	42ab      	cmp	r3, r5
 8006d1e:	dcf2      	bgt.n	8006d06 <_printf_i+0x212>
 8006d20:	e7eb      	b.n	8006cfa <_printf_i+0x206>
 8006d22:	2500      	movs	r5, #0
 8006d24:	f104 0619 	add.w	r6, r4, #25
 8006d28:	e7f5      	b.n	8006d16 <_printf_i+0x222>
 8006d2a:	bf00      	nop
 8006d2c:	08007100 	.word	0x08007100
 8006d30:	08007111 	.word	0x08007111

08006d34 <__swbuf_r>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	460e      	mov	r6, r1
 8006d38:	4614      	mov	r4, r2
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	b118      	cbz	r0, 8006d46 <__swbuf_r+0x12>
 8006d3e:	6a03      	ldr	r3, [r0, #32]
 8006d40:	b90b      	cbnz	r3, 8006d46 <__swbuf_r+0x12>
 8006d42:	f7ff fa3f 	bl	80061c4 <__sinit>
 8006d46:	69a3      	ldr	r3, [r4, #24]
 8006d48:	60a3      	str	r3, [r4, #8]
 8006d4a:	89a3      	ldrh	r3, [r4, #12]
 8006d4c:	071a      	lsls	r2, r3, #28
 8006d4e:	d501      	bpl.n	8006d54 <__swbuf_r+0x20>
 8006d50:	6923      	ldr	r3, [r4, #16]
 8006d52:	b943      	cbnz	r3, 8006d66 <__swbuf_r+0x32>
 8006d54:	4621      	mov	r1, r4
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 f82a 	bl	8006db0 <__swsetup_r>
 8006d5c:	b118      	cbz	r0, 8006d66 <__swbuf_r+0x32>
 8006d5e:	f04f 37ff 	mov.w	r7, #4294967295
 8006d62:	4638      	mov	r0, r7
 8006d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	6922      	ldr	r2, [r4, #16]
 8006d6a:	1a98      	subs	r0, r3, r2
 8006d6c:	6963      	ldr	r3, [r4, #20]
 8006d6e:	b2f6      	uxtb	r6, r6
 8006d70:	4283      	cmp	r3, r0
 8006d72:	4637      	mov	r7, r6
 8006d74:	dc05      	bgt.n	8006d82 <__swbuf_r+0x4e>
 8006d76:	4621      	mov	r1, r4
 8006d78:	4628      	mov	r0, r5
 8006d7a:	f7ff fcbb 	bl	80066f4 <_fflush_r>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d1ed      	bne.n	8006d5e <__swbuf_r+0x2a>
 8006d82:	68a3      	ldr	r3, [r4, #8]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	60a3      	str	r3, [r4, #8]
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	6022      	str	r2, [r4, #0]
 8006d8e:	701e      	strb	r6, [r3, #0]
 8006d90:	6962      	ldr	r2, [r4, #20]
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d004      	beq.n	8006da2 <__swbuf_r+0x6e>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	07db      	lsls	r3, r3, #31
 8006d9c:	d5e1      	bpl.n	8006d62 <__swbuf_r+0x2e>
 8006d9e:	2e0a      	cmp	r6, #10
 8006da0:	d1df      	bne.n	8006d62 <__swbuf_r+0x2e>
 8006da2:	4621      	mov	r1, r4
 8006da4:	4628      	mov	r0, r5
 8006da6:	f7ff fca5 	bl	80066f4 <_fflush_r>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d0d9      	beq.n	8006d62 <__swbuf_r+0x2e>
 8006dae:	e7d6      	b.n	8006d5e <__swbuf_r+0x2a>

08006db0 <__swsetup_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4b29      	ldr	r3, [pc, #164]	@ (8006e58 <__swsetup_r+0xa8>)
 8006db4:	4605      	mov	r5, r0
 8006db6:	6818      	ldr	r0, [r3, #0]
 8006db8:	460c      	mov	r4, r1
 8006dba:	b118      	cbz	r0, 8006dc4 <__swsetup_r+0x14>
 8006dbc:	6a03      	ldr	r3, [r0, #32]
 8006dbe:	b90b      	cbnz	r3, 8006dc4 <__swsetup_r+0x14>
 8006dc0:	f7ff fa00 	bl	80061c4 <__sinit>
 8006dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dc8:	0719      	lsls	r1, r3, #28
 8006dca:	d422      	bmi.n	8006e12 <__swsetup_r+0x62>
 8006dcc:	06da      	lsls	r2, r3, #27
 8006dce:	d407      	bmi.n	8006de0 <__swsetup_r+0x30>
 8006dd0:	2209      	movs	r2, #9
 8006dd2:	602a      	str	r2, [r5, #0]
 8006dd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dd8:	81a3      	strh	r3, [r4, #12]
 8006dda:	f04f 30ff 	mov.w	r0, #4294967295
 8006dde:	e033      	b.n	8006e48 <__swsetup_r+0x98>
 8006de0:	0758      	lsls	r0, r3, #29
 8006de2:	d512      	bpl.n	8006e0a <__swsetup_r+0x5a>
 8006de4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006de6:	b141      	cbz	r1, 8006dfa <__swsetup_r+0x4a>
 8006de8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dec:	4299      	cmp	r1, r3
 8006dee:	d002      	beq.n	8006df6 <__swsetup_r+0x46>
 8006df0:	4628      	mov	r0, r5
 8006df2:	f7ff fafb 	bl	80063ec <_free_r>
 8006df6:	2300      	movs	r3, #0
 8006df8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dfa:	89a3      	ldrh	r3, [r4, #12]
 8006dfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e00:	81a3      	strh	r3, [r4, #12]
 8006e02:	2300      	movs	r3, #0
 8006e04:	6063      	str	r3, [r4, #4]
 8006e06:	6923      	ldr	r3, [r4, #16]
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	f043 0308 	orr.w	r3, r3, #8
 8006e10:	81a3      	strh	r3, [r4, #12]
 8006e12:	6923      	ldr	r3, [r4, #16]
 8006e14:	b94b      	cbnz	r3, 8006e2a <__swsetup_r+0x7a>
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e20:	d003      	beq.n	8006e2a <__swsetup_r+0x7a>
 8006e22:	4621      	mov	r1, r4
 8006e24:	4628      	mov	r0, r5
 8006e26:	f000 f883 	bl	8006f30 <__smakebuf_r>
 8006e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e2e:	f013 0201 	ands.w	r2, r3, #1
 8006e32:	d00a      	beq.n	8006e4a <__swsetup_r+0x9a>
 8006e34:	2200      	movs	r2, #0
 8006e36:	60a2      	str	r2, [r4, #8]
 8006e38:	6962      	ldr	r2, [r4, #20]
 8006e3a:	4252      	negs	r2, r2
 8006e3c:	61a2      	str	r2, [r4, #24]
 8006e3e:	6922      	ldr	r2, [r4, #16]
 8006e40:	b942      	cbnz	r2, 8006e54 <__swsetup_r+0xa4>
 8006e42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e46:	d1c5      	bne.n	8006dd4 <__swsetup_r+0x24>
 8006e48:	bd38      	pop	{r3, r4, r5, pc}
 8006e4a:	0799      	lsls	r1, r3, #30
 8006e4c:	bf58      	it	pl
 8006e4e:	6962      	ldrpl	r2, [r4, #20]
 8006e50:	60a2      	str	r2, [r4, #8]
 8006e52:	e7f4      	b.n	8006e3e <__swsetup_r+0x8e>
 8006e54:	2000      	movs	r0, #0
 8006e56:	e7f7      	b.n	8006e48 <__swsetup_r+0x98>
 8006e58:	20000020 	.word	0x20000020

08006e5c <_raise_r>:
 8006e5c:	291f      	cmp	r1, #31
 8006e5e:	b538      	push	{r3, r4, r5, lr}
 8006e60:	4605      	mov	r5, r0
 8006e62:	460c      	mov	r4, r1
 8006e64:	d904      	bls.n	8006e70 <_raise_r+0x14>
 8006e66:	2316      	movs	r3, #22
 8006e68:	6003      	str	r3, [r0, #0]
 8006e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e72:	b112      	cbz	r2, 8006e7a <_raise_r+0x1e>
 8006e74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e78:	b94b      	cbnz	r3, 8006e8e <_raise_r+0x32>
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f000 f830 	bl	8006ee0 <_getpid_r>
 8006e80:	4622      	mov	r2, r4
 8006e82:	4601      	mov	r1, r0
 8006e84:	4628      	mov	r0, r5
 8006e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e8a:	f000 b817 	b.w	8006ebc <_kill_r>
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d00a      	beq.n	8006ea8 <_raise_r+0x4c>
 8006e92:	1c59      	adds	r1, r3, #1
 8006e94:	d103      	bne.n	8006e9e <_raise_r+0x42>
 8006e96:	2316      	movs	r3, #22
 8006e98:	6003      	str	r3, [r0, #0]
 8006e9a:	2001      	movs	r0, #1
 8006e9c:	e7e7      	b.n	8006e6e <_raise_r+0x12>
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4798      	blx	r3
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	e7e0      	b.n	8006e6e <_raise_r+0x12>

08006eac <raise>:
 8006eac:	4b02      	ldr	r3, [pc, #8]	@ (8006eb8 <raise+0xc>)
 8006eae:	4601      	mov	r1, r0
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	f7ff bfd3 	b.w	8006e5c <_raise_r>
 8006eb6:	bf00      	nop
 8006eb8:	20000020 	.word	0x20000020

08006ebc <_kill_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4d07      	ldr	r5, [pc, #28]	@ (8006edc <_kill_r+0x20>)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	4608      	mov	r0, r1
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	602b      	str	r3, [r5, #0]
 8006eca:	f7fa f9fd 	bl	80012c8 <_kill>
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	d102      	bne.n	8006ed8 <_kill_r+0x1c>
 8006ed2:	682b      	ldr	r3, [r5, #0]
 8006ed4:	b103      	cbz	r3, 8006ed8 <_kill_r+0x1c>
 8006ed6:	6023      	str	r3, [r4, #0]
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
 8006eda:	bf00      	nop
 8006edc:	20000504 	.word	0x20000504

08006ee0 <_getpid_r>:
 8006ee0:	f7fa b9ea 	b.w	80012b8 <_getpid>

08006ee4 <__swhatbuf_r>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eec:	2900      	cmp	r1, #0
 8006eee:	b096      	sub	sp, #88	@ 0x58
 8006ef0:	4615      	mov	r5, r2
 8006ef2:	461e      	mov	r6, r3
 8006ef4:	da0d      	bge.n	8006f12 <__swhatbuf_r+0x2e>
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006efc:	f04f 0100 	mov.w	r1, #0
 8006f00:	bf14      	ite	ne
 8006f02:	2340      	movne	r3, #64	@ 0x40
 8006f04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f08:	2000      	movs	r0, #0
 8006f0a:	6031      	str	r1, [r6, #0]
 8006f0c:	602b      	str	r3, [r5, #0]
 8006f0e:	b016      	add	sp, #88	@ 0x58
 8006f10:	bd70      	pop	{r4, r5, r6, pc}
 8006f12:	466a      	mov	r2, sp
 8006f14:	f000 f848 	bl	8006fa8 <_fstat_r>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	dbec      	blt.n	8006ef6 <__swhatbuf_r+0x12>
 8006f1c:	9901      	ldr	r1, [sp, #4]
 8006f1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f26:	4259      	negs	r1, r3
 8006f28:	4159      	adcs	r1, r3
 8006f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f2e:	e7eb      	b.n	8006f08 <__swhatbuf_r+0x24>

08006f30 <__smakebuf_r>:
 8006f30:	898b      	ldrh	r3, [r1, #12]
 8006f32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f34:	079d      	lsls	r5, r3, #30
 8006f36:	4606      	mov	r6, r0
 8006f38:	460c      	mov	r4, r1
 8006f3a:	d507      	bpl.n	8006f4c <__smakebuf_r+0x1c>
 8006f3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	2301      	movs	r3, #1
 8006f46:	6163      	str	r3, [r4, #20]
 8006f48:	b003      	add	sp, #12
 8006f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f4c:	ab01      	add	r3, sp, #4
 8006f4e:	466a      	mov	r2, sp
 8006f50:	f7ff ffc8 	bl	8006ee4 <__swhatbuf_r>
 8006f54:	9f00      	ldr	r7, [sp, #0]
 8006f56:	4605      	mov	r5, r0
 8006f58:	4639      	mov	r1, r7
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f7ff faba 	bl	80064d4 <_malloc_r>
 8006f60:	b948      	cbnz	r0, 8006f76 <__smakebuf_r+0x46>
 8006f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f66:	059a      	lsls	r2, r3, #22
 8006f68:	d4ee      	bmi.n	8006f48 <__smakebuf_r+0x18>
 8006f6a:	f023 0303 	bic.w	r3, r3, #3
 8006f6e:	f043 0302 	orr.w	r3, r3, #2
 8006f72:	81a3      	strh	r3, [r4, #12]
 8006f74:	e7e2      	b.n	8006f3c <__smakebuf_r+0xc>
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	6020      	str	r0, [r4, #0]
 8006f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f7e:	81a3      	strh	r3, [r4, #12]
 8006f80:	9b01      	ldr	r3, [sp, #4]
 8006f82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f86:	b15b      	cbz	r3, 8006fa0 <__smakebuf_r+0x70>
 8006f88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f000 f81d 	bl	8006fcc <_isatty_r>
 8006f92:	b128      	cbz	r0, 8006fa0 <__smakebuf_r+0x70>
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	f023 0303 	bic.w	r3, r3, #3
 8006f9a:	f043 0301 	orr.w	r3, r3, #1
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	431d      	orrs	r5, r3
 8006fa4:	81a5      	strh	r5, [r4, #12]
 8006fa6:	e7cf      	b.n	8006f48 <__smakebuf_r+0x18>

08006fa8 <_fstat_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d07      	ldr	r5, [pc, #28]	@ (8006fc8 <_fstat_r+0x20>)
 8006fac:	2300      	movs	r3, #0
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	602b      	str	r3, [r5, #0]
 8006fb6:	f7fa f9e7 	bl	8001388 <_fstat>
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	d102      	bne.n	8006fc4 <_fstat_r+0x1c>
 8006fbe:	682b      	ldr	r3, [r5, #0]
 8006fc0:	b103      	cbz	r3, 8006fc4 <_fstat_r+0x1c>
 8006fc2:	6023      	str	r3, [r4, #0]
 8006fc4:	bd38      	pop	{r3, r4, r5, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000504 	.word	0x20000504

08006fcc <_isatty_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d06      	ldr	r5, [pc, #24]	@ (8006fe8 <_isatty_r+0x1c>)
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	602b      	str	r3, [r5, #0]
 8006fd8:	f7fa f9e6 	bl	80013a8 <_isatty>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_isatty_r+0x1a>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_isatty_r+0x1a>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	20000504 	.word	0x20000504

08006fec <_init>:
 8006fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fee:	bf00      	nop
 8006ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff2:	bc08      	pop	{r3}
 8006ff4:	469e      	mov	lr, r3
 8006ff6:	4770      	bx	lr

08006ff8 <_fini>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	bf00      	nop
 8006ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffe:	bc08      	pop	{r3}
 8007000:	469e      	mov	lr, r3
 8007002:	4770      	bx	lr
