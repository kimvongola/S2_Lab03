
S2_Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030fc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080032d4  080032d4  000042d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003314  08003314  00005034  2**0
                  CONTENTS
  4 .ARM          00000008  08003314  08003314  00004314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800331c  0800331c  00005034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800331c  0800331c  0000431c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003320  08003320  00004320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08003324  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000034  08003358  00005034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003358  00005194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c238  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0e  00000000  00000000  0001129c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  00012db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000749  00000000  00000000  00013728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023edb  00000000  00000000  00013e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbb5  00000000  00000000  00037d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5920  00000000  00000000  00043901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129221  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025e4  00000000  00000000  00129264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0012b848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000034 	.word	0x20000034
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080032bc 	.word	0x080032bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000038 	.word	0x20000038
 8000214:	080032bc 	.word	0x080032bc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fc05 	bl	8000d1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f81c 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8fc 	bl	8000710 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000518:	f000 f864 	bl	80005e4 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800051c:	f000 f8ac 	bl	8000678 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t BTMX_TimeStamp = 0;
	  if(HAL_GetTick() > BTMX_TimeStamp)
 8000520:	f000 fc60 	bl	8000de4 <HAL_GetTick>
 8000524:	4602      	mov	r2, r0
 8000526:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <main+0x40>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	429a      	cmp	r2, r3
 800052c:	d9f8      	bls.n	8000520 <main+0x18>
	  {
	  BTMX_TimeStamp = HAL_GetTick() + 25; //next scan in 25 ms
 800052e:	f000 fc59 	bl	8000de4 <HAL_GetTick>
 8000532:	4603      	mov	r3, r0
 8000534:	3319      	adds	r3, #25
 8000536:	4a04      	ldr	r2, [pc, #16]	@ (8000548 <main+0x40>)
 8000538:	6013      	str	r3, [r2, #0]
	  ButtonMatrixRead();
 800053a:	f000 f993 	bl	8000864 <ButtonMatrixRead>
	  Numarray();
 800053e:	f000 fa0d 	bl	800095c <Numarray>
	  sendUART();
 8000542:	f000 fa57 	bl	80009f4 <sendUART>
  {
 8000546:	e7eb      	b.n	8000520 <main+0x18>
 8000548:	20000188 	.word	0x20000188

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	@ 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	2238      	movs	r2, #56	@ 0x38
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fe82 	bl	8003264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800056e:	2000      	movs	r0, #0
 8000570:	f000 ff4c 	bl	800140c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800057c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2340      	movs	r3, #64	@ 0x40
 8000580:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800058a:	2304      	movs	r3, #4
 800058c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800058e:	2355      	movs	r3, #85	@ 0x55
 8000590:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 ffe6 	bl	8001574 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ae:	f000 fa7f 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2104      	movs	r1, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fae4 	bl	8001b98 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005d6:	f000 fa6b 	bl	8000ab0 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	@ 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005e8:	4b20      	ldr	r3, [pc, #128]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 80005ea:	4a21      	ldr	r2, [pc, #132]	@ (8000670 <MX_LPUART1_UART_Init+0x8c>)
 80005ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 96200;
 80005ee:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 80005f0:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 80005f2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005fa:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000600:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000606:	4b19      	ldr	r3, [pc, #100]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 8000608:	220c      	movs	r2, #12
 800060a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 800060e:	2200      	movs	r2, #0
 8000610:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000612:	4b16      	ldr	r3, [pc, #88]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061e:	4b13      	ldr	r3, [pc, #76]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 8000620:	2200      	movs	r2, #0
 8000622:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000624:	4811      	ldr	r0, [pc, #68]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 8000626:	f001 ff21 	bl	800246c <HAL_UART_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000630:	f000 fa3e 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000634:	2100      	movs	r1, #0
 8000636:	480d      	ldr	r0, [pc, #52]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 8000638:	f002 fd4a 	bl	80030d0 <HAL_UARTEx_SetTxFifoThreshold>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000642:	f000 fa35 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000646:	2100      	movs	r1, #0
 8000648:	4808      	ldr	r0, [pc, #32]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 800064a:	f002 fd7f 	bl	800314c <HAL_UARTEx_SetRxFifoThreshold>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000654:	f000 fa2c 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <MX_LPUART1_UART_Init+0x88>)
 800065a:	f002 fd00 	bl	800305e <HAL_UARTEx_DisableFifoMode>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000664:	f000 fa24 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000050 	.word	0x20000050
 8000670:	40008000 	.word	0x40008000
 8000674:	000177c8 	.word	0x000177c8

08000678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800067c:	4b22      	ldr	r3, [pc, #136]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 800067e:	4a23      	ldr	r2, [pc, #140]	@ (800070c <MX_USART1_UART_Init+0x94>)
 8000680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000682:	4b21      	ldr	r3, [pc, #132]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b1d      	ldr	r3, [pc, #116]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b19      	ldr	r3, [pc, #100]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006b4:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ba:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 80006bc:	2200      	movs	r2, #0
 80006be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c0:	4811      	ldr	r0, [pc, #68]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 80006c2:	f001 fed3 	bl	800246c <HAL_UART_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006cc:	f000 f9f0 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d0:	2100      	movs	r1, #0
 80006d2:	480d      	ldr	r0, [pc, #52]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 80006d4:	f002 fcfc 	bl	80030d0 <HAL_UARTEx_SetTxFifoThreshold>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006de:	f000 f9e7 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4808      	ldr	r0, [pc, #32]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 80006e6:	f002 fd31 	bl	800314c <HAL_UARTEx_SetRxFifoThreshold>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006f0:	f000 f9de 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_USART1_UART_Init+0x90>)
 80006f6:	f002 fcb2 	bl	800305e <HAL_UARTEx_DisableFifoMode>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000700:	f000 f9d6 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000e4 	.word	0x200000e4
 800070c:	40013800 	.word	0x40013800

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b4c      	ldr	r3, [pc, #304]	@ (8000858 <MX_GPIO_Init+0x148>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a4b      	ldr	r2, [pc, #300]	@ (8000858 <MX_GPIO_Init+0x148>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b49      	ldr	r3, [pc, #292]	@ (8000858 <MX_GPIO_Init+0x148>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073e:	4b46      	ldr	r3, [pc, #280]	@ (8000858 <MX_GPIO_Init+0x148>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a45      	ldr	r2, [pc, #276]	@ (8000858 <MX_GPIO_Init+0x148>)
 8000744:	f043 0320 	orr.w	r3, r3, #32
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b43      	ldr	r3, [pc, #268]	@ (8000858 <MX_GPIO_Init+0x148>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0320 	and.w	r3, r3, #32
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b40      	ldr	r3, [pc, #256]	@ (8000858 <MX_GPIO_Init+0x148>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	4a3f      	ldr	r2, [pc, #252]	@ (8000858 <MX_GPIO_Init+0x148>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000762:	4b3d      	ldr	r3, [pc, #244]	@ (8000858 <MX_GPIO_Init+0x148>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b3a      	ldr	r3, [pc, #232]	@ (8000858 <MX_GPIO_Init+0x148>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a39      	ldr	r2, [pc, #228]	@ (8000858 <MX_GPIO_Init+0x148>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b37      	ldr	r3, [pc, #220]	@ (8000858 <MX_GPIO_Init+0x148>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2132      	movs	r1, #50	@ 0x32
 800078a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078e:	f000 fe01 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2101      	movs	r1, #1
 8000796:	4831      	ldr	r0, [pc, #196]	@ (800085c <MX_GPIO_Init+0x14c>)
 8000798:	f000 fdfc 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	482b      	ldr	r0, [pc, #172]	@ (8000860 <MX_GPIO_Init+0x150>)
 80007b4:	f000 fc54 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b8:	2301      	movs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4825      	ldr	r0, [pc, #148]	@ (8000860 <MX_GPIO_Init+0x150>)
 80007cc:	f000 fc48 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d0:	2301      	movs	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e6:	f000 fc3b 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 80007ea:	2332      	movs	r3, #50	@ 0x32
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007ee:	2311      	movs	r3, #17
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000804:	f000 fc2c 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000808:	2301      	movs	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800080c:	2311      	movs	r3, #17
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	480f      	ldr	r0, [pc, #60]	@ (800085c <MX_GPIO_Init+0x14c>)
 8000820:	f000 fc1e 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000824:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083c:	f000 fc10 	bl	8001060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	2028      	movs	r0, #40	@ 0x28
 8000846:	f000 fbd6 	bl	8000ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800084a:	2028      	movs	r0, #40	@ 0x28
 800084c:	f000 fbed 	bl	800102a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	@ 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	48000400 	.word	0x48000400
 8000860:	48000800 	.word	0x48000800

08000864 <ButtonMatrixRead>:

/* USER CODE BEGIN 4 */
void ButtonMatrixRead(){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
static uint8_t X=0;
for(int i=0; i<2; i++)
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	e035      	b.n	80008dc <ButtonMatrixRead+0x78>
{
if(HAL_GPIO_ReadPin(BMX_L[i].Port, BMX_L[i].Pin) == GPIO_PIN_RESET)
 8000870:	4a35      	ldr	r2, [pc, #212]	@ (8000948 <ButtonMatrixRead+0xe4>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000878:	4933      	ldr	r1, [pc, #204]	@ (8000948 <ButtonMatrixRead+0xe4>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	440b      	add	r3, r1
 8000880:	889b      	ldrh	r3, [r3, #4]
 8000882:	4619      	mov	r1, r3
 8000884:	4610      	mov	r0, r2
 8000886:	f000 fd6d 	bl	8001364 <HAL_GPIO_ReadPin>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d110      	bne.n	80008b2 <ButtonMatrixRead+0x4e>
{ //ปุ่มถู�?�?ด
ButtonState |= 1 << (i + (X * 2));
 8000890:	4b2e      	ldr	r3, [pc, #184]	@ (800094c <ButtonMatrixRead+0xe8>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	005a      	lsls	r2, r3, #1
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	2201      	movs	r2, #1
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <ButtonMatrixRead+0xec>)
 80008a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b21a      	sxth	r2, r3
 80008ac:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <ButtonMatrixRead+0xec>)
 80008ae:	801a      	strh	r2, [r3, #0]
 80008b0:	e011      	b.n	80008d6 <ButtonMatrixRead+0x72>
}
else
{
ButtonState &= ~(1 << (i + (X * 2)));
 80008b2:	4b26      	ldr	r3, [pc, #152]	@ (800094c <ButtonMatrixRead+0xe8>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	005a      	lsls	r2, r3, #1
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4413      	add	r3, r2
 80008bc:	2201      	movs	r2, #1
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	b21a      	sxth	r2, r3
 80008c8:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <ButtonMatrixRead+0xec>)
 80008ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ce:	4013      	ands	r3, r2
 80008d0:	b21a      	sxth	r2, r3
 80008d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <ButtonMatrixRead+0xec>)
 80008d4:	801a      	strh	r2, [r3, #0]
for(int i=0; i<2; i++)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3301      	adds	r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	ddc6      	ble.n	8000870 <ButtonMatrixRead+0xc>
}
}
//set currentL to Hi-z (open drain)
HAL_GPIO_WritePin(BMX_R[X].Port, BMX_R[X].Pin, GPIO_PIN_SET);
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <ButtonMatrixRead+0xe8>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <ButtonMatrixRead+0xf0>)
 80008ea:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80008ee:	4b17      	ldr	r3, [pc, #92]	@ (800094c <ButtonMatrixRead+0xe8>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4a18      	ldr	r2, [pc, #96]	@ (8000954 <ButtonMatrixRead+0xf0>)
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	4413      	add	r3, r2
 80008f8:	889b      	ldrh	r3, [r3, #4]
 80008fa:	2201      	movs	r2, #1
 80008fc:	4619      	mov	r1, r3
 80008fe:	f000 fd49 	bl	8001394 <HAL_GPIO_WritePin>
//set nextL to low
uint8_t nextX = (X + 1) % 3;
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <ButtonMatrixRead+0xe8>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <ButtonMatrixRead+0xf4>)
 800090a:	fb83 3102 	smull	r3, r1, r3, r2
 800090e:	17d3      	asrs	r3, r2, #31
 8000910:	1ac9      	subs	r1, r1, r3
 8000912:	460b      	mov	r3, r1
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	440b      	add	r3, r1
 8000918:	1ad1      	subs	r1, r2, r3
 800091a:	460b      	mov	r3, r1
 800091c:	70fb      	strb	r3, [r7, #3]
HAL_GPIO_WritePin(BMX_R[nextX].Port, BMX_R[nextX].Pin, GPIO_PIN_RESET);
 800091e:	78fb      	ldrb	r3, [r7, #3]
 8000920:	4a0c      	ldr	r2, [pc, #48]	@ (8000954 <ButtonMatrixRead+0xf0>)
 8000922:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000926:	78fb      	ldrb	r3, [r7, #3]
 8000928:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <ButtonMatrixRead+0xf0>)
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	4413      	add	r3, r2
 800092e:	889b      	ldrh	r3, [r3, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	4619      	mov	r1, r3
 8000934:	f000 fd2e 	bl	8001394 <HAL_GPIO_WritePin>
X = nextX;
 8000938:	4a04      	ldr	r2, [pc, #16]	@ (800094c <ButtonMatrixRead+0xe8>)
 800093a:	78fb      	ldrb	r3, [r7, #3]
 800093c:	7013      	strb	r3, [r2, #0]
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000000 	.word	0x20000000
 800094c:	2000018c 	.word	0x2000018c
 8000950:	20000178 	.word	0x20000178
 8000954:	20000010 	.word	0x20000010
 8000958:	55555556 	.word	0x55555556

0800095c <Numarray>:
void Numarray()
	{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
//	if(ButtonState==0 && first_num!=0 && second_num!=0)
//	{
//	first_num=0;
//	second_num=0;
//	}
		if(first_num==0 || second_num==0)
 8000960:	4b21      	ldr	r3, [pc, #132]	@ (80009e8 <Numarray+0x8c>)
 8000962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d004      	beq.n	8000974 <Numarray+0x18>
 800096a:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <Numarray+0x90>)
 800096c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d134      	bne.n	80009de <Numarray+0x82>
		{
	                if(ButtonState==2)
 8000974:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <Numarray+0x94>)
 8000976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800097a:	2b02      	cmp	r3, #2
 800097c:	d103      	bne.n	8000986 <Numarray+0x2a>
	                {
//	                	second_element[i]='Rock';
	                	second_num=1;
 800097e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <Numarray+0x90>)
 8000980:	2201      	movs	r2, #1
 8000982:	801a      	strh	r2, [r3, #0]
//	                	second_element='Scissors';
	                	second_num=3;
	                }

	}
	}
 8000984:	e02b      	b.n	80009de <Numarray+0x82>
	                else if(ButtonState==1)
 8000986:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <Numarray+0x94>)
 8000988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d103      	bne.n	8000998 <Numarray+0x3c>
	                	first_num=1;
 8000990:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <Numarray+0x8c>)
 8000992:	2201      	movs	r2, #1
 8000994:	801a      	strh	r2, [r3, #0]
	}
 8000996:	e022      	b.n	80009de <Numarray+0x82>
	                else if(ButtonState==4)
 8000998:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <Numarray+0x94>)
 800099a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d103      	bne.n	80009aa <Numarray+0x4e>
	                	first_num=2;
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <Numarray+0x8c>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	801a      	strh	r2, [r3, #0]
	}
 80009a8:	e019      	b.n	80009de <Numarray+0x82>
	                else if(ButtonState==8)
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <Numarray+0x94>)
 80009ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b0:	2b08      	cmp	r3, #8
 80009b2:	d103      	bne.n	80009bc <Numarray+0x60>
	                	second_num=2;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <Numarray+0x90>)
 80009b6:	2202      	movs	r2, #2
 80009b8:	801a      	strh	r2, [r3, #0]
	}
 80009ba:	e010      	b.n	80009de <Numarray+0x82>
	                else if (ButtonState==16)
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <Numarray+0x94>)
 80009be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c2:	2b10      	cmp	r3, #16
 80009c4:	d103      	bne.n	80009ce <Numarray+0x72>
	                	first_num=3;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <Numarray+0x8c>)
 80009c8:	2203      	movs	r2, #3
 80009ca:	801a      	strh	r2, [r3, #0]
	}
 80009cc:	e007      	b.n	80009de <Numarray+0x82>
	                else if (ButtonState==32)
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <Numarray+0x94>)
 80009d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d4:	2b20      	cmp	r3, #32
 80009d6:	d102      	bne.n	80009de <Numarray+0x82>
	                	second_num=3;
 80009d8:	4b04      	ldr	r3, [pc, #16]	@ (80009ec <Numarray+0x90>)
 80009da:	2203      	movs	r2, #3
 80009dc:	801a      	strh	r2, [r3, #0]
	}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	2000017a 	.word	0x2000017a
 80009ec:	2000017c 	.word	0x2000017c
 80009f0:	20000178 	.word	0x20000178

080009f4 <sendUART>:
void sendUART()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	fight=first_num-second_num;
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <sendUART+0xa4>)
 80009fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	4b26      	ldr	r3, [pc, #152]	@ (8000a9c <sendUART+0xa8>)
 8000a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	4b24      	ldr	r3, [pc, #144]	@ (8000aa0 <sendUART+0xac>)
 8000a10:	801a      	strh	r2, [r3, #0]
	if(fight<0 || fight==2){
 8000a12:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <sendUART+0xac>)
 8000a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db04      	blt.n	8000a26 <sendUART+0x32>
 8000a1c:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <sendUART+0xac>)
 8000a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d103      	bne.n	8000a2e <sendUART+0x3a>
		result=1;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <sendUART+0xb0>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	801a      	strh	r2, [r3, #0]
 8000a2c:	e016      	b.n	8000a5c <sendUART+0x68>
	}
	else if(fight>0 || fight==-2)
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <sendUART+0xac>)
 8000a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	dc05      	bgt.n	8000a44 <sendUART+0x50>
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <sendUART+0xac>)
 8000a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a3e:	f113 0f02 	cmn.w	r3, #2
 8000a42:	d103      	bne.n	8000a4c <sendUART+0x58>
	{
		result=2;
 8000a44:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <sendUART+0xb0>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	801a      	strh	r2, [r3, #0]
 8000a4a:	e007      	b.n	8000a5c <sendUART+0x68>
	}
	else if (fight==0)
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <sendUART+0xac>)
 8000a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d102      	bne.n	8000a5c <sendUART+0x68>
	{
		result=0;
 8000a56:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <sendUART+0xb0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	801a      	strh	r2, [r3, #0]
	}
		databytes[0] = 0x45; // Header byte
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <sendUART+0xb4>)
 8000a5e:	2245      	movs	r2, #69	@ 0x45
 8000a60:	701a      	strb	r2, [r3, #0]
		databytes[1] = (uint8_t)(result & 0x00FF); // Lower byte
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <sendUART+0xb0>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <sendUART+0xb4>)
 8000a6a:	705a      	strb	r2, [r3, #1]
		databytes[2] = (uint8_t)((result >> 8) & 0x00FF); // Upper byte
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <sendUART+0xb0>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <sendUART+0xb4>)
 8000a78:	709a      	strb	r2, [r3, #2]
		databytes[3] = 0x0A;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <sendUART+0xb4>)
 8000a7c:	220a      	movs	r2, #10
 8000a7e:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit(&hlpuart1, databytes, sizeof(databytes), 10);
 8000a80:	230a      	movs	r3, #10
 8000a82:	2204      	movs	r2, #4
 8000a84:	4908      	ldr	r1, [pc, #32]	@ (8000aa8 <sendUART+0xb4>)
 8000a86:	4809      	ldr	r0, [pc, #36]	@ (8000aac <sendUART+0xb8>)
 8000a88:	f001 fd40 	bl	800250c <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart1, databytes, sizeof(databytes), 10);

		HAL_Delay(500);
 8000a8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a90:	f000 f9b4 	bl	8000dfc <HAL_Delay>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000017a 	.word	0x2000017a
 8000a9c:	2000017c 	.word	0x2000017c
 8000aa0:	2000017e 	.word	0x2000017e
 8000aa4:	20000184 	.word	0x20000184
 8000aa8:	20000180 	.word	0x20000180
 8000aac:	20000050 	.word	0x20000050

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <Error_Handler+0x8>

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ade:	4a08      	ldr	r2, [pc, #32]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <HAL_MspInit+0x44>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000af2:	f000 fd2f 	bl	8001554 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0a0      	sub	sp, #128	@ 0x80
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b1c:	f107 0318 	add.w	r3, r7, #24
 8000b20:	2254      	movs	r2, #84	@ 0x54
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 fb9d 	bl	8003264 <memset>
  if(huart->Instance==LPUART1)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c24 <HAL_UART_MspInit+0x120>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d137      	bne.n	8000ba4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b34:	2320      	movs	r3, #32
 8000b36:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 fa45 	bl	8001fd0 <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b4c:	f7ff ffb0 	bl	8000ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b50:	4b35      	ldr	r3, [pc, #212]	@ (8000c28 <HAL_UART_MspInit+0x124>)
 8000b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b54:	4a34      	ldr	r2, [pc, #208]	@ (8000c28 <HAL_UART_MspInit+0x124>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b5c:	4b32      	ldr	r3, [pc, #200]	@ (8000c28 <HAL_UART_MspInit+0x124>)
 8000b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b2f      	ldr	r3, [pc, #188]	@ (8000c28 <HAL_UART_MspInit+0x124>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8000c28 <HAL_UART_MspInit+0x124>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b74:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <HAL_UART_MspInit+0x124>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b80:	230c      	movs	r3, #12
 8000b82:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b90:	230c      	movs	r3, #12
 8000b92:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9e:	f000 fa5f 	bl	8001060 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ba2:	e03a      	b.n	8000c1a <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a20      	ldr	r2, [pc, #128]	@ (8000c2c <HAL_UART_MspInit+0x128>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d135      	bne.n	8000c1a <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb6:	f107 0318 	add.w	r3, r7, #24
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fa08 	bl	8001fd0 <HAL_RCCEx_PeriphCLKConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000bc6:	f7ff ff73 	bl	8000ab0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bca:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <HAL_UART_MspInit+0x124>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bce:	4a16      	ldr	r2, [pc, #88]	@ (8000c28 <HAL_UART_MspInit+0x124>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bd6:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <HAL_UART_MspInit+0x124>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <HAL_UART_MspInit+0x124>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <HAL_UART_MspInit+0x124>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <HAL_UART_MspInit+0x124>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bfa:	2330      	movs	r3, #48	@ 0x30
 8000bfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c12:	4619      	mov	r1, r3
 8000c14:	4806      	ldr	r0, [pc, #24]	@ (8000c30 <HAL_UART_MspInit+0x12c>)
 8000c16:	f000 fa23 	bl	8001060 <HAL_GPIO_Init>
}
 8000c1a:	bf00      	nop
 8000c1c:	3780      	adds	r7, #128	@ 0x80
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40008000 	.word	0x40008000
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40013800 	.word	0x40013800
 8000c30:	48000800 	.word	0x48000800

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <NMI_Handler+0x4>

08000c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8a:	f000 f899 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c96:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c9a:	f000 fb93 	bl	80013c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	@ (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc8:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ccc:	f7ff ffea 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	@ (8000d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <LoopForever+0xe>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d14 <LoopForever+0x16>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f002 fabd 	bl	8003274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cfa:	f7ff fc05 	bl	8000508 <main>

08000cfe <LoopForever>:

LoopForever:
    b LoopForever
 8000cfe:	e7fe      	b.n	8000cfe <LoopForever>
  ldr   r0, =_estack
 8000d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000d0c:	08003324 	.word	0x08003324
  ldr r2, =_sbss
 8000d10:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000d14:	20000194 	.word	0x20000194

08000d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_2_IRQHandler>

08000d1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f95b 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f80e 	bl	8000d4c <HAL_InitTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	71fb      	strb	r3, [r7, #7]
 8000d3a:	e001      	b.n	8000d40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3c:	f7ff febe 	bl	8000abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d40:	79fb      	ldrb	r3, [r7, #7]

}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <HAL_InitTick+0x68>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d022      	beq.n	8000da6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_InitTick+0x6c>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <HAL_InitTick+0x68>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f966 	bl	8001046 <HAL_SYSTICK_Config>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10f      	bne.n	8000da0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b0f      	cmp	r3, #15
 8000d84:	d809      	bhi.n	8000d9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d86:	2200      	movs	r2, #0
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8e:	f000 f932 	bl	8000ff6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <HAL_InitTick+0x70>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	e007      	b.n	8000daa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	e004      	b.n	8000daa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	e001      	b.n	8000daa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000030 	.word	0x20000030
 8000db8:	20000028 	.word	0x20000028
 8000dbc:	2000002c 	.word	0x2000002c

08000dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <HAL_IncTick+0x1c>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <HAL_IncTick+0x20>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a03      	ldr	r2, [pc, #12]	@ (8000ddc <HAL_IncTick+0x1c>)
 8000dd0:	6013      	str	r3, [r2, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	20000190 	.word	0x20000190
 8000de0:	20000030 	.word	0x20000030

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	@ (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000190 	.word	0x20000190

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d004      	beq.n	8000e20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <HAL_Delay+0x40>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e20:	bf00      	nop
 8000e22:	f7ff ffdf 	bl	8000de4 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d8f7      	bhi.n	8000e22 <HAL_Delay+0x26>
  {
  }
}
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000030 	.word	0x20000030

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	@ (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	@ (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	@ (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	@ 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff29 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff40 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff90 	bl	8000f34 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5f 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff33 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffa4 	bl	8000f9c <SysTick_Config>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800106e:	e15a      	b.n	8001326 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2101      	movs	r1, #1
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	4013      	ands	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 814c 	beq.w	8001320 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b01      	cmp	r3, #1
 8001092:	d005      	beq.n	80010a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800109c:	2b02      	cmp	r3, #2
 800109e:	d130      	bne.n	8001102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010d6:	2201      	movs	r2, #1
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	091b      	lsrs	r3, r3, #4
 80010ec:	f003 0201 	and.w	r2, r3, #1
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b03      	cmp	r3, #3
 800110c:	d017      	beq.n	800113e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d123      	bne.n	8001192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	220f      	movs	r2, #15
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	691a      	ldr	r2, [r3, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	08da      	lsrs	r2, r3, #3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3208      	adds	r2, #8
 800118c:	6939      	ldr	r1, [r7, #16]
 800118e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2203      	movs	r2, #3
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0203 	and.w	r2, r3, #3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 80a6 	beq.w	8001320 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001344 <HAL_GPIO_Init+0x2e4>)
 80011d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d8:	4a5a      	ldr	r2, [pc, #360]	@ (8001344 <HAL_GPIO_Init+0x2e4>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6613      	str	r3, [r2, #96]	@ 0x60
 80011e0:	4b58      	ldr	r3, [pc, #352]	@ (8001344 <HAL_GPIO_Init+0x2e4>)
 80011e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ec:	4a56      	ldr	r2, [pc, #344]	@ (8001348 <HAL_GPIO_Init+0x2e8>)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	220f      	movs	r2, #15
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001216:	d01f      	beq.n	8001258 <HAL_GPIO_Init+0x1f8>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a4c      	ldr	r2, [pc, #304]	@ (800134c <HAL_GPIO_Init+0x2ec>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d019      	beq.n	8001254 <HAL_GPIO_Init+0x1f4>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a4b      	ldr	r2, [pc, #300]	@ (8001350 <HAL_GPIO_Init+0x2f0>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d013      	beq.n	8001250 <HAL_GPIO_Init+0x1f0>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a4a      	ldr	r2, [pc, #296]	@ (8001354 <HAL_GPIO_Init+0x2f4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d00d      	beq.n	800124c <HAL_GPIO_Init+0x1ec>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a49      	ldr	r2, [pc, #292]	@ (8001358 <HAL_GPIO_Init+0x2f8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d007      	beq.n	8001248 <HAL_GPIO_Init+0x1e8>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a48      	ldr	r2, [pc, #288]	@ (800135c <HAL_GPIO_Init+0x2fc>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d101      	bne.n	8001244 <HAL_GPIO_Init+0x1e4>
 8001240:	2305      	movs	r3, #5
 8001242:	e00a      	b.n	800125a <HAL_GPIO_Init+0x1fa>
 8001244:	2306      	movs	r3, #6
 8001246:	e008      	b.n	800125a <HAL_GPIO_Init+0x1fa>
 8001248:	2304      	movs	r3, #4
 800124a:	e006      	b.n	800125a <HAL_GPIO_Init+0x1fa>
 800124c:	2303      	movs	r3, #3
 800124e:	e004      	b.n	800125a <HAL_GPIO_Init+0x1fa>
 8001250:	2302      	movs	r3, #2
 8001252:	e002      	b.n	800125a <HAL_GPIO_Init+0x1fa>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <HAL_GPIO_Init+0x1fa>
 8001258:	2300      	movs	r3, #0
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	f002 0203 	and.w	r2, r2, #3
 8001260:	0092      	lsls	r2, r2, #2
 8001262:	4093      	lsls	r3, r2
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800126a:	4937      	ldr	r1, [pc, #220]	@ (8001348 <HAL_GPIO_Init+0x2e8>)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	3302      	adds	r3, #2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001278:	4b39      	ldr	r3, [pc, #228]	@ (8001360 <HAL_GPIO_Init+0x300>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800129c:	4a30      	ldr	r2, [pc, #192]	@ (8001360 <HAL_GPIO_Init+0x300>)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001360 <HAL_GPIO_Init+0x300>)
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012c6:	4a26      	ldr	r2, [pc, #152]	@ (8001360 <HAL_GPIO_Init+0x300>)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012cc:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <HAL_GPIO_Init+0x300>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001360 <HAL_GPIO_Init+0x300>)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001360 <HAL_GPIO_Init+0x300>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800131a:	4a11      	ldr	r2, [pc, #68]	@ (8001360 <HAL_GPIO_Init+0x300>)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	f47f ae9d 	bne.w	8001070 <HAL_GPIO_Init+0x10>
  }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000
 8001348:	40010000 	.word	0x40010000
 800134c:	48000400 	.word	0x48000400
 8001350:	48000800 	.word	0x48000800
 8001354:	48000c00 	.word	0x48000c00
 8001358:	48001000 	.word	0x48001000
 800135c:	48001400 	.word	0x48001400
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e001      	b.n	8001386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013da:	4a05      	ldr	r2, [pc, #20]	@ (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f806 	bl	80013f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40010400 	.word	0x40010400

080013f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d141      	bne.n	800149e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800141a:	4b4b      	ldr	r3, [pc, #300]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001426:	d131      	bne.n	800148c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001428:	4b47      	ldr	r3, [pc, #284]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800142e:	4a46      	ldr	r2, [pc, #280]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001434:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001438:	4b43      	ldr	r3, [pc, #268]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001440:	4a41      	ldr	r2, [pc, #260]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001442:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001446:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001448:	4b40      	ldr	r3, [pc, #256]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2232      	movs	r2, #50	@ 0x32
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	4a3f      	ldr	r2, [pc, #252]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001454:	fba2 2303 	umull	r2, r3, r2, r3
 8001458:	0c9b      	lsrs	r3, r3, #18
 800145a:	3301      	adds	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800145e:	e002      	b.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3b01      	subs	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001466:	4b38      	ldr	r3, [pc, #224]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800146e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001472:	d102      	bne.n	800147a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f2      	bne.n	8001460 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800147a:	4b33      	ldr	r3, [pc, #204]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001486:	d158      	bne.n	800153a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e057      	b.n	800153c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800148c:	4b2e      	ldr	r3, [pc, #184]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001492:	4a2d      	ldr	r2, [pc, #180]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001494:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001498:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800149c:	e04d      	b.n	800153a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014a4:	d141      	bne.n	800152a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014a6:	4b28      	ldr	r3, [pc, #160]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014b2:	d131      	bne.n	8001518 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014b4:	4b24      	ldr	r3, [pc, #144]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ba:	4a23      	ldr	r2, [pc, #140]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c4:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2232      	movs	r2, #50	@ 0x32
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	4a1c      	ldr	r2, [pc, #112]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	0c9b      	lsrs	r3, r3, #18
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ea:	e002      	b.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014fe:	d102      	bne.n	8001506 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f2      	bne.n	80014ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001512:	d112      	bne.n	800153a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e011      	b.n	800153c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001524:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001528:	e007      	b.n	800153a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001532:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001538:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40007000 	.word	0x40007000
 800154c:	20000028 	.word	0x20000028
 8001550:	431bde83 	.word	0x431bde83

08001554 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001558:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800155e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001562:	6093      	str	r3, [r2, #8]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40007000 	.word	0x40007000

08001574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e2fe      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d075      	beq.n	800167e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001592:	4b97      	ldr	r3, [pc, #604]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800159c:	4b94      	ldr	r3, [pc, #592]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b0c      	cmp	r3, #12
 80015aa:	d102      	bne.n	80015b2 <HAL_RCC_OscConfig+0x3e>
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d002      	beq.n	80015b8 <HAL_RCC_OscConfig+0x44>
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d10b      	bne.n	80015d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	4b8d      	ldr	r3, [pc, #564]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d05b      	beq.n	800167c <HAL_RCC_OscConfig+0x108>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d157      	bne.n	800167c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e2d9      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015d8:	d106      	bne.n	80015e8 <HAL_RCC_OscConfig+0x74>
 80015da:	4b85      	ldr	r3, [pc, #532]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a84      	ldr	r2, [pc, #528]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e01d      	b.n	8001624 <HAL_RCC_OscConfig+0xb0>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0x98>
 80015f2:	4b7f      	ldr	r3, [pc, #508]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a7e      	ldr	r2, [pc, #504]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80015f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b7c      	ldr	r3, [pc, #496]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a7b      	ldr	r2, [pc, #492]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 8001604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0xb0>
 800160c:	4b78      	ldr	r3, [pc, #480]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a77      	ldr	r2, [pc, #476]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 8001612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b75      	ldr	r3, [pc, #468]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a74      	ldr	r2, [pc, #464]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 800161e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d013      	beq.n	8001654 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fbda 	bl	8000de4 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fbd6 	bl	8000de4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	@ 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e29e      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001646:	4b6a      	ldr	r3, [pc, #424]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0xc0>
 8001652:	e014      	b.n	800167e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fbc6 	bl	8000de4 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fbc2 	bl	8000de4 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	@ 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e28a      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800166e:	4b60      	ldr	r3, [pc, #384]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0xe8>
 800167a:	e000      	b.n	800167e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d075      	beq.n	8001776 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168a:	4b59      	ldr	r3, [pc, #356]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001694:	4b56      	ldr	r3, [pc, #344]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b0c      	cmp	r3, #12
 80016a2:	d102      	bne.n	80016aa <HAL_RCC_OscConfig+0x136>
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d002      	beq.n	80016b0 <HAL_RCC_OscConfig+0x13c>
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d11f      	bne.n	80016f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b0:	4b4f      	ldr	r3, [pc, #316]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_OscConfig+0x154>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e25d      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b49      	ldr	r3, [pc, #292]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	061b      	lsls	r3, r3, #24
 80016d6:	4946      	ldr	r1, [pc, #280]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016dc:	4b45      	ldr	r3, [pc, #276]	@ (80017f4 <HAL_RCC_OscConfig+0x280>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fb33 	bl	8000d4c <HAL_InitTick>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d043      	beq.n	8001774 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e249      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d023      	beq.n	8001740 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f8:	4b3d      	ldr	r3, [pc, #244]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a3c      	ldr	r2, [pc, #240]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fb6e 	bl	8000de4 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fb6a 	bl	8000de4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e232      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171e:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b31      	ldr	r3, [pc, #196]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	061b      	lsls	r3, r3, #24
 8001738:	492d      	ldr	r1, [pc, #180]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
 800173e:	e01a      	b.n	8001776 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001740:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a2a      	ldr	r2, [pc, #168]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 8001746:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800174a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fb4a 	bl	8000de4 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001754:	f7ff fb46 	bl	8000de4 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e20e      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001766:	4b22      	ldr	r3, [pc, #136]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x1e0>
 8001772:	e000      	b.n	8001776 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001774:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d041      	beq.n	8001806 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d01c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178a:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 800178c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001790:	4a17      	ldr	r2, [pc, #92]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179a:	f7ff fb23 	bl	8000de4 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a2:	f7ff fb1f 	bl	8000de4 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e1e7      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b4:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80017b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0ef      	beq.n	80017a2 <HAL_RCC_OscConfig+0x22e>
 80017c2:	e020      	b.n	8001806 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c4:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80017c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ca:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff fb06 	bl	8000de4 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017da:	e00d      	b.n	80017f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017dc:	f7ff fb02 	bl	8000de4 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d906      	bls.n	80017f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1ca      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f8:	4b8c      	ldr	r3, [pc, #560]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ea      	bne.n	80017dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 80a6 	beq.w	8001960 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001818:	4b84      	ldr	r3, [pc, #528]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_OscConfig+0x2b4>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x2b6>
 8001828:	2300      	movs	r3, #0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00d      	beq.n	800184a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001832:	4a7e      	ldr	r2, [pc, #504]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001838:	6593      	str	r3, [r2, #88]	@ 0x58
 800183a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001846:	2301      	movs	r3, #1
 8001848:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184a:	4b79      	ldr	r3, [pc, #484]	@ (8001a30 <HAL_RCC_OscConfig+0x4bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d118      	bne.n	8001888 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001856:	4b76      	ldr	r3, [pc, #472]	@ (8001a30 <HAL_RCC_OscConfig+0x4bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a75      	ldr	r2, [pc, #468]	@ (8001a30 <HAL_RCC_OscConfig+0x4bc>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001862:	f7ff fabf 	bl	8000de4 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186a:	f7ff fabb 	bl	8000de4 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e183      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187c:	4b6c      	ldr	r3, [pc, #432]	@ (8001a30 <HAL_RCC_OscConfig+0x4bc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d108      	bne.n	80018a2 <HAL_RCC_OscConfig+0x32e>
 8001890:	4b66      	ldr	r3, [pc, #408]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001896:	4a65      	ldr	r2, [pc, #404]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018a0:	e024      	b.n	80018ec <HAL_RCC_OscConfig+0x378>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d110      	bne.n	80018cc <HAL_RCC_OscConfig+0x358>
 80018aa:	4b60      	ldr	r3, [pc, #384]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80018ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b0:	4a5e      	ldr	r2, [pc, #376]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018ba:	4b5c      	ldr	r3, [pc, #368]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80018bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c0:	4a5a      	ldr	r2, [pc, #360]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018ca:	e00f      	b.n	80018ec <HAL_RCC_OscConfig+0x378>
 80018cc:	4b57      	ldr	r3, [pc, #348]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d2:	4a56      	ldr	r2, [pc, #344]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018dc:	4b53      	ldr	r3, [pc, #332]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e2:	4a52      	ldr	r2, [pc, #328]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80018e4:	f023 0304 	bic.w	r3, r3, #4
 80018e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d016      	beq.n	8001922 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7ff fa76 	bl	8000de4 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7ff fa72 	bl	8000de4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e138      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001912:	4b46      	ldr	r3, [pc, #280]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 8001914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0ed      	beq.n	80018fc <HAL_RCC_OscConfig+0x388>
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7ff fa5f 	bl	8000de4 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7ff fa5b 	bl	8000de4 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e121      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001940:	4b3a      	ldr	r3, [pc, #232]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ed      	bne.n	800192a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800194e:	7ffb      	ldrb	r3, [r7, #31]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001954:	4b35      	ldr	r3, [pc, #212]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001958:	4a34      	ldr	r2, [pc, #208]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 800195a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800195e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b00      	cmp	r3, #0
 800196a:	d03c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01c      	beq.n	80019ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001974:	4b2d      	ldr	r3, [pc, #180]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 8001976:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800197a:	4a2c      	ldr	r2, [pc, #176]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff fa2e 	bl	8000de4 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800198c:	f7ff fa2a 	bl	8000de4 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0f2      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800199e:	4b23      	ldr	r3, [pc, #140]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80019a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0ef      	beq.n	800198c <HAL_RCC_OscConfig+0x418>
 80019ac:	e01b      	b.n	80019e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ae:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80019b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019b4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff fa11 	bl	8000de4 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c6:	f7ff fa0d 	bl	8000de4 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e0d5      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019d8:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80019da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1ef      	bne.n	80019c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80c9 	beq.w	8001b82 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	f000 8083 	beq.w	8001b04 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d15e      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a08      	ldr	r2, [pc, #32]	@ (8001a2c <HAL_RCC_OscConfig+0x4b8>)
 8001a0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff f9e7 	bl	8000de4 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a18:	e00c      	b.n	8001a34 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7ff f9e3 	bl	8000de4 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d905      	bls.n	8001a34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e0ab      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a34:	4b55      	ldr	r3, [pc, #340]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ec      	bne.n	8001a1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a40:	4b52      	ldr	r3, [pc, #328]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4b52      	ldr	r3, [pc, #328]	@ (8001b90 <HAL_RCC_OscConfig+0x61c>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6a11      	ldr	r1, [r2, #32]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a50:	3a01      	subs	r2, #1
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	4311      	orrs	r1, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001a5a:	0212      	lsls	r2, r2, #8
 8001a5c:	4311      	orrs	r1, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a62:	0852      	lsrs	r2, r2, #1
 8001a64:	3a01      	subs	r2, #1
 8001a66:	0552      	lsls	r2, r2, #21
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a6e:	0852      	lsrs	r2, r2, #1
 8001a70:	3a01      	subs	r2, #1
 8001a72:	0652      	lsls	r2, r2, #25
 8001a74:	4311      	orrs	r1, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a7a:	06d2      	lsls	r2, r2, #27
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	4943      	ldr	r1, [pc, #268]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a84:	4b41      	ldr	r3, [pc, #260]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a40      	ldr	r2, [pc, #256]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001a8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a90:	4b3e      	ldr	r3, [pc, #248]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4a3d      	ldr	r2, [pc, #244]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001a96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f9a2 	bl	8000de4 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f99e 	bl	8000de4 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e066      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab6:	4b35      	ldr	r3, [pc, #212]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x530>
 8001ac2:	e05e      	b.n	8001b82 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b31      	ldr	r3, [pc, #196]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a30      	ldr	r2, [pc, #192]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001aca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f988 	bl	8000de4 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f984 	bl	8000de4 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e04c      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aea:	4b28      	ldr	r3, [pc, #160]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001af6:	4b25      	ldr	r3, [pc, #148]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	4924      	ldr	r1, [pc, #144]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001afc:	4b25      	ldr	r3, [pc, #148]	@ (8001b94 <HAL_RCC_OscConfig+0x620>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	60cb      	str	r3, [r1, #12]
 8001b02:	e03e      	b.n	8001b82 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e039      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b10:	4b1e      	ldr	r3, [pc, #120]	@ (8001b8c <HAL_RCC_OscConfig+0x618>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d12c      	bne.n	8001b7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d123      	bne.n	8001b7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b40:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d11b      	bne.n	8001b7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b50:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d113      	bne.n	8001b7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	3b01      	subs	r3, #1
 8001b64:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b74:	085b      	lsrs	r3, r3, #1
 8001b76:	3b01      	subs	r3, #1
 8001b78:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	019f800c 	.word	0x019f800c
 8001b94:	feeefffc 	.word	0xfeeefffc

08001b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e11e      	b.n	8001dee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b91      	ldr	r3, [pc, #580]	@ (8001df8 <HAL_RCC_ClockConfig+0x260>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d910      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b8e      	ldr	r3, [pc, #568]	@ (8001df8 <HAL_RCC_ClockConfig+0x260>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 020f 	bic.w	r2, r3, #15
 8001bc6:	498c      	ldr	r1, [pc, #560]	@ (8001df8 <HAL_RCC_ClockConfig+0x260>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b8a      	ldr	r3, [pc, #552]	@ (8001df8 <HAL_RCC_ClockConfig+0x260>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e106      	b.n	8001dee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d073      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d129      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf4:	4b81      	ldr	r3, [pc, #516]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0f4      	b.n	8001dee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c04:	f000 f99e 	bl	8001f44 <RCC_GetSysClockFreqFromPLLSource>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4a7c      	ldr	r2, [pc, #496]	@ (8001e00 <HAL_RCC_ClockConfig+0x268>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d93f      	bls.n	8001c92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c12:	4b7a      	ldr	r3, [pc, #488]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d033      	beq.n	8001c92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d12f      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c32:	4b72      	ldr	r3, [pc, #456]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c3a:	4a70      	ldr	r2, [pc, #448]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c42:	2380      	movs	r3, #128	@ 0x80
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e024      	b.n	8001c92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c50:	4b6a      	ldr	r3, [pc, #424]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d109      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0c6      	b.n	8001dee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c60:	4b66      	ldr	r3, [pc, #408]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0be      	b.n	8001dee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c70:	f000 f8ce 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4a61      	ldr	r2, [pc, #388]	@ (8001e00 <HAL_RCC_ClockConfig+0x268>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d909      	bls.n	8001c92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c86:	4a5d      	ldr	r2, [pc, #372]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c8e:	2380      	movs	r3, #128	@ 0x80
 8001c90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b5a      	ldr	r3, [pc, #360]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4957      	ldr	r1, [pc, #348]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca4:	f7ff f89e 	bl	8000de4 <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff f89a 	bl	8000de4 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e095      	b.n	8001dee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b4e      	ldr	r3, [pc, #312]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d023      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cec:	4b43      	ldr	r3, [pc, #268]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	4a42      	ldr	r2, [pc, #264]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001cf2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cf6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d04:	4b3d      	ldr	r3, [pc, #244]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d0c:	4a3b      	ldr	r2, [pc, #236]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001d0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	4b39      	ldr	r3, [pc, #228]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4936      	ldr	r1, [pc, #216]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b80      	cmp	r3, #128	@ 0x80
 8001d2c:	d105      	bne.n	8001d3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d2e:	4b33      	ldr	r3, [pc, #204]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	4a32      	ldr	r2, [pc, #200]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001d34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001df8 <HAL_RCC_ClockConfig+0x260>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d21d      	bcs.n	8001d84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d48:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <HAL_RCC_ClockConfig+0x260>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f023 020f 	bic.w	r2, r3, #15
 8001d50:	4929      	ldr	r1, [pc, #164]	@ (8001df8 <HAL_RCC_ClockConfig+0x260>)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d58:	f7ff f844 	bl	8000de4 <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f7ff f840 	bl	8000de4 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e03b      	b.n	8001dee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <HAL_RCC_ClockConfig+0x260>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d1ed      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4917      	ldr	r1, [pc, #92]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dae:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	490f      	ldr	r1, [pc, #60]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dc2:	f000 f825 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <HAL_RCC_ClockConfig+0x264>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	490c      	ldr	r1, [pc, #48]	@ (8001e04 <HAL_RCC_ClockConfig+0x26c>)
 8001dd4:	5ccb      	ldrb	r3, [r1, r3]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <HAL_RCC_ClockConfig+0x270>)
 8001de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001de2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e0c <HAL_RCC_ClockConfig+0x274>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe ffb0 	bl	8000d4c <HAL_InitTick>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40022000 	.word	0x40022000
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	04c4b400 	.word	0x04c4b400
 8001e04:	080032d4 	.word	0x080032d4
 8001e08:	20000028 	.word	0x20000028
 8001e0c:	2000002c 	.word	0x2000002c

08001e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e16:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d102      	bne.n	8001e28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e22:	4b2a      	ldr	r3, [pc, #168]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	e047      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e28:	4b27      	ldr	r3, [pc, #156]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d102      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e34:	4b26      	ldr	r3, [pc, #152]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	e03e      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d136      	bne.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e46:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d10c      	bne.n	8001e7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e64:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6c:	4a16      	ldr	r2, [pc, #88]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6e:	68d2      	ldr	r2, [r2, #12]
 8001e70:	0a12      	lsrs	r2, r2, #8
 8001e72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
      break;
 8001e7c:	e00c      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e7e:	4a13      	ldr	r2, [pc, #76]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	4a10      	ldr	r2, [pc, #64]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e88:	68d2      	ldr	r2, [r2, #12]
 8001e8a:	0a12      	lsrs	r2, r2, #8
 8001e8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
      break;
 8001e96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0e5b      	lsrs	r3, r3, #25
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	e001      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001eb8:	693b      	ldr	r3, [r7, #16]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	00f42400 	.word	0x00f42400
 8001ed0:	016e3600 	.word	0x016e3600

08001ed4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000028 	.word	0x20000028

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ef0:	f7ff fff0 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4904      	ldr	r1, [pc, #16]	@ (8001f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	080032e4 	.word	0x080032e4

08001f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f1c:	f7ff ffda 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	0adb      	lsrs	r3, r3, #11
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	4904      	ldr	r1, [pc, #16]	@ (8001f40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	080032e4 	.word	0x080032e4

08001f44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d10c      	bne.n	8001f82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f68:	4a17      	ldr	r2, [pc, #92]	@ (8001fc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	4a14      	ldr	r2, [pc, #80]	@ (8001fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f72:	68d2      	ldr	r2, [r2, #12]
 8001f74:	0a12      	lsrs	r2, r2, #8
 8001f76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
    break;
 8001f80:	e00c      	b.n	8001f9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f82:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f8c:	68d2      	ldr	r2, [r2, #12]
 8001f8e:	0a12      	lsrs	r2, r2, #8
 8001f90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f94:	fb02 f303 	mul.w	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
    break;
 8001f9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0e5b      	lsrs	r3, r3, #25
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001fb6:	687b      	ldr	r3, [r7, #4]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	016e3600 	.word	0x016e3600
 8001fcc:	00f42400 	.word	0x00f42400

08001fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fd8:	2300      	movs	r3, #0
 8001fda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fdc:	2300      	movs	r3, #0
 8001fde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8098 	beq.w	800211e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff2:	4b43      	ldr	r3, [pc, #268]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10d      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b40      	ldr	r3, [pc, #256]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002002:	4a3f      	ldr	r2, [pc, #252]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002008:	6593      	str	r3, [r2, #88]	@ 0x58
 800200a:	4b3d      	ldr	r3, [pc, #244]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002016:	2301      	movs	r3, #1
 8002018:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201a:	4b3a      	ldr	r3, [pc, #232]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a39      	ldr	r2, [pc, #228]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002024:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002026:	f7fe fedd 	bl	8000de4 <HAL_GetTick>
 800202a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800202c:	e009      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202e:	f7fe fed9 	bl	8000de4 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d902      	bls.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	74fb      	strb	r3, [r7, #19]
        break;
 8002040:	e005      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002042:	4b30      	ldr	r3, [pc, #192]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0ef      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800204e:	7cfb      	ldrb	r3, [r7, #19]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d159      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002054:	4b2a      	ldr	r3, [pc, #168]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800205e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d01e      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	d019      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002070:	4b23      	ldr	r3, [pc, #140]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800207a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800207c:	4b20      	ldr	r3, [pc, #128]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002082:	4a1f      	ldr	r2, [pc, #124]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800208c:	4b1c      	ldr	r3, [pc, #112]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002092:	4a1b      	ldr	r2, [pc, #108]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800209c:	4a18      	ldr	r2, [pc, #96]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d016      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ae:	f7fe fe99 	bl	8000de4 <HAL_GetTick>
 80020b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b4:	e00b      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7fe fe95 	bl	8000de4 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d902      	bls.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	74fb      	strb	r3, [r7, #19]
            break;
 80020cc:	e006      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0ec      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10b      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e2:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020f0:	4903      	ldr	r1, [pc, #12]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020f8:	e008      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020fa:	7cfb      	ldrb	r3, [r7, #19]
 80020fc:	74bb      	strb	r3, [r7, #18]
 80020fe:	e005      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800210c:	7c7b      	ldrb	r3, [r7, #17]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d105      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002112:	4ba7      	ldr	r3, [pc, #668]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	4aa6      	ldr	r2, [pc, #664]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002118:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800211c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800212a:	4ba1      	ldr	r3, [pc, #644]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002130:	f023 0203 	bic.w	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	499d      	ldr	r1, [pc, #628]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800214c:	4b98      	ldr	r3, [pc, #608]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002152:	f023 020c 	bic.w	r2, r3, #12
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4995      	ldr	r1, [pc, #596]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800216e:	4b90      	ldr	r3, [pc, #576]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002174:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	498c      	ldr	r1, [pc, #560]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002190:	4b87      	ldr	r3, [pc, #540]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	4984      	ldr	r1, [pc, #528]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021b2:	4b7f      	ldr	r3, [pc, #508]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	497b      	ldr	r1, [pc, #492]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021d4:	4b76      	ldr	r3, [pc, #472]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	4973      	ldr	r1, [pc, #460]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f6:	4b6e      	ldr	r3, [pc, #440]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	496a      	ldr	r1, [pc, #424]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002218:	4b65      	ldr	r3, [pc, #404]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4962      	ldr	r1, [pc, #392]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800223a:	4b5d      	ldr	r3, [pc, #372]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002240:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	4959      	ldr	r1, [pc, #356]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800225c:	4b54      	ldr	r3, [pc, #336]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002262:	f023 0203 	bic.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226a:	4951      	ldr	r1, [pc, #324]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800227e:	4b4c      	ldr	r3, [pc, #304]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002284:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228c:	4948      	ldr	r1, [pc, #288]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800229c:	2b00      	cmp	r3, #0
 800229e:	d015      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022a0:	4b43      	ldr	r3, [pc, #268]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4940      	ldr	r1, [pc, #256]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022be:	d105      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c0:	4b3b      	ldr	r3, [pc, #236]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a3a      	ldr	r2, [pc, #232]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d015      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022d8:	4b35      	ldr	r3, [pc, #212]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e6:	4932      	ldr	r1, [pc, #200]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022f6:	d105      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f8:	4b2d      	ldr	r3, [pc, #180]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a2c      	ldr	r2, [pc, #176]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002302:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d015      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002310:	4b27      	ldr	r3, [pc, #156]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002316:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800231e:	4924      	ldr	r1, [pc, #144]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800232e:	d105      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002330:	4b1f      	ldr	r3, [pc, #124]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a1e      	ldr	r2, [pc, #120]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800233a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d015      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002348:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002356:	4916      	ldr	r1, [pc, #88]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002362:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002366:	d105      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002368:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a10      	ldr	r2, [pc, #64]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002372:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d019      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002386:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	4908      	ldr	r1, [pc, #32]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800239e:	d109      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a0:	4b03      	ldr	r3, [pc, #12]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4a02      	ldr	r2, [pc, #8]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023aa:	60d3      	str	r3, [r2, #12]
 80023ac:	e002      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d015      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023c0:	4b29      	ldr	r3, [pc, #164]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	4926      	ldr	r1, [pc, #152]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023de:	d105      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023e0:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4a20      	ldr	r2, [pc, #128]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d015      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80023f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002406:	4918      	ldr	r1, [pc, #96]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002416:	d105      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002418:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a12      	ldr	r2, [pc, #72]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800241e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002422:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d015      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002430:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002432:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002436:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243e:	490a      	ldr	r1, [pc, #40]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800244e:	d105      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a04      	ldr	r2, [pc, #16]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800245a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800245c:	7cbb      	ldrb	r3, [r7, #18]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000

0800246c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e042      	b.n	8002504 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002484:	2b00      	cmp	r3, #0
 8002486:	d106      	bne.n	8002496 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7fe fb37 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2224      	movs	r2, #36	@ 0x24
 800249a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0201 	bic.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fbb2 	bl	8002c20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f8b3 	bl	8002628 <UART_SetConfig>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e01b      	b.n	8002504 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fc31 	bl	8002d64 <UART_CheckIdleState>
 8002502:	4603      	mov	r3, r0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	@ 0x28
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002522:	2b20      	cmp	r3, #32
 8002524:	d17b      	bne.n	800261e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_UART_Transmit+0x26>
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e074      	b.n	8002620 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2221      	movs	r2, #33	@ 0x21
 8002542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002546:	f7fe fc4d 	bl	8000de4 <HAL_GetTick>
 800254a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	88fa      	ldrh	r2, [r7, #6]
 8002550:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	88fa      	ldrh	r2, [r7, #6]
 8002558:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002564:	d108      	bne.n	8002578 <HAL_UART_Transmit+0x6c>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d104      	bne.n	8002578 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	e003      	b.n	8002580 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002580:	e030      	b.n	80025e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2200      	movs	r2, #0
 800258a:	2180      	movs	r1, #128	@ 0x80
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fc93 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e03d      	b.n	8002620 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10b      	bne.n	80025c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	3302      	adds	r3, #2
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	e007      	b.n	80025d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	3301      	adds	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1c8      	bne.n	8002582 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2200      	movs	r2, #0
 80025f8:	2140      	movs	r1, #64	@ 0x40
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 fc5c 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e006      	b.n	8002620 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800262c:	b08c      	sub	sp, #48	@ 0x30
 800262e:	af00      	add	r7, sp, #0
 8002630:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	431a      	orrs	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	431a      	orrs	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	4313      	orrs	r3, r2
 800264e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4baa      	ldr	r3, [pc, #680]	@ (8002900 <UART_SetConfig+0x2d8>)
 8002658:	4013      	ands	r3, r2
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002660:	430b      	orrs	r3, r1
 8002662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a9f      	ldr	r2, [pc, #636]	@ (8002904 <UART_SetConfig+0x2dc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d004      	beq.n	8002694 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002690:	4313      	orrs	r3, r2
 8002692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800269e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b2:	f023 010f 	bic.w	r1, r3, #15
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a90      	ldr	r2, [pc, #576]	@ (8002908 <UART_SetConfig+0x2e0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d125      	bne.n	8002718 <UART_SetConfig+0xf0>
 80026cc:	4b8f      	ldr	r3, [pc, #572]	@ (800290c <UART_SetConfig+0x2e4>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d81a      	bhi.n	8002710 <UART_SetConfig+0xe8>
 80026da:	a201      	add	r2, pc, #4	@ (adr r2, 80026e0 <UART_SetConfig+0xb8>)
 80026dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e0:	080026f1 	.word	0x080026f1
 80026e4:	08002701 	.word	0x08002701
 80026e8:	080026f9 	.word	0x080026f9
 80026ec:	08002709 	.word	0x08002709
 80026f0:	2301      	movs	r3, #1
 80026f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026f6:	e116      	b.n	8002926 <UART_SetConfig+0x2fe>
 80026f8:	2302      	movs	r3, #2
 80026fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026fe:	e112      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002700:	2304      	movs	r3, #4
 8002702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002706:	e10e      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002708:	2308      	movs	r3, #8
 800270a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800270e:	e10a      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002710:	2310      	movs	r3, #16
 8002712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002716:	e106      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a7c      	ldr	r2, [pc, #496]	@ (8002910 <UART_SetConfig+0x2e8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d138      	bne.n	8002794 <UART_SetConfig+0x16c>
 8002722:	4b7a      	ldr	r3, [pc, #488]	@ (800290c <UART_SetConfig+0x2e4>)
 8002724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b0c      	cmp	r3, #12
 800272e:	d82d      	bhi.n	800278c <UART_SetConfig+0x164>
 8002730:	a201      	add	r2, pc, #4	@ (adr r2, 8002738 <UART_SetConfig+0x110>)
 8002732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002736:	bf00      	nop
 8002738:	0800276d 	.word	0x0800276d
 800273c:	0800278d 	.word	0x0800278d
 8002740:	0800278d 	.word	0x0800278d
 8002744:	0800278d 	.word	0x0800278d
 8002748:	0800277d 	.word	0x0800277d
 800274c:	0800278d 	.word	0x0800278d
 8002750:	0800278d 	.word	0x0800278d
 8002754:	0800278d 	.word	0x0800278d
 8002758:	08002775 	.word	0x08002775
 800275c:	0800278d 	.word	0x0800278d
 8002760:	0800278d 	.word	0x0800278d
 8002764:	0800278d 	.word	0x0800278d
 8002768:	08002785 	.word	0x08002785
 800276c:	2300      	movs	r3, #0
 800276e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002772:	e0d8      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002774:	2302      	movs	r3, #2
 8002776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800277a:	e0d4      	b.n	8002926 <UART_SetConfig+0x2fe>
 800277c:	2304      	movs	r3, #4
 800277e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002782:	e0d0      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002784:	2308      	movs	r3, #8
 8002786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800278a:	e0cc      	b.n	8002926 <UART_SetConfig+0x2fe>
 800278c:	2310      	movs	r3, #16
 800278e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002792:	e0c8      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a5e      	ldr	r2, [pc, #376]	@ (8002914 <UART_SetConfig+0x2ec>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d125      	bne.n	80027ea <UART_SetConfig+0x1c2>
 800279e:	4b5b      	ldr	r3, [pc, #364]	@ (800290c <UART_SetConfig+0x2e4>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80027a8:	2b30      	cmp	r3, #48	@ 0x30
 80027aa:	d016      	beq.n	80027da <UART_SetConfig+0x1b2>
 80027ac:	2b30      	cmp	r3, #48	@ 0x30
 80027ae:	d818      	bhi.n	80027e2 <UART_SetConfig+0x1ba>
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d00a      	beq.n	80027ca <UART_SetConfig+0x1a2>
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d814      	bhi.n	80027e2 <UART_SetConfig+0x1ba>
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <UART_SetConfig+0x19a>
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d008      	beq.n	80027d2 <UART_SetConfig+0x1aa>
 80027c0:	e00f      	b.n	80027e2 <UART_SetConfig+0x1ba>
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027c8:	e0ad      	b.n	8002926 <UART_SetConfig+0x2fe>
 80027ca:	2302      	movs	r3, #2
 80027cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027d0:	e0a9      	b.n	8002926 <UART_SetConfig+0x2fe>
 80027d2:	2304      	movs	r3, #4
 80027d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027d8:	e0a5      	b.n	8002926 <UART_SetConfig+0x2fe>
 80027da:	2308      	movs	r3, #8
 80027dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027e0:	e0a1      	b.n	8002926 <UART_SetConfig+0x2fe>
 80027e2:	2310      	movs	r3, #16
 80027e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027e8:	e09d      	b.n	8002926 <UART_SetConfig+0x2fe>
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002918 <UART_SetConfig+0x2f0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d125      	bne.n	8002840 <UART_SetConfig+0x218>
 80027f4:	4b45      	ldr	r3, [pc, #276]	@ (800290c <UART_SetConfig+0x2e4>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80027fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8002800:	d016      	beq.n	8002830 <UART_SetConfig+0x208>
 8002802:	2bc0      	cmp	r3, #192	@ 0xc0
 8002804:	d818      	bhi.n	8002838 <UART_SetConfig+0x210>
 8002806:	2b80      	cmp	r3, #128	@ 0x80
 8002808:	d00a      	beq.n	8002820 <UART_SetConfig+0x1f8>
 800280a:	2b80      	cmp	r3, #128	@ 0x80
 800280c:	d814      	bhi.n	8002838 <UART_SetConfig+0x210>
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <UART_SetConfig+0x1f0>
 8002812:	2b40      	cmp	r3, #64	@ 0x40
 8002814:	d008      	beq.n	8002828 <UART_SetConfig+0x200>
 8002816:	e00f      	b.n	8002838 <UART_SetConfig+0x210>
 8002818:	2300      	movs	r3, #0
 800281a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800281e:	e082      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002820:	2302      	movs	r3, #2
 8002822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002826:	e07e      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002828:	2304      	movs	r3, #4
 800282a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800282e:	e07a      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002830:	2308      	movs	r3, #8
 8002832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002836:	e076      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002838:	2310      	movs	r3, #16
 800283a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800283e:	e072      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a35      	ldr	r2, [pc, #212]	@ (800291c <UART_SetConfig+0x2f4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d12a      	bne.n	80028a0 <UART_SetConfig+0x278>
 800284a:	4b30      	ldr	r3, [pc, #192]	@ (800290c <UART_SetConfig+0x2e4>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002854:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002858:	d01a      	beq.n	8002890 <UART_SetConfig+0x268>
 800285a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800285e:	d81b      	bhi.n	8002898 <UART_SetConfig+0x270>
 8002860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002864:	d00c      	beq.n	8002880 <UART_SetConfig+0x258>
 8002866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800286a:	d815      	bhi.n	8002898 <UART_SetConfig+0x270>
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <UART_SetConfig+0x250>
 8002870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002874:	d008      	beq.n	8002888 <UART_SetConfig+0x260>
 8002876:	e00f      	b.n	8002898 <UART_SetConfig+0x270>
 8002878:	2300      	movs	r3, #0
 800287a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800287e:	e052      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002880:	2302      	movs	r3, #2
 8002882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002886:	e04e      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002888:	2304      	movs	r3, #4
 800288a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800288e:	e04a      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002890:	2308      	movs	r3, #8
 8002892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002896:	e046      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002898:	2310      	movs	r3, #16
 800289a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800289e:	e042      	b.n	8002926 <UART_SetConfig+0x2fe>
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a17      	ldr	r2, [pc, #92]	@ (8002904 <UART_SetConfig+0x2dc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d13a      	bne.n	8002920 <UART_SetConfig+0x2f8>
 80028aa:	4b18      	ldr	r3, [pc, #96]	@ (800290c <UART_SetConfig+0x2e4>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028b8:	d01a      	beq.n	80028f0 <UART_SetConfig+0x2c8>
 80028ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028be:	d81b      	bhi.n	80028f8 <UART_SetConfig+0x2d0>
 80028c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028c4:	d00c      	beq.n	80028e0 <UART_SetConfig+0x2b8>
 80028c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028ca:	d815      	bhi.n	80028f8 <UART_SetConfig+0x2d0>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <UART_SetConfig+0x2b0>
 80028d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d4:	d008      	beq.n	80028e8 <UART_SetConfig+0x2c0>
 80028d6:	e00f      	b.n	80028f8 <UART_SetConfig+0x2d0>
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028de:	e022      	b.n	8002926 <UART_SetConfig+0x2fe>
 80028e0:	2302      	movs	r3, #2
 80028e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028e6:	e01e      	b.n	8002926 <UART_SetConfig+0x2fe>
 80028e8:	2304      	movs	r3, #4
 80028ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028ee:	e01a      	b.n	8002926 <UART_SetConfig+0x2fe>
 80028f0:	2308      	movs	r3, #8
 80028f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028f6:	e016      	b.n	8002926 <UART_SetConfig+0x2fe>
 80028f8:	2310      	movs	r3, #16
 80028fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028fe:	e012      	b.n	8002926 <UART_SetConfig+0x2fe>
 8002900:	cfff69f3 	.word	0xcfff69f3
 8002904:	40008000 	.word	0x40008000
 8002908:	40013800 	.word	0x40013800
 800290c:	40021000 	.word	0x40021000
 8002910:	40004400 	.word	0x40004400
 8002914:	40004800 	.word	0x40004800
 8002918:	40004c00 	.word	0x40004c00
 800291c:	40005000 	.word	0x40005000
 8002920:	2310      	movs	r3, #16
 8002922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4aae      	ldr	r2, [pc, #696]	@ (8002be4 <UART_SetConfig+0x5bc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	f040 8097 	bne.w	8002a60 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002932:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002936:	2b08      	cmp	r3, #8
 8002938:	d823      	bhi.n	8002982 <UART_SetConfig+0x35a>
 800293a:	a201      	add	r2, pc, #4	@ (adr r2, 8002940 <UART_SetConfig+0x318>)
 800293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002940:	08002965 	.word	0x08002965
 8002944:	08002983 	.word	0x08002983
 8002948:	0800296d 	.word	0x0800296d
 800294c:	08002983 	.word	0x08002983
 8002950:	08002973 	.word	0x08002973
 8002954:	08002983 	.word	0x08002983
 8002958:	08002983 	.word	0x08002983
 800295c:	08002983 	.word	0x08002983
 8002960:	0800297b 	.word	0x0800297b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002964:	f7ff fac2 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002968:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800296a:	e010      	b.n	800298e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800296c:	4b9e      	ldr	r3, [pc, #632]	@ (8002be8 <UART_SetConfig+0x5c0>)
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002970:	e00d      	b.n	800298e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002972:	f7ff fa4d 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8002976:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002978:	e009      	b.n	800298e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800297a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002980:	e005      	b.n	800298e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800298c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8130 	beq.w	8002bf6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	4a94      	ldr	r2, [pc, #592]	@ (8002bec <UART_SetConfig+0x5c4>)
 800299c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029a0:	461a      	mov	r2, r3
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4413      	add	r3, r2
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d305      	bcc.n	80029c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d903      	bls.n	80029ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80029cc:	e113      	b.n	8002bf6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	2200      	movs	r2, #0
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	60fa      	str	r2, [r7, #12]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	4a84      	ldr	r2, [pc, #528]	@ (8002bec <UART_SetConfig+0x5c4>)
 80029dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2200      	movs	r2, #0
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029f0:	f7fd fc12 	bl	8000218 <__aeabi_uldivmod>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	020b      	lsls	r3, r1, #8
 8002a06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002a0a:	0202      	lsls	r2, r0, #8
 8002a0c:	6979      	ldr	r1, [r7, #20]
 8002a0e:	6849      	ldr	r1, [r1, #4]
 8002a10:	0849      	lsrs	r1, r1, #1
 8002a12:	2000      	movs	r0, #0
 8002a14:	460c      	mov	r4, r1
 8002a16:	4605      	mov	r5, r0
 8002a18:	eb12 0804 	adds.w	r8, r2, r4
 8002a1c:	eb43 0905 	adc.w	r9, r3, r5
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	469a      	mov	sl, r3
 8002a28:	4693      	mov	fp, r2
 8002a2a:	4652      	mov	r2, sl
 8002a2c:	465b      	mov	r3, fp
 8002a2e:	4640      	mov	r0, r8
 8002a30:	4649      	mov	r1, r9
 8002a32:	f7fd fbf1 	bl	8000218 <__aeabi_uldivmod>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a44:	d308      	bcc.n	8002a58 <UART_SetConfig+0x430>
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a4c:	d204      	bcs.n	8002a58 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6a3a      	ldr	r2, [r7, #32]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	e0ce      	b.n	8002bf6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002a5e:	e0ca      	b.n	8002bf6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a68:	d166      	bne.n	8002b38 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002a6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d827      	bhi.n	8002ac2 <UART_SetConfig+0x49a>
 8002a72:	a201      	add	r2, pc, #4	@ (adr r2, 8002a78 <UART_SetConfig+0x450>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002a9d 	.word	0x08002a9d
 8002a7c:	08002aa5 	.word	0x08002aa5
 8002a80:	08002aad 	.word	0x08002aad
 8002a84:	08002ac3 	.word	0x08002ac3
 8002a88:	08002ab3 	.word	0x08002ab3
 8002a8c:	08002ac3 	.word	0x08002ac3
 8002a90:	08002ac3 	.word	0x08002ac3
 8002a94:	08002ac3 	.word	0x08002ac3
 8002a98:	08002abb 	.word	0x08002abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a9c:	f7ff fa26 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002aa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002aa2:	e014      	b.n	8002ace <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002aa4:	f7ff fa38 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 8002aa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002aaa:	e010      	b.n	8002ace <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002aac:	4b4e      	ldr	r3, [pc, #312]	@ (8002be8 <UART_SetConfig+0x5c0>)
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ab0:	e00d      	b.n	8002ace <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ab2:	f7ff f9ad 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8002ab6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ab8:	e009      	b.n	8002ace <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ac0:	e005      	b.n	8002ace <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002acc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8090 	beq.w	8002bf6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	4a44      	ldr	r2, [pc, #272]	@ (8002bec <UART_SetConfig+0x5c4>)
 8002adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ae8:	005a      	lsls	r2, r3, #1
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	441a      	add	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	d916      	bls.n	8002b30 <UART_SetConfig+0x508>
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b08:	d212      	bcs.n	8002b30 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f023 030f 	bic.w	r3, r3, #15
 8002b12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	8bfb      	ldrh	r3, [r7, #30]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	8bfa      	ldrh	r2, [r7, #30]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	e062      	b.n	8002bf6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002b36:	e05e      	b.n	8002bf6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d828      	bhi.n	8002b92 <UART_SetConfig+0x56a>
 8002b40:	a201      	add	r2, pc, #4	@ (adr r2, 8002b48 <UART_SetConfig+0x520>)
 8002b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b46:	bf00      	nop
 8002b48:	08002b6d 	.word	0x08002b6d
 8002b4c:	08002b75 	.word	0x08002b75
 8002b50:	08002b7d 	.word	0x08002b7d
 8002b54:	08002b93 	.word	0x08002b93
 8002b58:	08002b83 	.word	0x08002b83
 8002b5c:	08002b93 	.word	0x08002b93
 8002b60:	08002b93 	.word	0x08002b93
 8002b64:	08002b93 	.word	0x08002b93
 8002b68:	08002b8b 	.word	0x08002b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b6c:	f7ff f9be 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002b70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b72:	e014      	b.n	8002b9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b74:	f7ff f9d0 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 8002b78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b7a:	e010      	b.n	8002b9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <UART_SetConfig+0x5c0>)
 8002b7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002b80:	e00d      	b.n	8002b9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b82:	f7ff f945 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8002b86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b88:	e009      	b.n	8002b9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002b90:	e005      	b.n	8002b9e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002b9c:	bf00      	nop
    }

    if (pclk != 0U)
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d028      	beq.n	8002bf6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	4a10      	ldr	r2, [pc, #64]	@ (8002bec <UART_SetConfig+0x5c4>)
 8002baa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	441a      	add	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	2b0f      	cmp	r3, #15
 8002bcc:	d910      	bls.n	8002bf0 <UART_SetConfig+0x5c8>
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bd4:	d20c      	bcs.n	8002bf0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	e009      	b.n	8002bf6 <UART_SetConfig+0x5ce>
 8002be2:	bf00      	nop
 8002be4:	40008000 	.word	0x40008000
 8002be8:	00f42400 	.word	0x00f42400
 8002bec:	080032ec 	.word	0x080032ec
      }
      else
      {
        ret = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002c12:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3730      	adds	r7, #48	@ 0x30
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01a      	beq.n	8002d36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d1e:	d10a      	bne.n	8002d36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
  }
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b098      	sub	sp, #96	@ 0x60
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d74:	f7fe f836 	bl	8000de4 <HAL_GetTick>
 8002d78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d12f      	bne.n	8002de8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d90:	2200      	movs	r2, #0
 8002d92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f88e 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d022      	beq.n	8002de8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002daa:	e853 3f00 	ldrex	r3, [r3]
 8002dae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002db6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dc8:	e841 2300 	strex	r3, r2, [r1]
 8002dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e6      	bne.n	8002da2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e063      	b.n	8002eb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d149      	bne.n	8002e8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002df6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f857 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d03c      	beq.n	8002e8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e30:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1e6      	bne.n	8002e10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3308      	adds	r3, #8
 8002e48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	e853 3f00 	ldrex	r3, [r3]
 8002e50:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3308      	adds	r3, #8
 8002e60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e62:	61fa      	str	r2, [r7, #28]
 8002e64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e66:	69b9      	ldr	r1, [r7, #24]
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	e841 2300 	strex	r3, r2, [r1]
 8002e6e:	617b      	str	r3, [r7, #20]
   return(result);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1e5      	bne.n	8002e42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e012      	b.n	8002eb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3758      	adds	r7, #88	@ 0x58
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec8:	e04f      	b.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d04b      	beq.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7fd ff87 	bl	8000de4 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e04e      	b.n	8002f8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d037      	beq.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b80      	cmp	r3, #128	@ 0x80
 8002efe:	d034      	beq.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b40      	cmp	r3, #64	@ 0x40
 8002f04:	d031      	beq.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d110      	bne.n	8002f36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2208      	movs	r2, #8
 8002f1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f838 	bl	8002f92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2208      	movs	r2, #8
 8002f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e029      	b.n	8002f8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f44:	d111      	bne.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f81e 	bl	8002f92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e00f      	b.n	8002f8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d0a0      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b095      	sub	sp, #84	@ 0x54
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa2:	e853 3f00 	ldrex	r3, [r3]
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002faa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fc0:	e841 2300 	strex	r3, r2, [r1]
 8002fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e6      	bne.n	8002f9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3308      	adds	r3, #8
 8002fee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ff0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ff8:	e841 2300 	strex	r3, r2, [r1]
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e3      	bne.n	8002fcc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d118      	bne.n	800303e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	e853 3f00 	ldrex	r3, [r3]
 8003018:	60bb      	str	r3, [r7, #8]
   return(result);
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f023 0310 	bic.w	r3, r3, #16
 8003020:	647b      	str	r3, [r7, #68]	@ 0x44
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302e:	6979      	ldr	r1, [r7, #20]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	e841 2300 	strex	r3, r2, [r1]
 8003036:	613b      	str	r3, [r7, #16]
   return(result);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1e6      	bne.n	800300c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003052:	bf00      	nop
 8003054:	3754      	adds	r7, #84	@ 0x54
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800305e:	b480      	push	{r7}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_UARTEx_DisableFifoMode+0x16>
 8003070:	2302      	movs	r3, #2
 8003072:	e027      	b.n	80030c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2224      	movs	r2, #36	@ 0x24
 8003080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80030a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e02d      	b.n	8003144 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	@ 0x24
 80030f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f84f 	bl	80031c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003160:	2302      	movs	r3, #2
 8003162:	e02d      	b.n	80031c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2224      	movs	r2, #36	@ 0x24
 8003170:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f811 	bl	80031c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d108      	bne.n	80031ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80031e8:	e031      	b.n	800324e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80031ea:	2308      	movs	r3, #8
 80031ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80031ee:	2308      	movs	r3, #8
 80031f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	0e5b      	lsrs	r3, r3, #25
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	0f5b      	lsrs	r3, r3, #29
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003212:	7bbb      	ldrb	r3, [r7, #14]
 8003214:	7b3a      	ldrb	r2, [r7, #12]
 8003216:	4911      	ldr	r1, [pc, #68]	@ (800325c <UARTEx_SetNbDataToProcess+0x94>)
 8003218:	5c8a      	ldrb	r2, [r1, r2]
 800321a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800321e:	7b3a      	ldrb	r2, [r7, #12]
 8003220:	490f      	ldr	r1, [pc, #60]	@ (8003260 <UARTEx_SetNbDataToProcess+0x98>)
 8003222:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003224:	fb93 f3f2 	sdiv	r3, r3, r2
 8003228:	b29a      	uxth	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	7b7a      	ldrb	r2, [r7, #13]
 8003234:	4909      	ldr	r1, [pc, #36]	@ (800325c <UARTEx_SetNbDataToProcess+0x94>)
 8003236:	5c8a      	ldrb	r2, [r1, r2]
 8003238:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800323c:	7b7a      	ldrb	r2, [r7, #13]
 800323e:	4908      	ldr	r1, [pc, #32]	@ (8003260 <UARTEx_SetNbDataToProcess+0x98>)
 8003240:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003242:	fb93 f3f2 	sdiv	r3, r3, r2
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	08003304 	.word	0x08003304
 8003260:	0800330c 	.word	0x0800330c

08003264 <memset>:
 8003264:	4402      	add	r2, r0
 8003266:	4603      	mov	r3, r0
 8003268:	4293      	cmp	r3, r2
 800326a:	d100      	bne.n	800326e <memset+0xa>
 800326c:	4770      	bx	lr
 800326e:	f803 1b01 	strb.w	r1, [r3], #1
 8003272:	e7f9      	b.n	8003268 <memset+0x4>

08003274 <__libc_init_array>:
 8003274:	b570      	push	{r4, r5, r6, lr}
 8003276:	4d0d      	ldr	r5, [pc, #52]	@ (80032ac <__libc_init_array+0x38>)
 8003278:	4c0d      	ldr	r4, [pc, #52]	@ (80032b0 <__libc_init_array+0x3c>)
 800327a:	1b64      	subs	r4, r4, r5
 800327c:	10a4      	asrs	r4, r4, #2
 800327e:	2600      	movs	r6, #0
 8003280:	42a6      	cmp	r6, r4
 8003282:	d109      	bne.n	8003298 <__libc_init_array+0x24>
 8003284:	4d0b      	ldr	r5, [pc, #44]	@ (80032b4 <__libc_init_array+0x40>)
 8003286:	4c0c      	ldr	r4, [pc, #48]	@ (80032b8 <__libc_init_array+0x44>)
 8003288:	f000 f818 	bl	80032bc <_init>
 800328c:	1b64      	subs	r4, r4, r5
 800328e:	10a4      	asrs	r4, r4, #2
 8003290:	2600      	movs	r6, #0
 8003292:	42a6      	cmp	r6, r4
 8003294:	d105      	bne.n	80032a2 <__libc_init_array+0x2e>
 8003296:	bd70      	pop	{r4, r5, r6, pc}
 8003298:	f855 3b04 	ldr.w	r3, [r5], #4
 800329c:	4798      	blx	r3
 800329e:	3601      	adds	r6, #1
 80032a0:	e7ee      	b.n	8003280 <__libc_init_array+0xc>
 80032a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a6:	4798      	blx	r3
 80032a8:	3601      	adds	r6, #1
 80032aa:	e7f2      	b.n	8003292 <__libc_init_array+0x1e>
 80032ac:	0800331c 	.word	0x0800331c
 80032b0:	0800331c 	.word	0x0800331c
 80032b4:	0800331c 	.word	0x0800331c
 80032b8:	08003320 	.word	0x08003320

080032bc <_init>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	bf00      	nop
 80032c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c2:	bc08      	pop	{r3}
 80032c4:	469e      	mov	lr, r3
 80032c6:	4770      	bx	lr

080032c8 <_fini>:
 80032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ca:	bf00      	nop
 80032cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ce:	bc08      	pop	{r3}
 80032d0:	469e      	mov	lr, r3
 80032d2:	4770      	bx	lr
