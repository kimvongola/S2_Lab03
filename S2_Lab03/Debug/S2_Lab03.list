
S2_Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d28  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f00  08002f00  00003f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f40  08002f40  0000403c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f40  08002f40  00003f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f48  08002f48  0000403c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f48  08002f48  00003f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f4c  08002f4c  00003f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08002f50  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000003c  08002f8c  0000403c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002f8c  000040fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0ff  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001add  00000000  00000000  0001016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00011c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000734  00000000  00000000  000125a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023edb  00000000  00000000  00012cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba35  00000000  00000000  00036bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e58c4  00000000  00000000  000425ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127eb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000258c  00000000  00000000  00127ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0012a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000003c 	.word	0x2000003c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002ee8 	.word	0x08002ee8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000040 	.word	0x20000040
 8000214:	08002ee8 	.word	0x08002ee8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 facb 	bl	8000aa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f816 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8aa 	bl	800066c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000518:	f000 f85e 	bl	80005d8 <MX_LPUART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t BTMX_TimeStamp = 0;
	  if(HAL_GetTick() > BTMX_TimeStamp)
 800051c:	f000 fb28 	bl	8000b70 <HAL_GetTick>
 8000520:	4602      	mov	r2, r0
 8000522:	4b06      	ldr	r3, [pc, #24]	@ (800053c <main+0x34>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	429a      	cmp	r2, r3
 8000528:	d9f8      	bls.n	800051c <main+0x14>
	  {
	  BTMX_TimeStamp = HAL_GetTick() + 25; //next scan in 25 ms
 800052a:	f000 fb21 	bl	8000b70 <HAL_GetTick>
 800052e:	4603      	mov	r3, r0
 8000530:	3319      	adds	r3, #25
 8000532:	4a02      	ldr	r2, [pc, #8]	@ (800053c <main+0x34>)
 8000534:	6013      	str	r3, [r2, #0]
	  ButtonMatrixRead();
 8000536:	f000 f949 	bl	80007cc <ButtonMatrixRead>
  {
 800053a:	e7ef      	b.n	800051c <main+0x14>
 800053c:	200000f0 	.word	0x200000f0

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	2238      	movs	r2, #56	@ 0x38
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fc9e 	bl	8002e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000562:	2000      	movs	r0, #0
 8000564:	f000 fdf6 	bl	8001154 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	2340      	movs	r3, #64	@ 0x40
 8000574:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800057e:	2304      	movs	r3, #4
 8000580:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000582:	2355      	movs	r3, #85	@ 0x55
 8000584:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fe90 	bl	80012bc <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005a2:	f000 f98b 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2303      	movs	r3, #3
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2104      	movs	r1, #4
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 f98e 	bl	80018e0 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ca:	f000 f977 	bl	80008bc <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	@ 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005dc:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 80005de:	4a22      	ldr	r2, [pc, #136]	@ (8000668 <MX_LPUART1_UART_Init+0x90>)
 80005e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005e2:	4b20      	ldr	r3, [pc, #128]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000608:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800060e:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000614:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800061a:	4812      	ldr	r0, [pc, #72]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 800061c:	f001 fdca 	bl	80021b4 <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000626:	f000 f949 	bl	80008bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800062a:	2100      	movs	r1, #0
 800062c:	480d      	ldr	r0, [pc, #52]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 800062e:	f002 fb65 	bl	8002cfc <HAL_UARTEx_SetTxFifoThreshold>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000638:	f000 f940 	bl	80008bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063c:	2100      	movs	r1, #0
 800063e:	4809      	ldr	r0, [pc, #36]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 8000640:	f002 fb9a 	bl	8002d78 <HAL_UARTEx_SetRxFifoThreshold>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800064a:	f000 f937 	bl	80008bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <MX_LPUART1_UART_Init+0x8c>)
 8000650:	f002 fb1b 	bl	8002c8a <HAL_UARTEx_DisableFifoMode>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800065a:	f000 f92f 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000058 	.word	0x20000058
 8000668:	40008000 	.word	0x40008000

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	@ 0x28
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	4b4f      	ldr	r3, [pc, #316]	@ (80007c0 <MX_GPIO_Init+0x154>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a4e      	ldr	r2, [pc, #312]	@ (80007c0 <MX_GPIO_Init+0x154>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b4c      	ldr	r3, [pc, #304]	@ (80007c0 <MX_GPIO_Init+0x154>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069a:	4b49      	ldr	r3, [pc, #292]	@ (80007c0 <MX_GPIO_Init+0x154>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	4a48      	ldr	r2, [pc, #288]	@ (80007c0 <MX_GPIO_Init+0x154>)
 80006a0:	f043 0320 	orr.w	r3, r3, #32
 80006a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a6:	4b46      	ldr	r3, [pc, #280]	@ (80007c0 <MX_GPIO_Init+0x154>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	f003 0320 	and.w	r3, r3, #32
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b43      	ldr	r3, [pc, #268]	@ (80007c0 <MX_GPIO_Init+0x154>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	4a42      	ldr	r2, [pc, #264]	@ (80007c0 <MX_GPIO_Init+0x154>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006be:	4b40      	ldr	r3, [pc, #256]	@ (80007c0 <MX_GPIO_Init+0x154>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b3d      	ldr	r3, [pc, #244]	@ (80007c0 <MX_GPIO_Init+0x154>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	4a3c      	ldr	r2, [pc, #240]	@ (80007c0 <MX_GPIO_Init+0x154>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006d6:	4b3a      	ldr	r3, [pc, #232]	@ (80007c0 <MX_GPIO_Init+0x154>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2102      	movs	r1, #2
 80006e6:	4837      	ldr	r0, [pc, #220]	@ (80007c4 <MX_GPIO_Init+0x158>)
 80006e8:	f000 fcf8 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2132      	movs	r1, #50	@ 0x32
 80006f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f4:	f000 fcf2 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2101      	movs	r1, #1
 80006fc:	4832      	ldr	r0, [pc, #200]	@ (80007c8 <MX_GPIO_Init+0x15c>)
 80006fe:	f000 fced 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000702:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000708:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	482a      	ldr	r0, [pc, #168]	@ (80007c4 <MX_GPIO_Init+0x158>)
 800071a:	f000 fb45 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800071e:	2301      	movs	r3, #1
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000726:	2301      	movs	r3, #1
 8000728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	4824      	ldr	r0, [pc, #144]	@ (80007c4 <MX_GPIO_Init+0x158>)
 8000732:	f000 fb39 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000736:	2302      	movs	r3, #2
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	481d      	ldr	r0, [pc, #116]	@ (80007c4 <MX_GPIO_Init+0x158>)
 800074e:	f000 fb2b 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000752:	2301      	movs	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075a:	2301      	movs	r3, #1
 800075c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000768:	f000 fb1e 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 800076c:	2332      	movs	r3, #50	@ 0x32
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000770:	2311      	movs	r3, #17
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000786:	f000 fb0f 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800078a:	2301      	movs	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800078e:	2311      	movs	r3, #17
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	4809      	ldr	r0, [pc, #36]	@ (80007c8 <MX_GPIO_Init+0x15c>)
 80007a2:	f000 fb01 	bl	8000da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2028      	movs	r0, #40	@ 0x28
 80007ac:	f000 fac7 	bl	8000d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b0:	2028      	movs	r0, #40	@ 0x28
 80007b2:	f000 fade 	bl	8000d72 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b6:	bf00      	nop
 80007b8:	3728      	adds	r7, #40	@ 0x28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	48000800 	.word	0x48000800
 80007c8:	48000400 	.word	0x48000400

080007cc <ButtonMatrixRead>:

/* USER CODE BEGIN 4 */
void ButtonMatrixRead(){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
static uint8_t X=0;
for(int i=0; i<2; i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	e037      	b.n	8000848 <ButtonMatrixRead+0x7c>
{
if(HAL_GPIO_ReadPin(BMX_L[i].Port, BMX_L[i].Pin) == GPIO_PIN_RESET)
 80007d8:	4a34      	ldr	r2, [pc, #208]	@ (80008ac <ButtonMatrixRead+0xe0>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80007e0:	4932      	ldr	r1, [pc, #200]	@ (80008ac <ButtonMatrixRead+0xe0>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	440b      	add	r3, r1
 80007e8:	889b      	ldrh	r3, [r3, #4]
 80007ea:	4619      	mov	r1, r3
 80007ec:	4610      	mov	r0, r2
 80007ee:	f000 fc5d 	bl	80010ac <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d111      	bne.n	800081c <ButtonMatrixRead+0x50>
{ //ปุ่มถู�?�?ด
ButtonState |= 1 << (i + (X * 2));
 80007f8:	4b2d      	ldr	r3, [pc, #180]	@ (80008b0 <ButtonMatrixRead+0xe4>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	005a      	lsls	r2, r3, #1
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	2201      	movs	r2, #1
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	b21a      	sxth	r2, r3
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <ButtonMatrixRead+0xe8>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	b21b      	sxth	r3, r3
 8000810:	4313      	orrs	r3, r2
 8000812:	b21b      	sxth	r3, r3
 8000814:	b29a      	uxth	r2, r3
 8000816:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <ButtonMatrixRead+0xe8>)
 8000818:	801a      	strh	r2, [r3, #0]
 800081a:	e012      	b.n	8000842 <ButtonMatrixRead+0x76>
}
else
{
ButtonState &= ~(1 << (i + (X * 2)));
 800081c:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <ButtonMatrixRead+0xe4>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	005a      	lsls	r2, r3, #1
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	2201      	movs	r2, #1
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	b21b      	sxth	r3, r3
 800082e:	43db      	mvns	r3, r3
 8000830:	b21a      	sxth	r2, r3
 8000832:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <ButtonMatrixRead+0xe8>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	b21b      	sxth	r3, r3
 8000838:	4013      	ands	r3, r2
 800083a:	b21b      	sxth	r3, r3
 800083c:	b29a      	uxth	r2, r3
 800083e:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <ButtonMatrixRead+0xe8>)
 8000840:	801a      	strh	r2, [r3, #0]
for(int i=0; i<2; i++)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3301      	adds	r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b01      	cmp	r3, #1
 800084c:	ddc4      	ble.n	80007d8 <ButtonMatrixRead+0xc>
}
}
//set currentL to Hi-z (open drain)
HAL_GPIO_WritePin(BMX_R[X].Port, BMX_R[X].Pin, GPIO_PIN_SET);
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <ButtonMatrixRead+0xe4>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <ButtonMatrixRead+0xec>)
 8000856:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <ButtonMatrixRead+0xe4>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <ButtonMatrixRead+0xec>)
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	4413      	add	r3, r2
 8000864:	889b      	ldrh	r3, [r3, #4]
 8000866:	2201      	movs	r2, #1
 8000868:	4619      	mov	r1, r3
 800086a:	f000 fc37 	bl	80010dc <HAL_GPIO_WritePin>
//set nextL to low
uint8_t nextX = (X + 1) % 4;
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <ButtonMatrixRead+0xe4>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	425a      	negs	r2, r3
 8000876:	f003 0303 	and.w	r3, r3, #3
 800087a:	f002 0203 	and.w	r2, r2, #3
 800087e:	bf58      	it	pl
 8000880:	4253      	negpl	r3, r2
 8000882:	70fb      	strb	r3, [r7, #3]
HAL_GPIO_WritePin(BMX_R[nextX].Port, BMX_R[nextX].Pin, GPIO_PIN_RESET);
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	4a0c      	ldr	r2, [pc, #48]	@ (80008b8 <ButtonMatrixRead+0xec>)
 8000888:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <ButtonMatrixRead+0xec>)
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	4413      	add	r3, r2
 8000894:	889b      	ldrh	r3, [r3, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	4619      	mov	r1, r3
 800089a:	f000 fc1f 	bl	80010dc <HAL_GPIO_WritePin>
X = nextX;
 800089e:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <ButtonMatrixRead+0xe4>)
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	7013      	strb	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000000 	.word	0x20000000
 80008b0:	200000f4 	.word	0x200000f4
 80008b4:	200000ec 	.word	0x200000ec
 80008b8:	20000010 	.word	0x20000010

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <Error_Handler+0x8>

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <HAL_MspInit+0x44>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008d2:	4a0e      	ldr	r2, [pc, #56]	@ (800090c <HAL_MspInit+0x44>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <HAL_MspInit+0x44>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ea:	4a08      	ldr	r2, [pc, #32]	@ (800090c <HAL_MspInit+0x44>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008fe:	f000 fccd 	bl	800129c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09e      	sub	sp, #120	@ 0x78
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	2254      	movs	r2, #84	@ 0x54
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f002 faad 	bl	8002e90 <memset>
  if(huart->Instance==LPUART1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a1f      	ldr	r2, [pc, #124]	@ (80009b8 <HAL_UART_MspInit+0xa8>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d136      	bne.n	80009ae <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000940:	2320      	movs	r3, #32
 8000942:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4618      	mov	r0, r3
 800094e:	f001 f9e3 	bl	8001d18 <HAL_RCCEx_PeriphCLKConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000958:	f7ff ffb0 	bl	80008bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800095c:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <HAL_UART_MspInit+0xac>)
 800095e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000960:	4a16      	ldr	r2, [pc, #88]	@ (80009bc <HAL_UART_MspInit+0xac>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <HAL_UART_MspInit+0xac>)
 800096a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <HAL_UART_MspInit+0xac>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000978:	4a10      	ldr	r2, [pc, #64]	@ (80009bc <HAL_UART_MspInit+0xac>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <HAL_UART_MspInit+0xac>)
 8000982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800098c:	230c      	movs	r3, #12
 800098e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800099c:	230c      	movs	r3, #12
 800099e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009a4:	4619      	mov	r1, r3
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009aa:	f000 f9fd 	bl	8000da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3778      	adds	r7, #120	@ 0x78
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40008000 	.word	0x40008000
 80009bc:	40021000 	.word	0x40021000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a16:	f000 f899 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a22:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a26:	f000 fb71 	bl	800110c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <SystemInit+0x20>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a3a:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <SystemInit+0x20>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a54:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a58:	f7ff ffea 	bl	8000a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5e:	490d      	ldr	r1, [pc, #52]	@ (8000a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a60:	4a0d      	ldr	r2, [pc, #52]	@ (8000a98 <LoopForever+0xe>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a74:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa0 <LoopForever+0x16>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a82:	f002 fa0d 	bl	8002ea0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a86:	f7ff fd3f 	bl	8000508 <main>

08000a8a <LoopForever>:

LoopForever:
    b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   r0, =_estack
 8000a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000a98:	08002f50 	.word	0x08002f50
  ldr r2, =_sbss
 8000a9c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000aa0:	200000fc 	.word	0x200000fc

08000aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_2_IRQHandler>

08000aa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aac:	2300      	movs	r3, #0
 8000aae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f939 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 f80e 	bl	8000ad8 <HAL_InitTick>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d002      	beq.n	8000ac8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	71fb      	strb	r3, [r7, #7]
 8000ac6:	e001      	b.n	8000acc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac8:	f7ff fefe 	bl	80008c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000acc:	79fb      	ldrb	r3, [r7, #7]

}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <HAL_InitTick+0x68>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d022      	beq.n	8000b32 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_InitTick+0x6c>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <HAL_InitTick+0x68>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f944 	bl	8000d8e <HAL_SYSTICK_Config>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10f      	bne.n	8000b2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	d809      	bhi.n	8000b26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b12:	2200      	movs	r2, #0
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1a:	f000 f910 	bl	8000d3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <HAL_InitTick+0x70>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	e007      	b.n	8000b36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	e004      	b.n	8000b36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]
 8000b30:	e001      	b.n	8000b36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000038 	.word	0x20000038
 8000b44:	20000030 	.word	0x20000030
 8000b48:	20000034 	.word	0x20000034

08000b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <HAL_IncTick+0x1c>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <HAL_IncTick+0x20>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a03      	ldr	r2, [pc, #12]	@ (8000b68 <HAL_IncTick+0x1c>)
 8000b5c:	6013      	str	r3, [r2, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	200000f8 	.word	0x200000f8
 8000b6c:	20000038 	.word	0x20000038

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	@ (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200000f8 	.word	0x200000f8

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	@ (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0b      	blt.n	8000c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	4907      	ldr	r1, [pc, #28]	@ (8000c24 <__NVIC_EnableIRQ+0x38>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	@ (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	@ (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	@ 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	@ 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff29 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4c:	f7ff ff40 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	6978      	ldr	r0, [r7, #20]
 8000d58:	f7ff ff90 	bl	8000c7c <NVIC_EncodePriority>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff5f 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff33 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffa4 	bl	8000ce4 <SysTick_Config>
 8000d9c:	4603      	mov	r3, r0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000db6:	e15a      	b.n	800106e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 814c 	beq.w	8001068 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d005      	beq.n	8000de8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d130      	bne.n	8000e4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e1e:	2201      	movs	r2, #1
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	091b      	lsrs	r3, r3, #4
 8000e34:	f003 0201 	and.w	r2, r3, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d017      	beq.n	8000e86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d123      	bne.n	8000eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3208      	adds	r2, #8
 8000e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	691a      	ldr	r2, [r3, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	08da      	lsrs	r2, r3, #3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3208      	adds	r2, #8
 8000ed4:	6939      	ldr	r1, [r7, #16]
 8000ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0203 	and.w	r2, r3, #3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 80a6 	beq.w	8001068 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1c:	4b5b      	ldr	r3, [pc, #364]	@ (800108c <HAL_GPIO_Init+0x2e4>)
 8000f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f20:	4a5a      	ldr	r2, [pc, #360]	@ (800108c <HAL_GPIO_Init+0x2e4>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f28:	4b58      	ldr	r3, [pc, #352]	@ (800108c <HAL_GPIO_Init+0x2e4>)
 8000f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f34:	4a56      	ldr	r2, [pc, #344]	@ (8001090 <HAL_GPIO_Init+0x2e8>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f5e:	d01f      	beq.n	8000fa0 <HAL_GPIO_Init+0x1f8>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a4c      	ldr	r2, [pc, #304]	@ (8001094 <HAL_GPIO_Init+0x2ec>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d019      	beq.n	8000f9c <HAL_GPIO_Init+0x1f4>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a4b      	ldr	r2, [pc, #300]	@ (8001098 <HAL_GPIO_Init+0x2f0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d013      	beq.n	8000f98 <HAL_GPIO_Init+0x1f0>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a4a      	ldr	r2, [pc, #296]	@ (800109c <HAL_GPIO_Init+0x2f4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d00d      	beq.n	8000f94 <HAL_GPIO_Init+0x1ec>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a49      	ldr	r2, [pc, #292]	@ (80010a0 <HAL_GPIO_Init+0x2f8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d007      	beq.n	8000f90 <HAL_GPIO_Init+0x1e8>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a48      	ldr	r2, [pc, #288]	@ (80010a4 <HAL_GPIO_Init+0x2fc>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d101      	bne.n	8000f8c <HAL_GPIO_Init+0x1e4>
 8000f88:	2305      	movs	r3, #5
 8000f8a:	e00a      	b.n	8000fa2 <HAL_GPIO_Init+0x1fa>
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	e008      	b.n	8000fa2 <HAL_GPIO_Init+0x1fa>
 8000f90:	2304      	movs	r3, #4
 8000f92:	e006      	b.n	8000fa2 <HAL_GPIO_Init+0x1fa>
 8000f94:	2303      	movs	r3, #3
 8000f96:	e004      	b.n	8000fa2 <HAL_GPIO_Init+0x1fa>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	e002      	b.n	8000fa2 <HAL_GPIO_Init+0x1fa>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <HAL_GPIO_Init+0x1fa>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	f002 0203 	and.w	r2, r2, #3
 8000fa8:	0092      	lsls	r2, r2, #2
 8000faa:	4093      	lsls	r3, r2
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb2:	4937      	ldr	r1, [pc, #220]	@ (8001090 <HAL_GPIO_Init+0x2e8>)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	3302      	adds	r3, #2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fc0:	4b39      	ldr	r3, [pc, #228]	@ (80010a8 <HAL_GPIO_Init+0x300>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fe4:	4a30      	ldr	r2, [pc, #192]	@ (80010a8 <HAL_GPIO_Init+0x300>)
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fea:	4b2f      	ldr	r3, [pc, #188]	@ (80010a8 <HAL_GPIO_Init+0x300>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800100e:	4a26      	ldr	r2, [pc, #152]	@ (80010a8 <HAL_GPIO_Init+0x300>)
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001014:	4b24      	ldr	r3, [pc, #144]	@ (80010a8 <HAL_GPIO_Init+0x300>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001038:	4a1b      	ldr	r2, [pc, #108]	@ (80010a8 <HAL_GPIO_Init+0x300>)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <HAL_GPIO_Init+0x300>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001062:	4a11      	ldr	r2, [pc, #68]	@ (80010a8 <HAL_GPIO_Init+0x300>)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	3301      	adds	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	fa22 f303 	lsr.w	r3, r2, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	f47f ae9d 	bne.w	8000db8 <HAL_GPIO_Init+0x10>
  }
}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	371c      	adds	r7, #28
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	40021000 	.word	0x40021000
 8001090:	40010000 	.word	0x40010000
 8001094:	48000400 	.word	0x48000400
 8001098:	48000800 	.word	0x48000800
 800109c:	48000c00 	.word	0x48000c00
 80010a0:	48001000 	.word	0x48001000
 80010a4:	48001400 	.word	0x48001400
 80010a8:	40010400 	.word	0x40010400

080010ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	4013      	ands	r3, r2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e001      	b.n	80010ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	4013      	ands	r3, r2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001122:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f806 	bl	800113c <HAL_GPIO_EXTI_Callback>
  }
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40010400 	.word	0x40010400

0800113c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d141      	bne.n	80011e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001162:	4b4b      	ldr	r3, [pc, #300]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800116a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800116e:	d131      	bne.n	80011d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001170:	4b47      	ldr	r3, [pc, #284]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001176:	4a46      	ldr	r2, [pc, #280]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800117c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001180:	4b43      	ldr	r3, [pc, #268]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001188:	4a41      	ldr	r2, [pc, #260]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800118e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001190:	4b40      	ldr	r3, [pc, #256]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2232      	movs	r2, #50	@ 0x32
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	4a3f      	ldr	r2, [pc, #252]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	0c9b      	lsrs	r3, r3, #18
 80011a2:	3301      	adds	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a6:	e002      	b.n	80011ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011ae:	4b38      	ldr	r3, [pc, #224]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ba:	d102      	bne.n	80011c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f2      	bne.n	80011a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011c2:	4b33      	ldr	r3, [pc, #204]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ce:	d158      	bne.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e057      	b.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011da:	4a2d      	ldr	r2, [pc, #180]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80011e4:	e04d      	b.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011ec:	d141      	bne.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ee:	4b28      	ldr	r3, [pc, #160]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011fa:	d131      	bne.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011fc:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001202:	4a23      	ldr	r2, [pc, #140]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001208:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800120c:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001214:	4a1e      	ldr	r2, [pc, #120]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800121a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800121c:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2232      	movs	r2, #50	@ 0x32
 8001222:	fb02 f303 	mul.w	r3, r2, r3
 8001226:	4a1c      	ldr	r2, [pc, #112]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	0c9b      	lsrs	r3, r3, #18
 800122e:	3301      	adds	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001232:	e002      	b.n	800123a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3b01      	subs	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001246:	d102      	bne.n	800124e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f2      	bne.n	8001234 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800125a:	d112      	bne.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e011      	b.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800126c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001270:	e007      	b.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001272:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800127a:	4a05      	ldr	r2, [pc, #20]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001280:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40007000 	.word	0x40007000
 8001294:	20000030 	.word	0x20000030
 8001298:	431bde83 	.word	0x431bde83

0800129c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012aa:	6093      	str	r3, [r2, #8]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40007000 	.word	0x40007000

080012bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e2fe      	b.n	80018cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d075      	beq.n	80013c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012da:	4b97      	ldr	r3, [pc, #604]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012e4:	4b94      	ldr	r3, [pc, #592]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	d102      	bne.n	80012fa <HAL_RCC_OscConfig+0x3e>
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d002      	beq.n	8001300 <HAL_RCC_OscConfig+0x44>
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d10b      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b8d      	ldr	r3, [pc, #564]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d05b      	beq.n	80013c4 <HAL_RCC_OscConfig+0x108>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d157      	bne.n	80013c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e2d9      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x74>
 8001322:	4b85      	ldr	r3, [pc, #532]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a84      	ldr	r2, [pc, #528]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x98>
 800133a:	4b7f      	ldr	r3, [pc, #508]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a7e      	ldr	r2, [pc, #504]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b7c      	ldr	r3, [pc, #496]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a7b      	ldr	r2, [pc, #492]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001354:	4b78      	ldr	r3, [pc, #480]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a77      	ldr	r2, [pc, #476]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b75      	ldr	r3, [pc, #468]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a74      	ldr	r2, [pc, #464]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800136a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff fbfc 	bl	8000b70 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fbf8 	bl	8000b70 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	@ 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e29e      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800138e:	4b6a      	ldr	r3, [pc, #424]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xc0>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fbe8 	bl	8000b70 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fbe4 	bl	8000b70 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	@ 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e28a      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013b6:	4b60      	ldr	r3, [pc, #384]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0xe8>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d075      	beq.n	80014be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d2:	4b59      	ldr	r3, [pc, #356]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013dc:	4b56      	ldr	r3, [pc, #344]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b0c      	cmp	r3, #12
 80013ea:	d102      	bne.n	80013f2 <HAL_RCC_OscConfig+0x136>
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d002      	beq.n	80013f8 <HAL_RCC_OscConfig+0x13c>
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d11f      	bne.n	8001438 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_OscConfig+0x154>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e25d      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b49      	ldr	r3, [pc, #292]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	061b      	lsls	r3, r3, #24
 800141e:	4946      	ldr	r1, [pc, #280]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001424:	4b45      	ldr	r3, [pc, #276]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fb55 	bl	8000ad8 <HAL_InitTick>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d043      	beq.n	80014bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e249      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d023      	beq.n	8001488 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001440:	4b3d      	ldr	r3, [pc, #244]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a3c      	ldr	r2, [pc, #240]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800144a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fb90 	bl	8000b70 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001454:	f7ff fb8c 	bl	8000b70 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e232      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001466:	4b34      	ldr	r3, [pc, #208]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	061b      	lsls	r3, r3, #24
 8001480:	492d      	ldr	r1, [pc, #180]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001482:	4313      	orrs	r3, r2
 8001484:	604b      	str	r3, [r1, #4]
 8001486:	e01a      	b.n	80014be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001488:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a2a      	ldr	r2, [pc, #168]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 800148e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fb6c 	bl	8000b70 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149c:	f7ff fb68 	bl	8000b70 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e20e      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ae:	4b22      	ldr	r3, [pc, #136]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x1e0>
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d041      	beq.n	800154e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d01c      	beq.n	800150c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d2:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 80014d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014d8:	4a17      	ldr	r2, [pc, #92]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e2:	f7ff fb45 	bl	8000b70 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ea:	f7ff fb41 	bl	8000b70 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e1e7      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 80014fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0ef      	beq.n	80014ea <HAL_RCC_OscConfig+0x22e>
 800150a:	e020      	b.n	800154e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150c:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 800150e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001512:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <HAL_RCC_OscConfig+0x27c>)
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151c:	f7ff fb28 	bl	8000b70 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001522:	e00d      	b.n	8001540 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001524:	f7ff fb24 	bl	8000b70 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d906      	bls.n	8001540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1ca      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001540:	4b8c      	ldr	r3, [pc, #560]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 8001542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1ea      	bne.n	8001524 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80a6 	beq.w	80016a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001560:	4b84      	ldr	r3, [pc, #528]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x2b4>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x2b6>
 8001570:	2300      	movs	r3, #0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00d      	beq.n	8001592 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b7f      	ldr	r3, [pc, #508]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157a:	4a7e      	ldr	r2, [pc, #504]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001580:	6593      	str	r3, [r2, #88]	@ 0x58
 8001582:	4b7c      	ldr	r3, [pc, #496]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800158e:	2301      	movs	r3, #1
 8001590:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001592:	4b79      	ldr	r3, [pc, #484]	@ (8001778 <HAL_RCC_OscConfig+0x4bc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d118      	bne.n	80015d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800159e:	4b76      	ldr	r3, [pc, #472]	@ (8001778 <HAL_RCC_OscConfig+0x4bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a75      	ldr	r2, [pc, #468]	@ (8001778 <HAL_RCC_OscConfig+0x4bc>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fae1 	bl	8000b70 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b2:	f7ff fadd 	bl	8000b70 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e183      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001778 <HAL_RCC_OscConfig+0x4bc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d108      	bne.n	80015ea <HAL_RCC_OscConfig+0x32e>
 80015d8:	4b66      	ldr	r3, [pc, #408]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 80015da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015de:	4a65      	ldr	r2, [pc, #404]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015e8:	e024      	b.n	8001634 <HAL_RCC_OscConfig+0x378>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	d110      	bne.n	8001614 <HAL_RCC_OscConfig+0x358>
 80015f2:	4b60      	ldr	r3, [pc, #384]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 80015f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015f8:	4a5e      	ldr	r2, [pc, #376]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001602:	4b5c      	ldr	r3, [pc, #368]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 8001604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001608:	4a5a      	ldr	r2, [pc, #360]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001612:	e00f      	b.n	8001634 <HAL_RCC_OscConfig+0x378>
 8001614:	4b57      	ldr	r3, [pc, #348]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 8001616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800161a:	4a56      	ldr	r2, [pc, #344]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001624:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162a:	4a52      	ldr	r2, [pc, #328]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 800162c:	f023 0304 	bic.w	r3, r3, #4
 8001630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d016      	beq.n	800166a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff fa98 	bl	8000b70 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001642:	e00a      	b.n	800165a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f7ff fa94 	bl	8000b70 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e138      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800165a:	4b46      	ldr	r3, [pc, #280]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 800165c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0ed      	beq.n	8001644 <HAL_RCC_OscConfig+0x388>
 8001668:	e015      	b.n	8001696 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166a:	f7ff fa81 	bl	8000b70 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff fa7d 	bl	8000b70 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e121      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001688:	4b3a      	ldr	r3, [pc, #232]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1ed      	bne.n	8001672 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001696:	7ffb      	ldrb	r3, [r7, #31]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d105      	bne.n	80016a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800169c:	4b35      	ldr	r3, [pc, #212]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	4a34      	ldr	r2, [pc, #208]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 80016a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0320 	and.w	r3, r3, #32
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d03c      	beq.n	800172e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 80016be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff fa50 	bl	8000b70 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016d4:	f7ff fa4c 	bl	8000b70 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e0f2      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016e6:	4b23      	ldr	r3, [pc, #140]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 80016e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ef      	beq.n	80016d4 <HAL_RCC_OscConfig+0x418>
 80016f4:	e01b      	b.n	800172e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 80016f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001706:	f7ff fa33 	bl	8000b70 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800170e:	f7ff fa2f 	bl	8000b70 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e0d5      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001720:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 8001722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ef      	bne.n	800170e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80c9 	beq.w	80018ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b0c      	cmp	r3, #12
 8001742:	f000 8083 	beq.w	800184c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d15e      	bne.n	800180c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a08      	ldr	r2, [pc, #32]	@ (8001774 <HAL_RCC_OscConfig+0x4b8>)
 8001754:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff fa09 	bl	8000b70 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001760:	e00c      	b.n	800177c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff fa05 	bl	8000b70 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d905      	bls.n	800177c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e0ab      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
 8001774:	40021000 	.word	0x40021000
 8001778:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800177c:	4b55      	ldr	r3, [pc, #340]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1ec      	bne.n	8001762 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001788:	4b52      	ldr	r3, [pc, #328]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	4b52      	ldr	r3, [pc, #328]	@ (80018d8 <HAL_RCC_OscConfig+0x61c>)
 800178e:	4013      	ands	r3, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6a11      	ldr	r1, [r2, #32]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001798:	3a01      	subs	r2, #1
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	4311      	orrs	r1, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80017a2:	0212      	lsls	r2, r2, #8
 80017a4:	4311      	orrs	r1, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017aa:	0852      	lsrs	r2, r2, #1
 80017ac:	3a01      	subs	r2, #1
 80017ae:	0552      	lsls	r2, r2, #21
 80017b0:	4311      	orrs	r1, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017b6:	0852      	lsrs	r2, r2, #1
 80017b8:	3a01      	subs	r2, #1
 80017ba:	0652      	lsls	r2, r2, #25
 80017bc:	4311      	orrs	r1, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017c2:	06d2      	lsls	r2, r2, #27
 80017c4:	430a      	orrs	r2, r1
 80017c6:	4943      	ldr	r1, [pc, #268]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017cc:	4b41      	ldr	r3, [pc, #260]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a40      	ldr	r2, [pc, #256]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 80017d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017d8:	4b3e      	ldr	r3, [pc, #248]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4a3d      	ldr	r2, [pc, #244]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 80017de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff f9c4 	bl	8000b70 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff f9c0 	bl	8000b70 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e066      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fe:	4b35      	ldr	r3, [pc, #212]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x530>
 800180a:	e05e      	b.n	80018ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180c:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a30      	ldr	r2, [pc, #192]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 8001812:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff f9aa 	bl	8000b70 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff f9a6 	bl	8000b70 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e04c      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001832:	4b28      	ldr	r3, [pc, #160]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800183e:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	4924      	ldr	r1, [pc, #144]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 8001844:	4b25      	ldr	r3, [pc, #148]	@ (80018dc <HAL_RCC_OscConfig+0x620>)
 8001846:	4013      	ands	r3, r2
 8001848:	60cb      	str	r3, [r1, #12]
 800184a:	e03e      	b.n	80018ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e039      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001858:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <HAL_RCC_OscConfig+0x618>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 0203 	and.w	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	429a      	cmp	r2, r3
 800186a:	d12c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001876:	3b01      	subs	r3, #1
 8001878:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d123      	bne.n	80018c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001888:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d11b      	bne.n	80018c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001898:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d113      	bne.n	80018c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	3b01      	subs	r3, #1
 80018ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018bc:	085b      	lsrs	r3, r3, #1
 80018be:	3b01      	subs	r3, #1
 80018c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	019f800c 	.word	0x019f800c
 80018dc:	feeefffc 	.word	0xfeeefffc

080018e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e11e      	b.n	8001b36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f8:	4b91      	ldr	r3, [pc, #580]	@ (8001b40 <HAL_RCC_ClockConfig+0x260>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d910      	bls.n	8001928 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b8e      	ldr	r3, [pc, #568]	@ (8001b40 <HAL_RCC_ClockConfig+0x260>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 020f 	bic.w	r2, r3, #15
 800190e:	498c      	ldr	r1, [pc, #560]	@ (8001b40 <HAL_RCC_ClockConfig+0x260>)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b8a      	ldr	r3, [pc, #552]	@ (8001b40 <HAL_RCC_ClockConfig+0x260>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e106      	b.n	8001b36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d073      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d129      	bne.n	8001990 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193c:	4b81      	ldr	r3, [pc, #516]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0f4      	b.n	8001b36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800194c:	f000 f99e 	bl	8001c8c <RCC_GetSysClockFreqFromPLLSource>
 8001950:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4a7c      	ldr	r2, [pc, #496]	@ (8001b48 <HAL_RCC_ClockConfig+0x268>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d93f      	bls.n	80019da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800195a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800196e:	2b00      	cmp	r3, #0
 8001970:	d033      	beq.n	80019da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001976:	2b00      	cmp	r3, #0
 8001978:	d12f      	bne.n	80019da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800197a:	4b72      	ldr	r3, [pc, #456]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001982:	4a70      	ldr	r2, [pc, #448]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001988:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	e024      	b.n	80019da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001998:	4b6a      	ldr	r3, [pc, #424]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d109      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0c6      	b.n	8001b36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a8:	4b66      	ldr	r3, [pc, #408]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0be      	b.n	8001b36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80019b8:	f000 f8ce 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4a61      	ldr	r2, [pc, #388]	@ (8001b48 <HAL_RCC_ClockConfig+0x268>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d909      	bls.n	80019da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019ce:	4a5d      	ldr	r2, [pc, #372]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019da:	4b5a      	ldr	r3, [pc, #360]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f023 0203 	bic.w	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4957      	ldr	r1, [pc, #348]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ec:	f7ff f8c0 	bl	8000b70 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7ff f8bc 	bl	8000b70 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e095      	b.n	8001b36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	4b4e      	ldr	r3, [pc, #312]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 020c 	and.w	r2, r3, #12
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d1eb      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d023      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a34:	4b43      	ldr	r3, [pc, #268]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	4a42      	ldr	r2, [pc, #264]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001a3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d007      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001a54:	4a3b      	ldr	r2, [pc, #236]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001a56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5c:	4b39      	ldr	r3, [pc, #228]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4936      	ldr	r1, [pc, #216]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b80      	cmp	r3, #128	@ 0x80
 8001a74:	d105      	bne.n	8001a82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a76:	4b33      	ldr	r3, [pc, #204]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	4a32      	ldr	r2, [pc, #200]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001a7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a82:	4b2f      	ldr	r3, [pc, #188]	@ (8001b40 <HAL_RCC_ClockConfig+0x260>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d21d      	bcs.n	8001acc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a90:	4b2b      	ldr	r3, [pc, #172]	@ (8001b40 <HAL_RCC_ClockConfig+0x260>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 020f 	bic.w	r2, r3, #15
 8001a98:	4929      	ldr	r1, [pc, #164]	@ (8001b40 <HAL_RCC_ClockConfig+0x260>)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff f866 	bl	8000b70 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff f862 	bl	8000b70 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e03b      	b.n	8001b36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <HAL_RCC_ClockConfig+0x260>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1ed      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4917      	ldr	r1, [pc, #92]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af6:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	490f      	ldr	r1, [pc, #60]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b0a:	f000 f825 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <HAL_RCC_ClockConfig+0x264>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	490c      	ldr	r1, [pc, #48]	@ (8001b4c <HAL_RCC_ClockConfig+0x26c>)
 8001b1c:	5ccb      	ldrb	r3, [r1, r3]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <HAL_RCC_ClockConfig+0x270>)
 8001b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_RCC_ClockConfig+0x274>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe ffd2 	bl	8000ad8 <HAL_InitTick>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40022000 	.word	0x40022000
 8001b44:	40021000 	.word	0x40021000
 8001b48:	04c4b400 	.word	0x04c4b400
 8001b4c:	08002f00 	.word	0x08002f00
 8001b50:	20000030 	.word	0x20000030
 8001b54:	20000034 	.word	0x20000034

08001b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d102      	bne.n	8001b70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	e047      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b70:	4b27      	ldr	r3, [pc, #156]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d102      	bne.n	8001b82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b7c:	4b26      	ldr	r3, [pc, #152]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	e03e      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b82:	4b23      	ldr	r3, [pc, #140]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d136      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b8e:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b98:	4b1d      	ldr	r3, [pc, #116]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bac:	4a1a      	ldr	r2, [pc, #104]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	4a16      	ldr	r2, [pc, #88]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb6:	68d2      	ldr	r2, [r2, #12]
 8001bb8:	0a12      	lsrs	r2, r2, #8
 8001bba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
      break;
 8001bc4:	e00c      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bc6:	4a13      	ldr	r2, [pc, #76]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4a10      	ldr	r2, [pc, #64]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd0:	68d2      	ldr	r2, [r2, #12]
 8001bd2:	0a12      	lsrs	r2, r2, #8
 8001bd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	617b      	str	r3, [r7, #20]
      break;
 8001bde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001be0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0e5b      	lsrs	r3, r3, #25
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	3301      	adds	r3, #1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	e001      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c00:	693b      	ldr	r3, [r7, #16]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	371c      	adds	r7, #28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	00f42400 	.word	0x00f42400
 8001c18:	016e3600 	.word	0x016e3600

08001c1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000030 	.word	0x20000030

08001c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c38:	f7ff fff0 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4904      	ldr	r1, [pc, #16]	@ (8001c5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08002f10 	.word	0x08002f10

08001c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c64:	f7ff ffda 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0adb      	lsrs	r3, r3, #11
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4904      	ldr	r1, [pc, #16]	@ (8001c88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08002f10 	.word	0x08002f10

08001c8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c92:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d10c      	bne.n	8001cca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cb0:	4a17      	ldr	r2, [pc, #92]	@ (8001d10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	4a14      	ldr	r2, [pc, #80]	@ (8001d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cba:	68d2      	ldr	r2, [r2, #12]
 8001cbc:	0a12      	lsrs	r2, r2, #8
 8001cbe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	617b      	str	r3, [r7, #20]
    break;
 8001cc8:	e00c      	b.n	8001ce4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cca:	4a12      	ldr	r2, [pc, #72]	@ (8001d14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8001d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cd4:	68d2      	ldr	r2, [r2, #12]
 8001cd6:	0a12      	lsrs	r2, r2, #8
 8001cd8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cdc:	fb02 f303 	mul.w	r3, r2, r3
 8001ce0:	617b      	str	r3, [r7, #20]
    break;
 8001ce2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0e5b      	lsrs	r3, r3, #25
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001cfe:	687b      	ldr	r3, [r7, #4]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	016e3600 	.word	0x016e3600
 8001d14:	00f42400 	.word	0x00f42400

08001d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d20:	2300      	movs	r3, #0
 8001d22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d24:	2300      	movs	r3, #0
 8001d26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8098 	beq.w	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b43      	ldr	r3, [pc, #268]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10d      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b40      	ldr	r3, [pc, #256]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d52:	4b3d      	ldr	r3, [pc, #244]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d62:	4b3a      	ldr	r3, [pc, #232]	@ (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a39      	ldr	r2, [pc, #228]	@ (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d6e:	f7fe feff 	bl	8000b70 <HAL_GetTick>
 8001d72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d74:	e009      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7fe fefb 	bl	8000b70 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d902      	bls.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	74fb      	strb	r3, [r7, #19]
        break;
 8001d88:	e005      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d8a:	4b30      	ldr	r3, [pc, #192]	@ (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0ef      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d96:	7cfb      	ldrb	r3, [r7, #19]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d159      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001da6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01e      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d019      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001db8:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001dc4:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dca:	4a1f      	ldr	r2, [pc, #124]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dda:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001de4:	4a18      	ldr	r2, [pc, #96]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d016      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df6:	f7fe febb 	bl	8000b70 <HAL_GetTick>
 8001dfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfc:	e00b      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7fe feb7 	bl	8000b70 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d902      	bls.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	74fb      	strb	r3, [r7, #19]
            break;
 8001e14:	e006      	b.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e16:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ec      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e24:	7cfb      	ldrb	r3, [r7, #19]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10b      	bne.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e2a:	4b07      	ldr	r3, [pc, #28]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e38:	4903      	ldr	r1, [pc, #12]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001e40:	e008      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	74bb      	strb	r3, [r7, #18]
 8001e46:	e005      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e50:	7cfb      	ldrb	r3, [r7, #19]
 8001e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e54:	7c7b      	ldrb	r3, [r7, #17]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d105      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5a:	4ba7      	ldr	r3, [pc, #668]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	4aa6      	ldr	r2, [pc, #664]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e72:	4ba1      	ldr	r3, [pc, #644]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e78:	f023 0203 	bic.w	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	499d      	ldr	r1, [pc, #628]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e94:	4b98      	ldr	r3, [pc, #608]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9a:	f023 020c 	bic.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4995      	ldr	r1, [pc, #596]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eb6:	4b90      	ldr	r3, [pc, #576]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ebc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	498c      	ldr	r1, [pc, #560]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ed8:	4b87      	ldr	r3, [pc, #540]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ede:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	4984      	ldr	r1, [pc, #528]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001efa:	4b7f      	ldr	r3, [pc, #508]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	497b      	ldr	r1, [pc, #492]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f1c:	4b76      	ldr	r3, [pc, #472]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	4973      	ldr	r1, [pc, #460]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	496a      	ldr	r1, [pc, #424]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f60:	4b65      	ldr	r3, [pc, #404]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4962      	ldr	r1, [pc, #392]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f82:	4b5d      	ldr	r3, [pc, #372]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f90:	4959      	ldr	r1, [pc, #356]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001fa4:	4b54      	ldr	r3, [pc, #336]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001faa:	f023 0203 	bic.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb2:	4951      	ldr	r1, [pc, #324]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fcc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd4:	4948      	ldr	r1, [pc, #288]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d015      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fe8:	4b43      	ldr	r3, [pc, #268]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4940      	ldr	r1, [pc, #256]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002006:	d105      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002008:	4b3b      	ldr	r3, [pc, #236]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a3a      	ldr	r2, [pc, #232]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002012:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002020:	4b35      	ldr	r3, [pc, #212]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002026:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202e:	4932      	ldr	r1, [pc, #200]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800203a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800203e:	d105      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002040:	4b2d      	ldr	r3, [pc, #180]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a2c      	ldr	r2, [pc, #176]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800204a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d015      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002058:	4b27      	ldr	r3, [pc, #156]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002066:	4924      	ldr	r1, [pc, #144]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002072:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002076:	d105      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002078:	4b1f      	ldr	r3, [pc, #124]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a1e      	ldr	r2, [pc, #120]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800207e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002082:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d015      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002090:	4b19      	ldr	r3, [pc, #100]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002096:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209e:	4916      	ldr	r1, [pc, #88]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020ae:	d105      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a10      	ldr	r2, [pc, #64]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d019      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	4908      	ldr	r1, [pc, #32]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020e6:	d109      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e8:	4b03      	ldr	r3, [pc, #12]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a02      	ldr	r2, [pc, #8]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020f2:	60d3      	str	r3, [r2, #12]
 80020f4:	e002      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d015      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002108:	4b29      	ldr	r3, [pc, #164]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	4926      	ldr	r1, [pc, #152]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002126:	d105      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002128:	4b21      	ldr	r3, [pc, #132]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a20      	ldr	r2, [pc, #128]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800212e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002132:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002140:	4b1b      	ldr	r3, [pc, #108]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002146:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800214e:	4918      	ldr	r1, [pc, #96]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800215e:	d105      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002160:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a12      	ldr	r2, [pc, #72]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d015      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002178:	4b0d      	ldr	r3, [pc, #52]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800217a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800217e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002186:	490a      	ldr	r1, [pc, #40]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002192:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002196:	d105      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a04      	ldr	r2, [pc, #16]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800219e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80021a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000

080021b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e042      	b.n	800224c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d106      	bne.n	80021de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7fe fb99 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2224      	movs	r2, #36	@ 0x24
 80021e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fb24 	bl	800284c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f825 	bl	8002254 <UART_SetConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e01b      	b.n	800224c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fba3 	bl	8002990 <UART_CheckIdleState>
 800224a:	4603      	mov	r3, r0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002258:	b08c      	sub	sp, #48	@ 0x30
 800225a:	af00      	add	r7, sp, #0
 800225c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	431a      	orrs	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	431a      	orrs	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	4313      	orrs	r3, r2
 800227a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4baa      	ldr	r3, [pc, #680]	@ (800252c <UART_SetConfig+0x2d8>)
 8002284:	4013      	ands	r3, r2
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800228c:	430b      	orrs	r3, r1
 800228e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a9f      	ldr	r2, [pc, #636]	@ (8002530 <UART_SetConfig+0x2dc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d004      	beq.n	80022c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022bc:	4313      	orrs	r3, r2
 80022be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80022ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80022d4:	430b      	orrs	r3, r1
 80022d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022de:	f023 010f 	bic.w	r1, r3, #15
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a90      	ldr	r2, [pc, #576]	@ (8002534 <UART_SetConfig+0x2e0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d125      	bne.n	8002344 <UART_SetConfig+0xf0>
 80022f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002538 <UART_SetConfig+0x2e4>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b03      	cmp	r3, #3
 8002304:	d81a      	bhi.n	800233c <UART_SetConfig+0xe8>
 8002306:	a201      	add	r2, pc, #4	@ (adr r2, 800230c <UART_SetConfig+0xb8>)
 8002308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230c:	0800231d 	.word	0x0800231d
 8002310:	0800232d 	.word	0x0800232d
 8002314:	08002325 	.word	0x08002325
 8002318:	08002335 	.word	0x08002335
 800231c:	2301      	movs	r3, #1
 800231e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002322:	e116      	b.n	8002552 <UART_SetConfig+0x2fe>
 8002324:	2302      	movs	r3, #2
 8002326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800232a:	e112      	b.n	8002552 <UART_SetConfig+0x2fe>
 800232c:	2304      	movs	r3, #4
 800232e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002332:	e10e      	b.n	8002552 <UART_SetConfig+0x2fe>
 8002334:	2308      	movs	r3, #8
 8002336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800233a:	e10a      	b.n	8002552 <UART_SetConfig+0x2fe>
 800233c:	2310      	movs	r3, #16
 800233e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002342:	e106      	b.n	8002552 <UART_SetConfig+0x2fe>
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a7c      	ldr	r2, [pc, #496]	@ (800253c <UART_SetConfig+0x2e8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d138      	bne.n	80023c0 <UART_SetConfig+0x16c>
 800234e:	4b7a      	ldr	r3, [pc, #488]	@ (8002538 <UART_SetConfig+0x2e4>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b0c      	cmp	r3, #12
 800235a:	d82d      	bhi.n	80023b8 <UART_SetConfig+0x164>
 800235c:	a201      	add	r2, pc, #4	@ (adr r2, 8002364 <UART_SetConfig+0x110>)
 800235e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002362:	bf00      	nop
 8002364:	08002399 	.word	0x08002399
 8002368:	080023b9 	.word	0x080023b9
 800236c:	080023b9 	.word	0x080023b9
 8002370:	080023b9 	.word	0x080023b9
 8002374:	080023a9 	.word	0x080023a9
 8002378:	080023b9 	.word	0x080023b9
 800237c:	080023b9 	.word	0x080023b9
 8002380:	080023b9 	.word	0x080023b9
 8002384:	080023a1 	.word	0x080023a1
 8002388:	080023b9 	.word	0x080023b9
 800238c:	080023b9 	.word	0x080023b9
 8002390:	080023b9 	.word	0x080023b9
 8002394:	080023b1 	.word	0x080023b1
 8002398:	2300      	movs	r3, #0
 800239a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800239e:	e0d8      	b.n	8002552 <UART_SetConfig+0x2fe>
 80023a0:	2302      	movs	r3, #2
 80023a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023a6:	e0d4      	b.n	8002552 <UART_SetConfig+0x2fe>
 80023a8:	2304      	movs	r3, #4
 80023aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023ae:	e0d0      	b.n	8002552 <UART_SetConfig+0x2fe>
 80023b0:	2308      	movs	r3, #8
 80023b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023b6:	e0cc      	b.n	8002552 <UART_SetConfig+0x2fe>
 80023b8:	2310      	movs	r3, #16
 80023ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023be:	e0c8      	b.n	8002552 <UART_SetConfig+0x2fe>
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a5e      	ldr	r2, [pc, #376]	@ (8002540 <UART_SetConfig+0x2ec>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d125      	bne.n	8002416 <UART_SetConfig+0x1c2>
 80023ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002538 <UART_SetConfig+0x2e4>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80023d4:	2b30      	cmp	r3, #48	@ 0x30
 80023d6:	d016      	beq.n	8002406 <UART_SetConfig+0x1b2>
 80023d8:	2b30      	cmp	r3, #48	@ 0x30
 80023da:	d818      	bhi.n	800240e <UART_SetConfig+0x1ba>
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d00a      	beq.n	80023f6 <UART_SetConfig+0x1a2>
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d814      	bhi.n	800240e <UART_SetConfig+0x1ba>
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <UART_SetConfig+0x19a>
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d008      	beq.n	80023fe <UART_SetConfig+0x1aa>
 80023ec:	e00f      	b.n	800240e <UART_SetConfig+0x1ba>
 80023ee:	2300      	movs	r3, #0
 80023f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023f4:	e0ad      	b.n	8002552 <UART_SetConfig+0x2fe>
 80023f6:	2302      	movs	r3, #2
 80023f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023fc:	e0a9      	b.n	8002552 <UART_SetConfig+0x2fe>
 80023fe:	2304      	movs	r3, #4
 8002400:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002404:	e0a5      	b.n	8002552 <UART_SetConfig+0x2fe>
 8002406:	2308      	movs	r3, #8
 8002408:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800240c:	e0a1      	b.n	8002552 <UART_SetConfig+0x2fe>
 800240e:	2310      	movs	r3, #16
 8002410:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002414:	e09d      	b.n	8002552 <UART_SetConfig+0x2fe>
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a4a      	ldr	r2, [pc, #296]	@ (8002544 <UART_SetConfig+0x2f0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d125      	bne.n	800246c <UART_SetConfig+0x218>
 8002420:	4b45      	ldr	r3, [pc, #276]	@ (8002538 <UART_SetConfig+0x2e4>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002426:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800242a:	2bc0      	cmp	r3, #192	@ 0xc0
 800242c:	d016      	beq.n	800245c <UART_SetConfig+0x208>
 800242e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002430:	d818      	bhi.n	8002464 <UART_SetConfig+0x210>
 8002432:	2b80      	cmp	r3, #128	@ 0x80
 8002434:	d00a      	beq.n	800244c <UART_SetConfig+0x1f8>
 8002436:	2b80      	cmp	r3, #128	@ 0x80
 8002438:	d814      	bhi.n	8002464 <UART_SetConfig+0x210>
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <UART_SetConfig+0x1f0>
 800243e:	2b40      	cmp	r3, #64	@ 0x40
 8002440:	d008      	beq.n	8002454 <UART_SetConfig+0x200>
 8002442:	e00f      	b.n	8002464 <UART_SetConfig+0x210>
 8002444:	2300      	movs	r3, #0
 8002446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800244a:	e082      	b.n	8002552 <UART_SetConfig+0x2fe>
 800244c:	2302      	movs	r3, #2
 800244e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002452:	e07e      	b.n	8002552 <UART_SetConfig+0x2fe>
 8002454:	2304      	movs	r3, #4
 8002456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800245a:	e07a      	b.n	8002552 <UART_SetConfig+0x2fe>
 800245c:	2308      	movs	r3, #8
 800245e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002462:	e076      	b.n	8002552 <UART_SetConfig+0x2fe>
 8002464:	2310      	movs	r3, #16
 8002466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800246a:	e072      	b.n	8002552 <UART_SetConfig+0x2fe>
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a35      	ldr	r2, [pc, #212]	@ (8002548 <UART_SetConfig+0x2f4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d12a      	bne.n	80024cc <UART_SetConfig+0x278>
 8002476:	4b30      	ldr	r3, [pc, #192]	@ (8002538 <UART_SetConfig+0x2e4>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002480:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002484:	d01a      	beq.n	80024bc <UART_SetConfig+0x268>
 8002486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800248a:	d81b      	bhi.n	80024c4 <UART_SetConfig+0x270>
 800248c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002490:	d00c      	beq.n	80024ac <UART_SetConfig+0x258>
 8002492:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002496:	d815      	bhi.n	80024c4 <UART_SetConfig+0x270>
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <UART_SetConfig+0x250>
 800249c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024a0:	d008      	beq.n	80024b4 <UART_SetConfig+0x260>
 80024a2:	e00f      	b.n	80024c4 <UART_SetConfig+0x270>
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024aa:	e052      	b.n	8002552 <UART_SetConfig+0x2fe>
 80024ac:	2302      	movs	r3, #2
 80024ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024b2:	e04e      	b.n	8002552 <UART_SetConfig+0x2fe>
 80024b4:	2304      	movs	r3, #4
 80024b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024ba:	e04a      	b.n	8002552 <UART_SetConfig+0x2fe>
 80024bc:	2308      	movs	r3, #8
 80024be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024c2:	e046      	b.n	8002552 <UART_SetConfig+0x2fe>
 80024c4:	2310      	movs	r3, #16
 80024c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024ca:	e042      	b.n	8002552 <UART_SetConfig+0x2fe>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a17      	ldr	r2, [pc, #92]	@ (8002530 <UART_SetConfig+0x2dc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d13a      	bne.n	800254c <UART_SetConfig+0x2f8>
 80024d6:	4b18      	ldr	r3, [pc, #96]	@ (8002538 <UART_SetConfig+0x2e4>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80024e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80024e4:	d01a      	beq.n	800251c <UART_SetConfig+0x2c8>
 80024e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80024ea:	d81b      	bhi.n	8002524 <UART_SetConfig+0x2d0>
 80024ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024f0:	d00c      	beq.n	800250c <UART_SetConfig+0x2b8>
 80024f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024f6:	d815      	bhi.n	8002524 <UART_SetConfig+0x2d0>
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <UART_SetConfig+0x2b0>
 80024fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002500:	d008      	beq.n	8002514 <UART_SetConfig+0x2c0>
 8002502:	e00f      	b.n	8002524 <UART_SetConfig+0x2d0>
 8002504:	2300      	movs	r3, #0
 8002506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800250a:	e022      	b.n	8002552 <UART_SetConfig+0x2fe>
 800250c:	2302      	movs	r3, #2
 800250e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002512:	e01e      	b.n	8002552 <UART_SetConfig+0x2fe>
 8002514:	2304      	movs	r3, #4
 8002516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800251a:	e01a      	b.n	8002552 <UART_SetConfig+0x2fe>
 800251c:	2308      	movs	r3, #8
 800251e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002522:	e016      	b.n	8002552 <UART_SetConfig+0x2fe>
 8002524:	2310      	movs	r3, #16
 8002526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800252a:	e012      	b.n	8002552 <UART_SetConfig+0x2fe>
 800252c:	cfff69f3 	.word	0xcfff69f3
 8002530:	40008000 	.word	0x40008000
 8002534:	40013800 	.word	0x40013800
 8002538:	40021000 	.word	0x40021000
 800253c:	40004400 	.word	0x40004400
 8002540:	40004800 	.word	0x40004800
 8002544:	40004c00 	.word	0x40004c00
 8002548:	40005000 	.word	0x40005000
 800254c:	2310      	movs	r3, #16
 800254e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4aae      	ldr	r2, [pc, #696]	@ (8002810 <UART_SetConfig+0x5bc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	f040 8097 	bne.w	800268c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800255e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002562:	2b08      	cmp	r3, #8
 8002564:	d823      	bhi.n	80025ae <UART_SetConfig+0x35a>
 8002566:	a201      	add	r2, pc, #4	@ (adr r2, 800256c <UART_SetConfig+0x318>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	08002591 	.word	0x08002591
 8002570:	080025af 	.word	0x080025af
 8002574:	08002599 	.word	0x08002599
 8002578:	080025af 	.word	0x080025af
 800257c:	0800259f 	.word	0x0800259f
 8002580:	080025af 	.word	0x080025af
 8002584:	080025af 	.word	0x080025af
 8002588:	080025af 	.word	0x080025af
 800258c:	080025a7 	.word	0x080025a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002590:	f7ff fb50 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 8002594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002596:	e010      	b.n	80025ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002598:	4b9e      	ldr	r3, [pc, #632]	@ (8002814 <UART_SetConfig+0x5c0>)
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800259c:	e00d      	b.n	80025ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800259e:	f7ff fadb 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 80025a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80025a4:	e009      	b.n	80025ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80025ac:	e005      	b.n	80025ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80025b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8130 	beq.w	8002822 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	4a94      	ldr	r2, [pc, #592]	@ (8002818 <UART_SetConfig+0x5c4>)
 80025c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025cc:	461a      	mov	r2, r3
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d305      	bcc.n	80025f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d903      	bls.n	80025fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80025f8:	e113      	b.n	8002822 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	2200      	movs	r2, #0
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	60fa      	str	r2, [r7, #12]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	4a84      	ldr	r2, [pc, #528]	@ (8002818 <UART_SetConfig+0x5c4>)
 8002608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800260c:	b29b      	uxth	r3, r3
 800260e:	2200      	movs	r2, #0
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002618:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800261c:	f7fd fdfc 	bl	8000218 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	020b      	lsls	r3, r1, #8
 8002632:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002636:	0202      	lsls	r2, r0, #8
 8002638:	6979      	ldr	r1, [r7, #20]
 800263a:	6849      	ldr	r1, [r1, #4]
 800263c:	0849      	lsrs	r1, r1, #1
 800263e:	2000      	movs	r0, #0
 8002640:	460c      	mov	r4, r1
 8002642:	4605      	mov	r5, r0
 8002644:	eb12 0804 	adds.w	r8, r2, r4
 8002648:	eb43 0905 	adc.w	r9, r3, r5
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	469a      	mov	sl, r3
 8002654:	4693      	mov	fp, r2
 8002656:	4652      	mov	r2, sl
 8002658:	465b      	mov	r3, fp
 800265a:	4640      	mov	r0, r8
 800265c:	4649      	mov	r1, r9
 800265e:	f7fd fddb 	bl	8000218 <__aeabi_uldivmod>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4613      	mov	r3, r2
 8002668:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002670:	d308      	bcc.n	8002684 <UART_SetConfig+0x430>
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002678:	d204      	bcs.n	8002684 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a3a      	ldr	r2, [r7, #32]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	e0ce      	b.n	8002822 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800268a:	e0ca      	b.n	8002822 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002694:	d166      	bne.n	8002764 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002696:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800269a:	2b08      	cmp	r3, #8
 800269c:	d827      	bhi.n	80026ee <UART_SetConfig+0x49a>
 800269e:	a201      	add	r2, pc, #4	@ (adr r2, 80026a4 <UART_SetConfig+0x450>)
 80026a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a4:	080026c9 	.word	0x080026c9
 80026a8:	080026d1 	.word	0x080026d1
 80026ac:	080026d9 	.word	0x080026d9
 80026b0:	080026ef 	.word	0x080026ef
 80026b4:	080026df 	.word	0x080026df
 80026b8:	080026ef 	.word	0x080026ef
 80026bc:	080026ef 	.word	0x080026ef
 80026c0:	080026ef 	.word	0x080026ef
 80026c4:	080026e7 	.word	0x080026e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026c8:	f7ff fab4 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 80026cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80026ce:	e014      	b.n	80026fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026d0:	f7ff fac6 	bl	8001c60 <HAL_RCC_GetPCLK2Freq>
 80026d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80026d6:	e010      	b.n	80026fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002814 <UART_SetConfig+0x5c0>)
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80026dc:	e00d      	b.n	80026fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026de:	f7ff fa3b 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 80026e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80026e4:	e009      	b.n	80026fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80026ec:	e005      	b.n	80026fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80026f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8090 	beq.w	8002822 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	4a44      	ldr	r2, [pc, #272]	@ (8002818 <UART_SetConfig+0x5c4>)
 8002708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800270c:	461a      	mov	r2, r3
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	fbb3 f3f2 	udiv	r3, r3, r2
 8002714:	005a      	lsls	r2, r3, #1
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	441a      	add	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	fbb2 f3f3 	udiv	r3, r2, r3
 8002726:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	d916      	bls.n	800275c <UART_SetConfig+0x508>
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002734:	d212      	bcs.n	800275c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	b29b      	uxth	r3, r3
 800273a:	f023 030f 	bic.w	r3, r3, #15
 800273e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	b29b      	uxth	r3, r3
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	b29a      	uxth	r2, r3
 800274c:	8bfb      	ldrh	r3, [r7, #30]
 800274e:	4313      	orrs	r3, r2
 8002750:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	8bfa      	ldrh	r2, [r7, #30]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	e062      	b.n	8002822 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002762:	e05e      	b.n	8002822 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002764:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002768:	2b08      	cmp	r3, #8
 800276a:	d828      	bhi.n	80027be <UART_SetConfig+0x56a>
 800276c:	a201      	add	r2, pc, #4	@ (adr r2, 8002774 <UART_SetConfig+0x520>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	08002799 	.word	0x08002799
 8002778:	080027a1 	.word	0x080027a1
 800277c:	080027a9 	.word	0x080027a9
 8002780:	080027bf 	.word	0x080027bf
 8002784:	080027af 	.word	0x080027af
 8002788:	080027bf 	.word	0x080027bf
 800278c:	080027bf 	.word	0x080027bf
 8002790:	080027bf 	.word	0x080027bf
 8002794:	080027b7 	.word	0x080027b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002798:	f7ff fa4c 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 800279c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800279e:	e014      	b.n	80027ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027a0:	f7ff fa5e 	bl	8001c60 <HAL_RCC_GetPCLK2Freq>
 80027a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027a6:	e010      	b.n	80027ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002814 <UART_SetConfig+0x5c0>)
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80027ac:	e00d      	b.n	80027ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ae:	f7ff f9d3 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 80027b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027b4:	e009      	b.n	80027ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80027bc:	e005      	b.n	80027ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80027c8:	bf00      	nop
    }

    if (pclk != 0U)
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d028      	beq.n	8002822 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	4a10      	ldr	r2, [pc, #64]	@ (8002818 <UART_SetConfig+0x5c4>)
 80027d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027da:	461a      	mov	r2, r3
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	fbb3 f2f2 	udiv	r2, r3, r2
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	441a      	add	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	2b0f      	cmp	r3, #15
 80027f8:	d910      	bls.n	800281c <UART_SetConfig+0x5c8>
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002800:	d20c      	bcs.n	800281c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	b29a      	uxth	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60da      	str	r2, [r3, #12]
 800280c:	e009      	b.n	8002822 <UART_SetConfig+0x5ce>
 800280e:	bf00      	nop
 8002810:	40008000 	.word	0x40008000
 8002814:	00f42400 	.word	0x00f42400
 8002818:	08002f18 	.word	0x08002f18
      }
      else
      {
        ret = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2201      	movs	r2, #1
 8002826:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2201      	movs	r2, #1
 800282e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2200      	movs	r2, #0
 8002836:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2200      	movs	r2, #0
 800283c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800283e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002842:	4618      	mov	r0, r3
 8002844:	3730      	adds	r7, #48	@ 0x30
 8002846:	46bd      	mov	sp, r7
 8002848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800284c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01a      	beq.n	8002962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800294a:	d10a      	bne.n	8002962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	605a      	str	r2, [r3, #4]
  }
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b098      	sub	sp, #96	@ 0x60
 8002994:	af02      	add	r7, sp, #8
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029a0:	f7fe f8e6 	bl	8000b70 <HAL_GetTick>
 80029a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d12f      	bne.n	8002a14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029bc:	2200      	movs	r2, #0
 80029be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f88e 	bl	8002ae4 <UART_WaitOnFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d022      	beq.n	8002a14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d6:	e853 3f00 	ldrex	r3, [r3]
 80029da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80029dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029f4:	e841 2300 	strex	r3, r2, [r1]
 80029f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80029fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e6      	bne.n	80029ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e063      	b.n	8002adc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d149      	bne.n	8002ab6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f857 	bl	8002ae4 <UART_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d03c      	beq.n	8002ab6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	e853 3f00 	ldrex	r3, [r3]
 8002a48:	623b      	str	r3, [r7, #32]
   return(result);
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a62:	e841 2300 	strex	r3, r2, [r1]
 8002a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1e6      	bne.n	8002a3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3308      	adds	r3, #8
 8002a74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a8e:	61fa      	str	r2, [r7, #28]
 8002a90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a92:	69b9      	ldr	r1, [r7, #24]
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	e841 2300 	strex	r3, r2, [r1]
 8002a9a:	617b      	str	r3, [r7, #20]
   return(result);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1e5      	bne.n	8002a6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e012      	b.n	8002adc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3758      	adds	r7, #88	@ 0x58
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af4:	e04f      	b.n	8002b96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d04b      	beq.n	8002b96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afe:	f7fe f837 	bl	8000b70 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d302      	bcc.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e04e      	b.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d037      	beq.n	8002b96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b80      	cmp	r3, #128	@ 0x80
 8002b2a:	d034      	beq.n	8002b96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b40      	cmp	r3, #64	@ 0x40
 8002b30:	d031      	beq.n	8002b96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d110      	bne.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2208      	movs	r2, #8
 8002b46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f838 	bl	8002bbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2208      	movs	r2, #8
 8002b52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e029      	b.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b70:	d111      	bne.n	8002b96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f81e 	bl	8002bbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e00f      	b.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	bf0c      	ite	eq
 8002ba6:	2301      	moveq	r3, #1
 8002ba8:	2300      	movne	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d0a0      	beq.n	8002af6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b095      	sub	sp, #84	@ 0x54
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bce:	e853 3f00 	ldrex	r3, [r3]
 8002bd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002be4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002be6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bec:	e841 2300 	strex	r3, r2, [r1]
 8002bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e6      	bne.n	8002bc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	e853 3f00 	ldrex	r3, [r3]
 8002c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3308      	adds	r3, #8
 8002c1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e3      	bne.n	8002bf8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d118      	bne.n	8002c6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	e853 3f00 	ldrex	r3, [r3]
 8002c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f023 0310 	bic.w	r3, r3, #16
 8002c4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5a:	6979      	ldr	r1, [r7, #20]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	e841 2300 	strex	r3, r2, [r1]
 8002c62:	613b      	str	r3, [r7, #16]
   return(result);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1e6      	bne.n	8002c38 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002c7e:	bf00      	nop
 8002c80:	3754      	adds	r7, #84	@ 0x54
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b085      	sub	sp, #20
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_UARTEx_DisableFifoMode+0x16>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e027      	b.n	8002cf0 <HAL_UARTEx_DisableFifoMode+0x66>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2224      	movs	r2, #36	@ 0x24
 8002cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002cce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e02d      	b.n	8002d70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	@ 0x24
 8002d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0201 	bic.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f84f 	bl	8002df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e02d      	b.n	8002dec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	@ 0x24
 8002d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f811 	bl	8002df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d108      	bne.n	8002e16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002e14:	e031      	b.n	8002e7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002e16:	2308      	movs	r3, #8
 8002e18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	0e5b      	lsrs	r3, r3, #25
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	0f5b      	lsrs	r3, r3, #29
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e3e:	7bbb      	ldrb	r3, [r7, #14]
 8002e40:	7b3a      	ldrb	r2, [r7, #12]
 8002e42:	4911      	ldr	r1, [pc, #68]	@ (8002e88 <UARTEx_SetNbDataToProcess+0x94>)
 8002e44:	5c8a      	ldrb	r2, [r1, r2]
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002e4a:	7b3a      	ldrb	r2, [r7, #12]
 8002e4c:	490f      	ldr	r1, [pc, #60]	@ (8002e8c <UARTEx_SetNbDataToProcess+0x98>)
 8002e4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e50:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	7b7a      	ldrb	r2, [r7, #13]
 8002e60:	4909      	ldr	r1, [pc, #36]	@ (8002e88 <UARTEx_SetNbDataToProcess+0x94>)
 8002e62:	5c8a      	ldrb	r2, [r1, r2]
 8002e64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002e68:	7b7a      	ldrb	r2, [r7, #13]
 8002e6a:	4908      	ldr	r1, [pc, #32]	@ (8002e8c <UARTEx_SetNbDataToProcess+0x98>)
 8002e6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	08002f30 	.word	0x08002f30
 8002e8c:	08002f38 	.word	0x08002f38

08002e90 <memset>:
 8002e90:	4402      	add	r2, r0
 8002e92:	4603      	mov	r3, r0
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d100      	bne.n	8002e9a <memset+0xa>
 8002e98:	4770      	bx	lr
 8002e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e9e:	e7f9      	b.n	8002e94 <memset+0x4>

08002ea0 <__libc_init_array>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8002ed8 <__libc_init_array+0x38>)
 8002ea4:	4c0d      	ldr	r4, [pc, #52]	@ (8002edc <__libc_init_array+0x3c>)
 8002ea6:	1b64      	subs	r4, r4, r5
 8002ea8:	10a4      	asrs	r4, r4, #2
 8002eaa:	2600      	movs	r6, #0
 8002eac:	42a6      	cmp	r6, r4
 8002eae:	d109      	bne.n	8002ec4 <__libc_init_array+0x24>
 8002eb0:	4d0b      	ldr	r5, [pc, #44]	@ (8002ee0 <__libc_init_array+0x40>)
 8002eb2:	4c0c      	ldr	r4, [pc, #48]	@ (8002ee4 <__libc_init_array+0x44>)
 8002eb4:	f000 f818 	bl	8002ee8 <_init>
 8002eb8:	1b64      	subs	r4, r4, r5
 8002eba:	10a4      	asrs	r4, r4, #2
 8002ebc:	2600      	movs	r6, #0
 8002ebe:	42a6      	cmp	r6, r4
 8002ec0:	d105      	bne.n	8002ece <__libc_init_array+0x2e>
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
 8002ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec8:	4798      	blx	r3
 8002eca:	3601      	adds	r6, #1
 8002ecc:	e7ee      	b.n	8002eac <__libc_init_array+0xc>
 8002ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed2:	4798      	blx	r3
 8002ed4:	3601      	adds	r6, #1
 8002ed6:	e7f2      	b.n	8002ebe <__libc_init_array+0x1e>
 8002ed8:	08002f48 	.word	0x08002f48
 8002edc:	08002f48 	.word	0x08002f48
 8002ee0:	08002f48 	.word	0x08002f48
 8002ee4:	08002f4c 	.word	0x08002f4c

08002ee8 <_init>:
 8002ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eea:	bf00      	nop
 8002eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eee:	bc08      	pop	{r3}
 8002ef0:	469e      	mov	lr, r3
 8002ef2:	4770      	bx	lr

08002ef4 <_fini>:
 8002ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef6:	bf00      	nop
 8002ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efa:	bc08      	pop	{r3}
 8002efc:	469e      	mov	lr, r3
 8002efe:	4770      	bx	lr
